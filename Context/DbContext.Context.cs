//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SuitappRest.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SuitAppResDB : DbContext
    {
        public SuitAppResDB()
            : base("name=SuitAppResDB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Billing> Billings { get; set; }
        public virtual DbSet<BillingReturn> BillingReturns { get; set; }
        public virtual DbSet<BillPayment> BillPayments { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<DirectSale> DirectSales { get; set; }
        public virtual DbSet<DirectSalesDetail> DirectSalesDetails { get; set; }
        public virtual DbSet<EmpRoute> EmpRoutes { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<KOT> KOTs { get; set; }
        public virtual DbSet<KOTDetail> KOTDetails { get; set; }
        public virtual DbSet<login> logins { get; set; }
        public virtual DbSet<Login_status> Login_status { get; set; }
        public virtual DbSet<MAC> MACs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<RoleList> RoleLists { get; set; }
        public virtual DbSet<RootPosition> RootPositions { get; set; }
        public virtual DbSet<SaleOrderDetailsTemp> SaleOrderDetailsTemps { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TABLE_CATEGORY> TABLE_CATEGORY { get; set; }
        public virtual DbSet<TABLE_DETAILS> TABLE_DETAILS { get; set; }
        public virtual DbSet<tbl_Item_Image> tbl_Item_Image { get; set; }
        public virtual DbSet<UserLoginHistory> UserLoginHistories { get; set; }
        public virtual DbSet<AccountBalance> AccountBalances { get; set; }
        public virtual DbSet<AccountDataEntry> AccountDataEntries { get; set; }
        public virtual DbSet<Accout> Accouts { get; set; }
        public virtual DbSet<AcGroupMaster> AcGroupMasters { get; set; }
        public virtual DbSet<AcHead> AcHeads { get; set; }
        public virtual DbSet<AcTran> AcTrans { get; set; }
        public virtual DbSet<Allocation> Allocations { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BatchDetaile> BatchDetailes { get; set; }
        public virtual DbSet<BillingDetailsEdittedDiscount> BillingDetailsEdittedDiscounts { get; set; }
        public virtual DbSet<BillingEdittedDiscount> BillingEdittedDiscounts { get; set; }
        public virtual DbSet<BillingForEstrimate> BillingForEstrimates { get; set; }
        public virtual DbSet<BillinigDetail> BillinigDetails { get; set; }
        public virtual DbSet<BillinigDetailsForEstimate> BillinigDetailsForEstimates { get; set; }
        public virtual DbSet<BillinigReturnDetail> BillinigReturnDetails { get; set; }
        public virtual DbSet<BillinigTempDetail> BillinigTempDetails { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfoes { get; set; }
        public virtual DbSet<Container> Containers { get; set; }
        public virtual DbSet<CumsterPendingAmount> CumsterPendingAmounts { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<EmpRouteDistributr> EmpRouteDistributrs { get; set; }
        public virtual DbSet<form> forms { get; set; }
        public virtual DbSet<GeneralSetting> GeneralSettings { get; set; }
        public virtual DbSet<ItemMiscellaniou> ItemMiscellanious { get; set; }
        public virtual DbSet<ItemPatternDetail> ItemPatternDetails { get; set; }
        public virtual DbSet<ItemStockTemp> ItemStockTemps { get; set; }
        public virtual DbSet<Loading> Loadings { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<NewCustomer> NewCustomers { get; set; }
        public virtual DbSet<openingstock> openingstocks { get; set; }
        public virtual DbSet<OpeningstockDetaile> OpeningstockDetailes { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PL> PLs { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseReturn> PurchaseReturns { get; set; }
        public virtual DbSet<PurchaseReturnDetail> PurchaseReturnDetails { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<RootMaster> RootMasters { get; set; }
        public virtual DbSet<StockAdjestment> StockAdjestments { get; set; }
        public virtual DbSet<StockAdjestmentDetaile> StockAdjestmentDetailes { get; set; }
        public virtual DbSet<StockRegister> StockRegisters { get; set; }
        public virtual DbSet<StockRegisterFoeEstimate> StockRegisterFoeEstimates { get; set; }
        public virtual DbSet<TaxSetting> TaxSettings { get; set; }
        public virtual DbSet<Tmp_CompanyInfo> Tmp_CompanyInfo { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitMaster> UnitMasters { get; set; }
        public virtual DbSet<UserTable> UserTables { get; set; }
        public virtual DbSet<VanLoadingSheet> VanLoadingSheets { get; set; }
    
        public virtual int f_GetItemName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetItemName");
        }
    
        public virtual int f_GetUnitName(Nullable<int> itemID, Nullable<int> unitID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetUnitName", itemIDParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<f_GetUserByCompanyID_Result> f_GetUserByCompanyID(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetUserByCompanyID_Result>("f_GetUserByCompanyID", companyIdParameter);
        }
    
        public virtual int AcGroupMasterDelete(ObjectParameter gSlNo, string gName)
        {
            var gNameParameter = gName != null ?
                new ObjectParameter("GName", gName) :
                new ObjectParameter("GName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupMasterDelete", gSlNo, gNameParameter);
        }
    
        public virtual int AcHeadsDelete(ObjectParameter hSlNo, string hName)
        {
            var hNameParameter = hName != null ?
                new ObjectParameter("HName", hName) :
                new ObjectParameter("HName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadsDelete", hSlNo, hNameParameter);
        }
    
        public virtual int App_deleteAlocation(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("App_deleteAlocation", userIdParameter);
        }
    
        public virtual ObjectResult<AppLogin_Result> AppLogin(Nullable<int> companyId, string username, string password, string macID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var macIDParameter = macID != null ?
                new ObjectParameter("MacID", macID) :
                new ObjectParameter("MacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppLogin_Result>("AppLogin", companyIdParameter, usernameParameter, passwordParameter, macIDParameter);
        }
    
        public virtual ObjectResult<AppLoginRes_Result> AppLoginRes(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppLoginRes_Result>("AppLoginRes", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateAccountCode(string accountCode, Nullable<int> accountID)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateAccountCode", accountCodeParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateBatch(string batchName, Nullable<int> batchId)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateBatch", batchNameParameter, batchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateBillNo(Nullable<int> billNo, Nullable<int> billID, Nullable<int> companyid)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateBillNo", billNoParameter, billIDParameter, companyidParameter);
        }
    
        public virtual int CheckDuplicateBillReturnNo(Nullable<int> billNo, Nullable<int> billID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckDuplicateBillReturnNo", billNoParameter, billIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateCategoryCode(string categoryCode, Nullable<int> categoryID)
        {
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateCategoryCode", categoryCodeParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateCategoryName(string categoryName, Nullable<int> categoryID)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateCategoryName", categoryNameParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateDiscount(Nullable<int> discount, Nullable<int> discountID)
        {
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(int));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateDiscount", discountParameter, discountIDParameter);
        }
    
        public virtual int CheckDuplicateItemCode(string itemCode, Nullable<int> itemID)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckDuplicateItemCode", itemCodeParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateItemName(string itemName, Nullable<int> itemID)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateItemName", itemNameParameter, itemIDParameter);
        }
    
        public virtual int CheckDuplicateItemNameBatch(Nullable<int> batchId, Nullable<int> itemID)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckDuplicateItemNameBatch", batchIdParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateloading(Nullable<int> loadId, string lodingcharge)
        {
            var loadIdParameter = loadId.HasValue ?
                new ObjectParameter("LoadId", loadId) :
                new ObjectParameter("LoadId", typeof(int));
    
            var lodingchargeParameter = lodingcharge != null ?
                new ObjectParameter("lodingcharge", lodingcharge) :
                new ObjectParameter("lodingcharge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateloading", loadIdParameter, lodingchargeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateLocation(Nullable<int> locationID, string locationName)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateLocation", locationIDParameter, locationNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicatePatternNo(string patternNo)
        {
            var patternNoParameter = patternNo != null ?
                new ObjectParameter("PatternNo", patternNo) :
                new ObjectParameter("PatternNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicatePatternNo", patternNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicatePLCode(string itemCode, Nullable<int> itemID)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicatePLCode", itemCodeParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicatePLItemName(string itemName, Nullable<int> itemID)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicatePLItemName", itemNameParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicatePurchaseNo(Nullable<int> purchaseNo, Nullable<int> purchaseID)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicatePurchaseNo", purchaseNoParameter, purchaseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicatePurInvoiceNo(Nullable<int> supplierId, string purInvoiceNo, Nullable<int> purchaseID, Nullable<int> companyId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var purInvoiceNoParameter = purInvoiceNo != null ?
                new ObjectParameter("PurInvoiceNo", purInvoiceNo) :
                new ObjectParameter("PurInvoiceNo", typeof(string));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicatePurInvoiceNo", supplierIdParameter, purInvoiceNoParameter, purchaseIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateReturnBillNo(Nullable<int> returnBillNo, Nullable<int> billID, Nullable<int> companyid)
        {
            var returnBillNoParameter = returnBillNo.HasValue ?
                new ObjectParameter("ReturnBillNo", returnBillNo) :
                new ObjectParameter("ReturnBillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateReturnBillNo", returnBillNoParameter, billIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateRootMaster(string rootName, Nullable<int> rootId)
        {
            var rootNameParameter = rootName != null ?
                new ObjectParameter("RootName", rootName) :
                new ObjectParameter("RootName", typeof(string));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateRootMaster", rootNameParameter, rootIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateTax(Nullable<int> taxID, string taxName)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateTax", taxIDParameter, taxNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateTaxtype(Nullable<int> taxID, string taxType)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateTaxtype", taxIDParameter, taxTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateUnit(string unitName, Nullable<int> unitID)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateUnit", unitNameParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> checkduplicateUserName(Nullable<int> userId, string userName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkduplicateUserName", userIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateVoucherNo(string voucherNo, Nullable<int> accountID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateVoucherNo", voucherNoParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateWholeSaleBillNo(Nullable<int> wholeSaleBillNo, Nullable<int> billID, Nullable<int> companyid)
        {
            var wholeSaleBillNoParameter = wholeSaleBillNo.HasValue ?
                new ObjectParameter("WholeSaleBillNo", wholeSaleBillNo) :
                new ObjectParameter("WholeSaleBillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateWholeSaleBillNo", wholeSaleBillNoParameter, billIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<CheckInvoiceNoReturn_Result> CheckInvoiceNoReturn(Nullable<int> invoiceNo, Nullable<int> companyid)
        {
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckInvoiceNoReturn_Result>("CheckInvoiceNoReturn", invoiceNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckNewDuplicatePurchaseNo(Nullable<int> purchaseNo, Nullable<int> purchaseID, Nullable<int> companyId)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckNewDuplicatePurchaseNo", purchaseNoParameter, purchaseIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckNewDuplicateWholeSaleBillNo(Nullable<int> billNo, Nullable<int> billID, Nullable<int> companyid)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckNewDuplicateWholeSaleBillNo", billNoParameter, billIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<CheckUsingRootMaster_Result> CheckUsingRootMaster(Nullable<int> rootId)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckUsingRootMaster_Result>("CheckUsingRootMaster", rootIdParameter);
        }
    
        public virtual ObjectResult<CheckWholesaleInvoiceReturn_Result> CheckWholesaleInvoiceReturn(Nullable<int> invoiceNo, Nullable<int> companyid)
        {
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckWholesaleInvoiceReturn_Result>("CheckWholesaleInvoiceReturn", invoiceNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<ChkPurRetunInvoiceNo_Result> ChkPurRetunInvoiceNo(Nullable<int> supplierID, string invoiceNo, Nullable<int> companyid)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChkPurRetunInvoiceNo_Result>("ChkPurRetunInvoiceNo", supplierIDParameter, invoiceNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<ChkPurReturnPurchaseNo_Result> ChkPurReturnPurchaseNo(Nullable<int> purchaseNo, string companyid)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChkPurReturnPurchaseNo_Result>("ChkPurReturnPurchaseNo", purchaseNoParameter, companyidParameter);
        }
    
        public virtual int DelActOfPurchase(Nullable<int> purchaseNo, string narration, string type, Nullable<int> companyId)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelActOfPurchase", purchaseNoParameter, narrationParameter, typeParameter, companyIdParameter);
        }
    
        public virtual int DelActOfsALES(Nullable<int> billNo, string narration, string type, Nullable<int> companyId)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelActOfsALES", billNoParameter, narrationParameter, typeParameter, companyIdParameter);
        }
    
        public virtual int Delete_Container(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Container", nameParameter);
        }
    
        public virtual int Delete_User(Nullable<int> userId, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_User", userIdParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteAccount(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccount", accountIDParameter);
        }
    
        public virtual int DeleteAccountHeads(ObjectParameter hSlNo, string hName, Nullable<int> gUnder, string type)
        {
            var hNameParameter = hName != null ?
                new ObjectParameter("HName", hName) :
                new ObjectParameter("HName", typeof(string));
    
            var gUnderParameter = gUnder.HasValue ?
                new ObjectParameter("GUnder", gUnder) :
                new ObjectParameter("GUnder", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccountHeads", hSlNo, hNameParameter, gUnderParameter, typeParameter);
        }
    
        public virtual int DeleteAccoutByID_App(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccoutByID_App", accountIDParameter);
        }
    
        public virtual int DeleteAcHeadByID_App(Nullable<int> acHeadId)
        {
            var acHeadIdParameter = acHeadId.HasValue ?
                new ObjectParameter("AcHeadId", acHeadId) :
                new ObjectParameter("AcHeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcHeadByID_App", acHeadIdParameter);
        }
    
        public virtual int DeleteAcTranOfPayment(string billNo, Nullable<int> companyId, string narration, string type)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcTranOfPayment", billNoParameter, companyIdParameter, narrationParameter, typeParameter);
        }
    
        public virtual int DeleteAcTranOfpurchase(string billNo, Nullable<int> companyId, string narration, string type)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcTranOfpurchase", billNoParameter, companyIdParameter, narrationParameter, typeParameter);
        }
    
        public virtual int DeleteAcTranOfSales(string billNo, Nullable<int> companyId, string narration, string type)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcTranOfSales", billNoParameter, companyIdParameter, narrationParameter, typeParameter);
        }
    
        public virtual int DeletebankDetailes(Nullable<int> bankId, Nullable<int> acHeadId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var acHeadIdParameter = acHeadId.HasValue ?
                new ObjectParameter("AcHeadId", acHeadId) :
                new ObjectParameter("AcHeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletebankDetailes", bankIdParameter, acHeadIdParameter);
        }
    
        public virtual int DeleteBatchDetailes(ObjectParameter batchId, string batchName, string expiryDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> companyId)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBatchDetailes", batchId, batchNameParameter, expiryDateParameter, createdByParameter, createdDateParameter, companyIdParameter);
        }
    
        public virtual int DeleteBilling(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBilling", billIDParameter);
        }
    
        public virtual int DeleteBillingDetails(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillingDetails", billIDParameter);
        }
    
        public virtual int DeleteBillingReturn(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillingReturn", billIDParameter);
        }
    
        public virtual int DeleteBillingreturnDetailes(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillingreturnDetailes", billIDParameter);
        }
    
        public virtual int DeleteBillingTempDetails(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillingTempDetails", billIDParameter);
        }
    
        public virtual int DeleteBillReturn(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillReturn", billIDParameter);
        }
    
        public virtual int DeleteBillReturnDetails(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBillReturnDetails", billIDParameter);
        }
    
        public virtual int DeleteCashVoucher(ObjectParameter slno, string billNo, string narration, string type, Nullable<int> companyId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCashVoucher", slno, billNoParameter, narrationParameter, typeParameter, companyIdParameter);
        }
    
        public virtual int DeleteCompany(Nullable<int> companyId, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompany", companyIdParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteCompanyByID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCompanyByID", companyIDParameter);
        }
    
        public virtual int DeleteCumstomerNew(Nullable<int> customerID, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCumstomerNew", customerIDParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", customerIDParameter);
        }
    
        public virtual int DeleteDirectSaleDetails_before_updation(Nullable<int> dSID)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDirectSaleDetails_before_updation", dSIDParameter);
        }
    
        public virtual int DeleteDiscount(Nullable<int> discountID)
        {
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDiscount", discountIDParameter);
        }
    
        public virtual int DeletedItemPatternDetails(string itemame)
        {
            var itemameParameter = itemame != null ?
                new ObjectParameter("Itemame", itemame) :
                new ObjectParameter("Itemame", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletedItemPatternDetails", itemameParameter);
        }
    
        public virtual int DeletedItemPatternDetailsByPattern(string itemame)
        {
            var itemameParameter = itemame != null ?
                new ObjectParameter("Itemame", itemame) :
                new ObjectParameter("Itemame", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletedItemPatternDetailsByPattern", itemameParameter);
        }
    
        public virtual int DeletedUserPermission(string permissionId)
        {
            var permissionIdParameter = permissionId != null ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletedUserPermission", permissionIdParameter);
        }
    
        public virtual int DeleteEdittedPriceBillingDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEdittedPriceBillingDetails", itemIDParameter);
        }
    
        public virtual int deleteempiddistributor(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteempiddistributor", empIDParameter, companyIDParameter);
        }
    
        public virtual int deleteempidRoute(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteempidRoute", empIDParameter, companyIDParameter);
        }
    
        public virtual int deleteemproute(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteemproute", empIDParameter, companyIDParameter);
        }
    
        public virtual int DeleteEstimateBillingDetailes(Nullable<int> estimateId)
        {
            var estimateIdParameter = estimateId.HasValue ?
                new ObjectParameter("EstimateId", estimateId) :
                new ObjectParameter("EstimateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEstimateBillingDetailes", estimateIdParameter);
        }
    
        public virtual int DeleteItem(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItem", itemIDParameter);
        }
    
        public virtual int DeleteItemCategory(Nullable<int> categoryID, Nullable<int> group)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemCategory", categoryIDParameter, groupParameter);
        }
    
        public virtual int DeleteItemDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemDetails", itemIDParameter);
        }
    
        public virtual int DeleteItemDetailsBatch(Nullable<int> itemID, Nullable<int> batchId)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemDetailsBatch", itemIDParameter, batchIdParameter);
        }
    
        public virtual int DeleteItemState(Nullable<int> stateID, Nullable<int> group, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemState", stateIDParameter, groupParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteKotDetailsBySuitAppID(string suitAppId)
        {
            var suitAppIdParameter = suitAppId != null ?
                new ObjectParameter("SuitAppId", suitAppId) :
                new ObjectParameter("SuitAppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKotDetailsBySuitAppID", suitAppIdParameter);
        }
    
        public virtual int Deleteloadingcharge(Nullable<int> loadId)
        {
            var loadIdParameter = loadId.HasValue ?
                new ObjectParameter("LoadId", loadId) :
                new ObjectParameter("LoadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deleteloadingcharge", loadIdParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", locationIDParameter);
        }
    
        public virtual int DeleteLocation2(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation2", locationIDParameter);
        }
    
        public virtual int DeleteMac(Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string macID, string remark, Nullable<int> id)
        {
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var macIDParameter = macID != null ?
                new ObjectParameter("MacID", macID) :
                new ObjectParameter("MacID", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMac", deletedByParameter, deletedDateParameter, macIDParameter, remarkParameter, idParameter);
        }
    
        public virtual int DELETEOPENINGSTOCKDETAILES(Nullable<int> openingId)
        {
            var openingIdParameter = openingId.HasValue ?
                new ObjectParameter("openingId", openingId) :
                new ObjectParameter("openingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETEOPENINGSTOCKDETAILES", openingIdParameter);
        }
    
        public virtual int deleteopeningstockwithcance(Nullable<int> openingId, Nullable<int> companyId)
        {
            var openingIdParameter = openingId.HasValue ?
                new ObjectParameter("openingId", openingId) :
                new ObjectParameter("openingId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteopeningstockwithcance", openingIdParameter, companyIdParameter);
        }
    
        public virtual int DeleteOpeningVoucher(ObjectParameter slno, string billNo, string narration, string type, Nullable<int> companyId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOpeningVoucher", slno, billNoParameter, narrationParameter, typeParameter, companyIdParameter);
        }
    
        public virtual int DeletePaymentDetailes(Nullable<int> slNo, Nullable<int> companyId)
        {
            var slNoParameter = slNo.HasValue ?
                new ObjectParameter("SlNo", slNo) :
                new ObjectParameter("SlNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentDetailes", slNoParameter, companyIdParameter);
        }
    
        public virtual int DeletePL(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePL", itemIdParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", itemIDParameter);
        }
    
        public virtual int DeletePurchase(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchase", purchaseIDParameter);
        }
    
        public virtual int DeletePurchaseDetails(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseDetails", purchaseIDParameter);
        }
    
        public virtual int DeletePurchaseOrder(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrder", purchaseIDParameter);
        }
    
        public virtual int DeletePurchaseOrderDetails(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderDetails", purchaseIDParameter);
        }
    
        public virtual int DeletePurchaseReturn(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseReturn", purchaseIDParameter);
        }
    
        public virtual int DeletePurchaseReturnDetails(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseReturnDetails", purchaseIDParameter);
        }
    
        public virtual int DeleteRceiptDetailes(Nullable<int> slNo, Nullable<int> companyId)
        {
            var slNoParameter = slNo.HasValue ?
                new ObjectParameter("SlNo", slNo) :
                new ObjectParameter("SlNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRceiptDetailes", slNoParameter, companyIdParameter);
        }
    
        public virtual int DeleteRetailEstimate(Nullable<int> estimateId)
        {
            var estimateIdParameter = estimateId.HasValue ?
                new ObjectParameter("EstimateId", estimateId) :
                new ObjectParameter("EstimateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRetailEstimate", estimateIdParameter);
        }
    
        public virtual int DeleteRootMaster(Nullable<int> rootId, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRootMaster", rootIdParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteRouteDb2(Nullable<int> rootId)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRouteDb2", rootIdParameter);
        }
    
        public virtual int DeleteSaleDetails_before_updation(Nullable<int> sOID)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSaleDetails_before_updation", sOIDParameter);
        }
    
        public virtual int DeleteSaleOrder(Nullable<int> sOID, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSaleOrder", sOIDParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int DeleteSaleOrderDetails(Nullable<int> sOID)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSaleOrderDetails", sOIDParameter);
        }
    
        public virtual int DeleteServerDirectSaleDetails(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServerDirectSaleDetails", companyIDParameter);
        }
    
        public virtual int DeleteSingleJournal(ObjectParameter slno, string billNo, string narration, string type, Nullable<int> companyId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSingleJournal", slno, billNoParameter, narrationParameter, typeParameter, companyIdParameter);
        }
    
        public virtual int DeleteStockAdjestmentDetailes(Nullable<int> billId)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockAdjestmentDetailes", billIdParameter);
        }
    
        public virtual int DeleteStockRegister(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockRegister", itemIDParameter, itemCodeParameter, itemCategoryParameter, companyIDParameter);
        }
    
        public virtual int DeleteStockRegisterForEstimate(Nullable<int> estimateID)
        {
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("EstimateID", estimateID) :
                new ObjectParameter("EstimateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockRegisterForEstimate", estimateIDParameter);
        }
    
        public virtual int DeleteStockTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockTemp");
        }
    
        public virtual int DeleteStockWhileBillingReturn(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> formType, Nullable<int> estimateNo)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStockWhileBillingReturn", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, formTypeParameter, estimateNoParameter);
        }
    
        public virtual int DeleteTax(Nullable<int> taxID)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTax", taxIDParameter);
        }
    
        public virtual int DeleteUnit(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUnit", unitIDParameter);
        }
    
        public virtual int DeleteUserByID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserByID", userIdParameter);
        }
    
        public virtual int DeleteVanStock(Nullable<int> vanId)
        {
            var vanIdParameter = vanId.HasValue ?
                new ObjectParameter("VanId", vanId) :
                new ObjectParameter("VanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVanStock", vanIdParameter);
        }
    
        public virtual int DeleteVoucher(Nullable<int> voucherNo)
        {
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVoucher", voucherNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DirectSaleIDAutogenerate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DirectSaleIDAutogenerate");
        }
    
        public virtual ObjectResult<DirectSalesByOrderNo_Result> DirectSalesByOrderNo(string orderno)
        {
            var ordernoParameter = orderno != null ?
                new ObjectParameter("Orderno", orderno) :
                new ObjectParameter("Orderno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DirectSalesByOrderNo_Result>("DirectSalesByOrderNo", ordernoParameter);
        }
    
        public virtual ObjectResult<DirectSaleslisting_Result> DirectSaleslisting(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DirectSaleslisting_Result>("DirectSaleslisting", userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<DistrictWiseSalesOrderReport_Result> DistrictWiseSalesOrderReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> district, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DistrictWiseSalesOrderReport_Result>("DistrictWiseSalesOrderReport", fromDateParameter, toDateParameter, districtParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<EmpDistribtrsearch_Result> EmpDistribtrsearch(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpDistribtrsearch_Result>("EmpDistribtrsearch", companyIDParameter);
        }
    
        public virtual ObjectResult<EmployeeSalesOrderReport_Result> EmployeeSalesOrderReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeSalesOrderReport_Result>("EmployeeSalesOrderReport", fromDateParameter, toDateParameter, userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<EmpRouteDistribtrsearch_Result> EmpRouteDistribtrsearch(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpRouteDistribtrsearch_Result>("EmpRouteDistribtrsearch", empIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<EmpRoutesearch_Result> EmpRoutesearch(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpRoutesearch_Result>("EmpRoutesearch", empIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<FindOldSale_Result> FindOldSale(Nullable<int> billID, Nullable<int> cumstomerId, Nullable<int> itemId, Nullable<int> companyid)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var cumstomerIdParameter = cumstomerId.HasValue ?
                new ObjectParameter("CumstomerId", cumstomerId) :
                new ObjectParameter("CumstomerId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindOldSale_Result>("FindOldSale", billIDParameter, cumstomerIdParameter, itemIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<FindOldWholesale_Result> FindOldWholesale(Nullable<int> billID, Nullable<int> cumstomerId, Nullable<int> itemId, Nullable<int> companyid)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var cumstomerIdParameter = cumstomerId.HasValue ?
                new ObjectParameter("CumstomerId", cumstomerId) :
                new ObjectParameter("CumstomerId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindOldWholesale_Result>("FindOldWholesale", billIDParameter, cumstomerIdParameter, itemIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Gcompanydetailes_Result> Gcompanydetailes(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gcompanydetailes_Result>("Gcompanydetailes", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GeCategoryNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GeCategoryNo");
        }
    
        public virtual ObjectResult<GetAccontHead_Result> GetAccontHead(Nullable<int> acHead)
        {
            var acHeadParameter = acHead.HasValue ?
                new ObjectParameter("AcHead", acHead) :
                new ObjectParameter("AcHead", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccontHead_Result>("GetAccontHead", acHeadParameter);
        }
    
        public virtual ObjectResult<GetAccountDetailsForCashBookByVoucher_Result> GetAccountDetailsForCashBookByVoucher(string voucherNo)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountDetailsForCashBookByVoucher_Result>("GetAccountDetailsForCashBookByVoucher", voucherNoParameter);
        }
    
        public virtual ObjectResult<GetAccountGroup_Result> GetAccountGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountGroup_Result>("GetAccountGroup");
        }
    
        public virtual ObjectResult<GETACCOUNTGROUPMASTER_Result> GETACCOUNTGROUPMASTER()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETACCOUNTGROUPMASTER_Result>("GETACCOUNTGROUPMASTER");
        }
    
        public virtual ObjectResult<GetAccountGroupMasterById_Result> GetAccountGroupMasterById(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountGroupMasterById_Result>("GetAccountGroupMasterById", accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountHeadGroupMaster_Result> GetAccountHeadGroupMaster(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHeadGroupMaster_Result>("GetAccountHeadGroupMaster", groupIdParameter);
        }
    
        public virtual ObjectResult<GetAccountHeads_Result> GetAccountHeads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHeads_Result>("GetAccountHeads");
        }
    
        public virtual ObjectResult<GetAccountHeadsByLedgerType_Result> GetAccountHeadsByLedgerType(Nullable<int> ledgerType, string name)
        {
            var ledgerTypeParameter = ledgerType.HasValue ?
                new ObjectParameter("LedgerType", ledgerType) :
                new ObjectParameter("LedgerType", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHeadsByLedgerType_Result>("GetAccountHeadsByLedgerType", ledgerTypeParameter, nameParameter);
        }
    
        public virtual ObjectResult<GetAccountHeadsbyName_Result> GetAccountHeadsbyName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHeadsbyName_Result>("GetAccountHeadsbyName", nameParameter);
        }
    
        public virtual ObjectResult<GetAccountNameRepetaion_Result> GetAccountNameRepetaion(Nullable<int> companyId, Nullable<int> headId, string headName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var headIdParameter = headId.HasValue ?
                new ObjectParameter("HeadId", headId) :
                new ObjectParameter("HeadId", typeof(int));
    
            var headNameParameter = headName != null ?
                new ObjectParameter("HeadName", headName) :
                new ObjectParameter("HeadName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountNameRepetaion_Result>("GetAccountNameRepetaion", companyIdParameter, headIdParameter, headNameParameter);
        }
    
        public virtual ObjectResult<GetAccounts_Result> GetAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccounts_Result>("GetAccounts");
        }
    
        public virtual ObjectResult<GetAccountsById_Result> GetAccountsById(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsById_Result>("GetAccountsById", accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountsByIdForCustomerpopup_Result> GetAccountsByIdForCustomerpopup(Nullable<int> accountID, string name, string address, string mob, string tinNo)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("Mob", mob) :
                new ObjectParameter("Mob", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsByIdForCustomerpopup_Result>("GetAccountsByIdForCustomerpopup", accountIDParameter, nameParameter, addressParameter, mobParameter, tinNoParameter);
        }
    
        public virtual ObjectResult<GetAccountsBySelectedAccount_Result> GetAccountsBySelectedAccount(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsBySelectedAccount_Result>("GetAccountsBySelectedAccount", accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountsForJournalVoucher_Result> GetAccountsForJournalVoucher(string accountName, Nullable<int> accountID)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsForJournalVoucher_Result>("GetAccountsForJournalVoucher", accountNameParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountsForPaymentVoucher_Result> GetAccountsForPaymentVoucher(string accountName, Nullable<int> accountID)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsForPaymentVoucher_Result>("GetAccountsForPaymentVoucher", accountNameParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountsForReceiptVoucher_Result> GetAccountsForReceiptVoucher(string accountName, Nullable<int> accountID)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountsForReceiptVoucher_Result>("GetAccountsForReceiptVoucher", accountNameParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<GetAcHeadRptDetailes_Result> GetAcHeadRptDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcHeadRptDetailes_Result>("GetAcHeadRptDetailes");
        }
    
        public virtual ObjectResult<GetAcidOfSup_Result> GetAcidOfSup(Nullable<int> accountID, Nullable<int> supId)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("SupId", supId) :
                new ObjectParameter("SupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcidOfSup_Result>("GetAcidOfSup", accountIDParameter, supIdParameter);
        }
    
        public virtual ObjectResult<GetAllAccountGroupMaster_Result> GetAllAccountGroupMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAccountGroupMaster_Result>("GetAllAccountGroupMaster");
        }
    
        public virtual ObjectResult<GetAllCategoryTable_Result> GetAllCategoryTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCategoryTable_Result>("GetAllCategoryTable");
        }
    
        public virtual ObjectResult<GetAllCustomers_Root_Day_Wise_Result> GetAllCustomers_Root_Day_Wise(Nullable<int> empID, Nullable<int> companyID, Nullable<int> rootID, string day)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCustomers_Root_Day_Wise_Result>("GetAllCustomers_Root_Day_Wise", empIDParameter, companyIDParameter, rootIDParameter, dayParameter);
        }
    
        public virtual ObjectResult<GetAllDirectSale_App_Result> GetAllDirectSale_App(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDirectSale_App_Result>("GetAllDirectSale_App", companyIDParameter);
        }
    
        public virtual ObjectResult<GetAllEmployee_Result> GetAllEmployee(Nullable<int> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("CustId", custId) :
                new ObjectParameter("CustId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployee_Result>("GetAllEmployee", custIdParameter);
        }
    
        public virtual ObjectResult<GetAllFrom_DirectSalesDetails_Result> GetAllFrom_DirectSalesDetails(Nullable<int> dsdid)
        {
            var dsdidParameter = dsdid.HasValue ?
                new ObjectParameter("Dsdid", dsdid) :
                new ObjectParameter("Dsdid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFrom_DirectSalesDetails_Result>("GetAllFrom_DirectSalesDetails", dsdidParameter);
        }
    
        public virtual ObjectResult<GetAllFrom_SalesOrderDetails_Result> GetAllFrom_SalesOrderDetails(Nullable<int> sodid)
        {
            var sodidParameter = sodid.HasValue ?
                new ObjectParameter("Sodid", sodid) :
                new ObjectParameter("Sodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFrom_SalesOrderDetails_Result>("GetAllFrom_SalesOrderDetails", sodidParameter);
        }
    
        public virtual ObjectResult<GetAllFromSaleOrderTemp_Result> GetAllFromSaleOrderTemp(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFromSaleOrderTemp_Result>("GetAllFromSaleOrderTemp", customerIDParameter);
        }
    
        public virtual ObjectResult<GetAllMac_Result> GetAllMac(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMac_Result>("GetAllMac", locIdParameter);
        }
    
        public virtual ObjectResult<GetAllNewCustomers_App_Result> GetAllNewCustomers_App(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllNewCustomers_App_Result>("GetAllNewCustomers_App", companyIDParameter);
        }
    
        public virtual ObjectResult<GetAllProducts_App_Result> GetAllProducts_App()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_App_Result>("GetAllProducts_App");
        }
    
        public virtual ObjectResult<GetAllProducts_Category_Result> GetAllProducts_Category()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_Category_Result>("GetAllProducts_Category");
        }
    
        public virtual ObjectResult<GetAllSalesTaxReportForRetail_Result> GetAllSalesTaxReportForRetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID, string type, string frm)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var frmParameter = frm != null ?
                new ObjectParameter("frm", frm) :
                new ObjectParameter("frm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSalesTaxReportForRetail_Result>("GetAllSalesTaxReportForRetail", fromDateParameter, toDateParameter, companyIDParameter, typeParameter, frmParameter);
        }
    
        public virtual ObjectResult<GetAllSaleTaxForBillReturn_Result> GetAllSaleTaxForBillReturn(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID, string type)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSaleTaxForBillReturn_Result>("GetAllSaleTaxForBillReturn", fromDateParameter, toDateParameter, companyIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetAllSubCategories_Result> GetAllSubCategories(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubCategories_Result>("GetAllSubCategories", categoryIdParameter);
        }
    
        public virtual ObjectResult<GetAllTable_Result> GetAllTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTable_Result>("GetAllTable");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviOpeningStockUnit(Nullable<int> clopItemid, Nullable<int> compnayId, Nullable<int> unitId)
        {
            var clopItemidParameter = clopItemid.HasValue ?
                new ObjectParameter("clopItemid", clopItemid) :
                new ObjectParameter("clopItemid", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviOpeningStockUnit", clopItemidParameter, compnayIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviOpeningStockUnitBatchId(Nullable<int> clopItemid, Nullable<int> compnayId, Nullable<int> unitId, Nullable<int> batchId)
        {
            var clopItemidParameter = clopItemid.HasValue ?
                new ObjectParameter("clopItemid", clopItemid) :
                new ObjectParameter("clopItemid", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviOpeningStockUnitBatchId", clopItemidParameter, compnayIdParameter, unitIdParameter, batchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviPurBatchItemUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<int> batchId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviPurBatchItemUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, batchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviPurItemUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviPurItemUnit", clpuriduParameter, compnayIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAvipurreturnUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAvipurreturnUnit", clpuriduParameter, compnayIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviSalesBatchUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<int> batchId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviSalesBatchUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, batchIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviSalesReturnUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviSalesReturnUnit", clpuriduParameter, compnayIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAviSaleUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAviSaleUnit", clpuriduParameter, compnayIdParameter, unitIdParameter);
        }
    
        public virtual ObjectResult<GeTaxByParent_Result> GeTaxByParent(Nullable<int> tax)
        {
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeTaxByParent_Result>("GeTaxByParent", taxParameter);
        }
    
        public virtual ObjectResult<GetBankDetailes_Result> GetBankDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankDetailes_Result>("GetBankDetailes");
        }
    
        public virtual ObjectResult<GetBankDetailesForEdit_Result> GetBankDetailesForEdit(string bankName, Nullable<int> bankId)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankDetailesForEdit_Result>("GetBankDetailesForEdit", bankNameParameter, bankIdParameter);
        }
    
        public virtual ObjectResult<GetBatchByBatchId_Result> GetBatchByBatchId(Nullable<int> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchByBatchId_Result>("GetBatchByBatchId", batchIdParameter);
        }
    
        public virtual ObjectResult<GetBatchDetailes_Result> GetBatchDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchDetailes_Result>("GetBatchDetailes");
        }
    
        public virtual int GetBatchDetailesBaseUnit(Nullable<int> itemID, Nullable<int> baseUnit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var baseUnitParameter = baseUnit.HasValue ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBatchDetailesBaseUnit", itemIDParameter, baseUnitParameter);
        }
    
        public virtual int GetBatchDetailesNew(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBatchDetailesNew", itemIDParameter);
        }
    
        public virtual int GetBatchUnitPopupForPurchase(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBatchUnitPopupForPurchase", itemIDParameter);
        }
    
        public virtual ObjectResult<GetBillAmountByBillDate_Result> GetBillAmountByBillDate(string tinNo, Nullable<System.DateTime> billDate, string form, Nullable<int> billMode)
        {
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBillAmountByBillDate_Result>("GetBillAmountByBillDate", tinNoParameter, billDateParameter, formParameter, billModeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetBillAmountByCustomer(string supplierName)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetBillAmountByCustomer", supplierNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBilledStatusOfEstimate(Nullable<int> estimateNo, Nullable<int> companyId)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBilledStatusOfEstimate", estimateNoParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBilledStatusOfEstimateForWholeSale(Nullable<int> estimateNo)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBilledStatusOfEstimateForWholeSale", estimateNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBilledStatusOfEstimateWholesale(Nullable<int> estimateNo, Nullable<int> companyId)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBilledStatusOfEstimateWholesale", estimateNoParameter, companyIdParameter);
        }
    
        public virtual int GetBillingDetailsByBillNo(Nullable<int> billNo, Nullable<int> companyID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillingDetailsByBillNo", billNoParameter, companyIDParameter);
        }
    
        public virtual int GetBillingDetailsByEstimateNo(Nullable<int> billNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillingDetailsByEstimateNo", billNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBillNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBillNo", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBillNo_App(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBillNo_App", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBillNoByUserIdforKOT(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBillNoByUserIdforKOT", userIdParameter);
        }
    
        public virtual int GetBillNoForEstimate(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillNoForEstimate", itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GETBILLPOP_Result> GETBILLPOP(Nullable<int> hSNNO)
        {
            var hSNNOParameter = hSNNO.HasValue ?
                new ObjectParameter("HSNNO", hSNNO) :
                new ObjectParameter("HSNNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETBILLPOP_Result>("GETBILLPOP", hSNNOParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBillRetailNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBillRetailNo", companyIDParameter);
        }
    
        public virtual int GetBillReturnDetailsByBillNo(Nullable<int> billNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillReturnDetailsByBillNo", billNoParameter);
        }
    
        public virtual int GetBillReturnNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillReturnNo");
        }
    
        public virtual ObjectResult<GetCanceledBill_Result> GetCanceledBill(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCanceledBill_Result>("GetCanceledBill", fromParameter, toParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GETCASHBOOKDETAILES(Nullable<System.DateTime> dtDate, Nullable<int> companyId)
        {
            var dtDateParameter = dtDate.HasValue ?
                new ObjectParameter("DtDate", dtDate) :
                new ObjectParameter("DtDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GETCASHBOOKDETAILES", dtDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetCashInHand(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetCashInHand", fromDateParameter, toDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetCashInHandForBalanceSheet(Nullable<System.DateTime> toDate, Nullable<int> companyId)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetCashInHandForBalanceSheet", toDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCashVoucherBillNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCashVoucherBillNo", companyIDParameter);
        }
    
        public virtual ObjectResult<GetCategoryCodeByCategoryId_Result> GetCategoryCodeByCategoryId(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryCodeByCategoryId_Result>("GetCategoryCodeByCategoryId", categoryIDParameter);
        }
    
        public virtual ObjectResult<GetCategoryCodeByCategoryIdForItem_Result> GetCategoryCodeByCategoryIdForItem(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryCodeByCategoryIdForItem_Result>("GetCategoryCodeByCategoryIdForItem", categoryIDParameter);
        }
    
        public virtual int GetCategoryWizeStockItem(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCategoryWizeStockItem", companyIdParameter);
        }
    
        public virtual int GetCatgoryByItemForPopUp(string category, Nullable<int> itemID)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCatgoryByItemForPopUp", categoryParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<GetChkBillNo_Result> GetChkBillNo(Nullable<int> billNo, Nullable<int> billId, Nullable<int> companyId)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChkBillNo_Result>("GetChkBillNo", billNoParameter, billIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetChkWholesale_Result> GetChkWholesale(Nullable<int> billNo, Nullable<int> billId, Nullable<int> companyId)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChkWholesale_Result>("GetChkWholesale", billNoParameter, billIdParameter, companyIdParameter);
        }
    
        public virtual int GetClitems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetClitems");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetClOPeningstockUnit(Nullable<int> clopItemid, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> toDate)
        {
            var clopItemidParameter = clopItemid.HasValue ?
                new ObjectParameter("clopItemid", clopItemid) :
                new ObjectParameter("clopItemid", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetClOPeningstockUnit", clopItemidParameter, compnayIdParameter, unitIdParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetClSalesReturnUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> toDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetClSalesReturnUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetClSaleUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> toDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetClSaleUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetCompanybyid_Result> GetCompanybyid(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanybyid_Result>("GetCompanybyid", companyIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyid_Result> GetCompanyid(Nullable<int> accountID, Nullable<int> companyid)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyid_Result>("GetCompanyid", accountIDParameter, companyidParameter);
        }
    
        public virtual int GetCompanyidforItem(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompanyidforItem", companyidParameter);
        }
    
        public virtual ObjectResult<GetCompanyidforSupplier_Result> GetCompanyidforSupplier(Nullable<int> accountID, Nullable<int> companyid)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyidforSupplier_Result>("GetCompanyidforSupplier", accountIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetCompanyInfo_Result> GetCompanyInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyInfo_Result>("GetCompanyInfo");
        }
    
        public virtual ObjectResult<GetCompanyName_Result> GetCompanyName(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyName_Result>("GetCompanyName", companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanySearch_Result> GetCompanySearch(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanySearch_Result>("GetCompanySearch", companyNameParameter);
        }
    
        public virtual ObjectResult<GetCompanyWiseEmployeeDetails_Result> GetCompanyWiseEmployeeDetails(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyWiseEmployeeDetails_Result>("GetCompanyWiseEmployeeDetails", companyidParameter);
        }
    
        public virtual int GetCompanyWisePurchaseReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompanyWisePurchaseReport", fromParameter, toParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetContainer_Result> GetContainer(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContainer_Result>("GetContainer", fromParameter, toParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetContainerRate_Result> GetContainerRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContainerRate_Result>("GetContainerRate");
        }
    
        public virtual ObjectResult<GetCurrency_Result> GetCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrency_Result>("GetCurrency");
        }
    
        public virtual ObjectResult<GetCustomerByDistictTaluk_Result> GetCustomerByDistictTaluk(Nullable<int> district, Nullable<int> taluk)
        {
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByDistictTaluk_Result>("GetCustomerByDistictTaluk", districtParameter, talukParameter);
        }
    
        public virtual ObjectResult<GetCustomerByDistrictandTaluk_Result> GetCustomerByDistrictandTaluk(Nullable<int> district, Nullable<int> taluk)
        {
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByDistrictandTaluk_Result>("GetCustomerByDistrictandTaluk", districtParameter, talukParameter);
        }
    
        public virtual ObjectResult<GetCustomerByID_Result> GetCustomerByID(Nullable<int> accountID, Nullable<int> companyID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByID_Result>("GetCustomerByID", accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerByRootID_Result> GetCustomerByRootID(Nullable<int> district, Nullable<int> root)
        {
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByRootID_Result>("GetCustomerByRootID", districtParameter, rootParameter);
        }
    
        public virtual ObjectResult<GetCustomerByRootID1_Result> GetCustomerByRootID1(Nullable<int> district, Nullable<int> root, Nullable<int> taluk)
        {
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByRootID1_Result>("GetCustomerByRootID1", districtParameter, rootParameter, talukParameter);
        }
    
        public virtual ObjectResult<GetCustomerByRootIDandDistrict_Result> GetCustomerByRootIDandDistrict(Nullable<int> district, Nullable<int> root)
        {
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var rootParameter = root.HasValue ?
                new ObjectParameter("Root", root) :
                new ObjectParameter("Root", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByRootIDandDistrict_Result>("GetCustomerByRootIDandDistrict", districtParameter, rootParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCustomerCode(Nullable<int> accountParent)
        {
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("accountParent", accountParent) :
                new ObjectParameter("accountParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCustomerCode", accountParentParameter);
        }
    
        public virtual ObjectResult<GetCustomerName_Result> GetCustomerName(Nullable<int> accountID, Nullable<int> rootID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerName_Result>("GetCustomerName", accountIDParameter, rootIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerName1_Result> GetCustomerName1(Nullable<int> accountParent)
        {
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerName1_Result>("GetCustomerName1", accountParentParameter);
        }
    
        public virtual ObjectResult<GetCustomerNameByRootPosition_Result> GetCustomerNameByRootPosition(Nullable<int> accountID, Nullable<int> rootID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerNameByRootPosition_Result>("GetCustomerNameByRootPosition", accountIDParameter, rootIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetCustomerPandingAmount(Nullable<int> billno, Nullable<int> headId, Nullable<int> companyId, string narration, string type)
        {
            var billnoParameter = billno.HasValue ?
                new ObjectParameter("Billno", billno) :
                new ObjectParameter("Billno", typeof(int));
    
            var headIdParameter = headId.HasValue ?
                new ObjectParameter("HeadId", headId) :
                new ObjectParameter("HeadId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetCustomerPandingAmount", billnoParameter, headIdParameter, companyIdParameter, narrationParameter, typeParameter);
        }
    
        public virtual int GetCustomerWiseSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerId, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerWiseSale", fromDateParameter, toDateParameter, customerIdParameter, companyIDParameter);
        }
    
        public virtual int GetCustomerWiseWholeSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerId, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerWiseWholeSale", fromDateParameter, toDateParameter, customerIdParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<string> GetDatabaseName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDatabaseName");
        }
    
        public virtual ObjectResult<GetDayBookDetailes_Result> GetDayBookDetailes(Nullable<System.DateTime> dtDate, Nullable<int> companyId)
        {
            var dtDateParameter = dtDate.HasValue ?
                new ObjectParameter("DtDate", dtDate) :
                new ObjectParameter("DtDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDayBookDetailes_Result>("GetDayBookDetailes", dtDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetDayBookDetailesNew_Result> GetDayBookDetailesNew(Nullable<System.DateTime> dtDate, Nullable<int> companyId)
        {
            var dtDateParameter = dtDate.HasValue ?
                new ObjectParameter("DtDate", dtDate) :
                new ObjectParameter("DtDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDayBookDetailesNew_Result>("GetDayBookDetailesNew", dtDateParameter, companyIdParameter);
        }
    
        public virtual int GetDetailedWholeSaleReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDetailedWholeSaleReport", fromDateParameter, toDateParameter);
        }
    
        public virtual int GetDetailedWholeSaleReportForStat(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDetailedWholeSaleReportForStat", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDetailsForCustomerToSupplierReport_Result> GetDetailsForCustomerToSupplierReport(string accountName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailsForCustomerToSupplierReport_Result>("GetDetailsForCustomerToSupplierReport", accountNameParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetDetailsForSupplierToCustomerReport_Result> GetDetailsForSupplierToCustomerReport(Nullable<int> accountID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailsForSupplierToCustomerReport_Result>("GetDetailsForSupplierToCustomerReport", accountIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetDirectSaleDetailsByID_Result> GetDirectSaleDetailsByID(Nullable<int> dsid)
        {
            var dsidParameter = dsid.HasValue ?
                new ObjectParameter("Dsid", dsid) :
                new ObjectParameter("Dsid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDirectSaleDetailsByID_Result>("GetDirectSaleDetailsByID", dsidParameter);
        }
    
        public virtual ObjectResult<GetDirectsaleDetailsByID_App_Result> GetDirectsaleDetailsByID_App(Nullable<int> dSID)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDirectsaleDetailsByID_App_Result>("GetDirectsaleDetailsByID_App", dSIDParameter);
        }
    
        public virtual ObjectResult<GetDirectsaleDetailsBySuitAppsID_App_Result> GetDirectsaleDetailsBySuitAppsID_App(string suitAppsID)
        {
            var suitAppsIDParameter = suitAppsID != null ?
                new ObjectParameter("SuitAppsID", suitAppsID) :
                new ObjectParameter("SuitAppsID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDirectsaleDetailsBySuitAppsID_App_Result>("GetDirectsaleDetailsBySuitAppsID_App", suitAppsIDParameter);
        }
    
        public virtual ObjectResult<GetDiscount_Result> GetDiscount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiscount_Result>("GetDiscount");
        }
    
        public virtual ObjectResult<GetDiscountByDiscountID_Result> GetDiscountByDiscountID(Nullable<int> discountID)
        {
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiscountByDiscountID_Result>("GetDiscountByDiscountID", discountIDParameter);
        }
    
        public virtual int GetDiscountByItemID(Nullable<int> itemID, Nullable<decimal> discount)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDiscountByItemID", itemIDParameter, discountParameter);
        }
    
        public virtual ObjectResult<GetDiscountForPopUp_Result> GetDiscountForPopUp(string discount)
        {
            var discountParameter = discount != null ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiscountForPopUp_Result>("GetDiscountForPopUp", discountParameter);
        }
    
        public virtual ObjectResult<GetDistributor_Result> GetDistributor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributor_Result>("GetDistributor");
        }
    
        public virtual ObjectResult<GetDistributor_RootWise_Result> GetDistributor_RootWise(Nullable<int> empID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributor_RootWise_Result>("GetDistributor_RootWise", empIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDistributorByaccountid_Result> GetDistributorByaccountid(Nullable<int> distributor)
        {
            var distributorParameter = distributor.HasValue ?
                new ObjectParameter("Distributor", distributor) :
                new ObjectParameter("Distributor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributorByaccountid_Result>("GetDistributorByaccountid", distributorParameter);
        }
    
        public virtual ObjectResult<GetDistributorByDistributorID_Result> GetDistributorByDistributorID(Nullable<int> distributorID)
        {
            var distributorIDParameter = distributorID.HasValue ?
                new ObjectParameter("DistributorID", distributorID) :
                new ObjectParameter("DistributorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributorByDistributorID_Result>("GetDistributorByDistributorID", distributorIDParameter);
        }
    
        public virtual ObjectResult<GetDistributorByIDEmpID_Result> GetDistributorByIDEmpID(Nullable<int> empID, Nullable<int> distributorID, Nullable<int> companyID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var distributorIDParameter = distributorID.HasValue ?
                new ObjectParameter("DistributorID", distributorID) :
                new ObjectParameter("DistributorID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributorByIDEmpID_Result>("GetDistributorByIDEmpID", empIDParameter, distributorIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDistributorwiseSalesReport_Result> GetDistributorwiseSalesReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, string customerSuitAppsid, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerSuitAppsidParameter = customerSuitAppsid != null ?
                new ObjectParameter("CustomerSuitAppsid", customerSuitAppsid) :
                new ObjectParameter("CustomerSuitAppsid", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributorwiseSalesReport_Result>("GetDistributorwiseSalesReport", fromDateParameter, toDateParameter, customerIDParameter, customerSuitAppsidParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDistributrChkbyEmpID_Result> GetDistributrChkbyEmpID(Nullable<int> empId, Nullable<int> companyID)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributrChkbyEmpID_Result>("GetDistributrChkbyEmpID", empIdParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDistrictBind_Result> GetDistrictBind()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistrictBind_Result>("GetDistrictBind");
        }
    
        public virtual ObjectResult<string> GetDuplicateMac(string mACID)
        {
            var mACIDParameter = mACID != null ?
                new ObjectParameter("MACID", mACID) :
                new ObjectParameter("MACID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDuplicateMac", mACIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetDuplicateUserName(string username, Nullable<int> compid)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDuplicateUserName", usernameParameter, compidParameter);
        }
    
        public virtual ObjectResult<GetEditedDiscount_Result> GetEditedDiscount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEditedDiscount_Result>("GetEditedDiscount", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetEmploye_Result> GetEmploye(Nullable<int> userId, string name)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmploye_Result>("GetEmploye", userIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<GetEmployeeid_Result> GetEmployeeid(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeid_Result>("GetEmployeeid", companyIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeeRoute_DayWise_Result> GetEmployeeRoute_DayWise(Nullable<int> empId, Nullable<int> companyId, string day)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeRoute_DayWise_Result>("GetEmployeeRoute_DayWise", empIdParameter, companyIdParameter, dayParameter);
        }
    
        public virtual ObjectResult<GetEmployeeWiseSale_Result> GetEmployeeWiseSale(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeWiseSale_Result>("GetEmployeeWiseSale", companyIDParameter);
        }
    
        public virtual ObjectResult<GetEstimateNo_Result> GetEstimateNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEstimateNo_Result>("GetEstimateNo");
        }
    
        public virtual ObjectResult<Nullable<int>> GetEstimateNoForEstimate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEstimateNoForEstimate");
        }
    
        public virtual ObjectResult<Nullable<int>> GetEstimateNoGenerate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEstimateNoGenerate");
        }
    
        public virtual ObjectResult<Nullable<int>> GetEstimateWhileBiiling(Nullable<int> billID, Nullable<int> companyID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEstimateWhileBiiling", billIDParameter, companyIDParameter);
        }
    
        public virtual int GetExpiryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExpiryReport", fromDateParameter, toDateParameter, itemIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetFinancialYearDetails_Result> GetFinancialYearDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinancialYearDetails_Result>("GetFinancialYearDetails");
        }
    
        public virtual ObjectResult<GetFinancialYearDetailsByID_Result> GetFinancialYearDetailsByID(Nullable<int> fID)
        {
            var fIDParameter = fID.HasValue ?
                new ObjectParameter("FID", fID) :
                new ObjectParameter("FID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinancialYearDetailsByID_Result>("GetFinancialYearDetailsByID", fIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetFinancialYearNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetFinancialYearNo");
        }
    
        public virtual ObjectResult<GetForm_Result> GetForm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm_Result>("GetForm");
        }
    
        public virtual ObjectResult<GetGeneneralSettings_Result> GetGeneneralSettings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneneralSettings_Result>("GetGeneneralSettings");
        }
    
        public virtual ObjectResult<GetGeneralItemsNew_Result> GetGeneralItemsNew(Nullable<System.DateTime> toDate, Nullable<int> groupId, Nullable<int> companyId)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneralItemsNew_Result>("GetGeneralItemsNew", toDateParameter, groupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetGeneralLedger(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, Nullable<int> ledger)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var ledgerParameter = ledger.HasValue ?
                new ObjectParameter("Ledger", ledger) :
                new ObjectParameter("Ledger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetGeneralLedger", fromDateParameter, toDateParameter, companyIdParameter, ledgerParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetGroupByCategoryID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetGroupByCategoryID", categoryIDParameter);
        }
    
        public virtual ObjectResult<GetGroupMasterBalacesheet_Result> GetGroupMasterBalacesheet(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupMasterBalacesheet_Result>("GetGroupMasterBalacesheet", groupIdParameter);
        }
    
        public virtual ObjectResult<GetGroupMasterDetailes_Result> GetGroupMasterDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupMasterDetailes_Result>("GetGroupMasterDetailes");
        }
    
        public virtual ObjectResult<GetGroupMasterPopup_Result> GetGroupMasterPopup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupMasterPopup_Result>("GetGroupMasterPopup");
        }
    
        public virtual ObjectResult<GetGroupMasterTrail_Result> GetGroupMasterTrail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupMasterTrail_Result>("GetGroupMasterTrail");
        }
    
        public virtual int GetItamDetalesForPur(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItamDetalesForPur", itemIdParameter);
        }
    
        public virtual int GetItamDetalesForPurNew(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItamDetalesForPurNew", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItem_Result> GetItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItem_Result>("GetItem");
        }
    
        public virtual int GetItem1(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItem1", companyidParameter);
        }
    
        public virtual ObjectResult<GetItemBatchSearch_Result> GetItemBatchSearch(string batchName)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemBatchSearch_Result>("GetItemBatchSearch", batchNameParameter);
        }
    
        public virtual ObjectResult<GetItemByBatchId_Result> GetItemByBatchId(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemByBatchId_Result>("GetItemByBatchId", itemIdParameter);
        }
    
        public virtual int GetItemByCategory(Nullable<int> itemID, string itemCode)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemByCategory", itemIDParameter, itemCodeParameter);
        }
    
        public virtual int GetItemByCode(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemByCode", itemCodeParameter);
        }
    
        public virtual int GetItemById(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemById", itemIDParameter);
        }
    
        public virtual ObjectResult<GetItemCategory_Result> GetItemCategory(Nullable<int> level, string category)
        {
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategory_Result>("GetItemCategory", levelParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetItemCategoryByCategory_Result> GetItemCategoryByCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategoryByCategory_Result>("GetItemCategoryByCategory", categoryIDParameter);
        }
    
        public virtual int GetItemCategoryByCode(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCategoryByCode", itemCodeParameter);
        }
    
        public virtual ObjectResult<GetItemCategoryforstocksumary_Result> GetItemCategoryforstocksumary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategoryforstocksumary_Result>("GetItemCategoryforstocksumary");
        }
    
        public virtual ObjectResult<GetItemCategoryGroup_Result> GetItemCategoryGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategoryGroup_Result>("GetItemCategoryGroup");
        }
    
        public virtual ObjectResult<GetItemCategorys_Result> GetItemCategorys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategorys_Result>("GetItemCategorys");
        }
    
        public virtual ObjectResult<GetItemChkInPurchase_Result> GetItemChkInPurchase(Nullable<int> itemId, Nullable<int> comapnyId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var comapnyIdParameter = comapnyId.HasValue ?
                new ObjectParameter("ComapnyId", comapnyId) :
                new ObjectParameter("ComapnyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemChkInPurchase_Result>("GetItemChkInPurchase", itemIdParameter, comapnyIdParameter);
        }
    
        public virtual int GetItemCode(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCode", itemCodeParameter);
        }
    
        public virtual int GetItemCodeforpopup(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCodeforpopup", itemCodeParameter);
        }
    
        public virtual int GetItemCodeForPopupPurchase(string itemcode)
        {
            var itemcodeParameter = itemcode != null ?
                new ObjectParameter("itemcode", itemcode) :
                new ObjectParameter("itemcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCodeForPopupPurchase", itemcodeParameter);
        }
    
        public virtual int GetItemColor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemColor");
        }
    
        public virtual int GetItemDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemDetailes");
        }
    
        public virtual int GetItemDetailesForBarcode(string itemName, Nullable<int> companyid)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemDetailesForBarcode", itemNameParameter, companyidParameter);
        }
    
        public virtual int GetItemDetailesOfBatch(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemDetailesOfBatch", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemDetailsById_Result> GetItemDetailsById(string pattern)
        {
            var patternParameter = pattern != null ?
                new ObjectParameter("Pattern", pattern) :
                new ObjectParameter("Pattern", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDetailsById_Result>("GetItemDetailsById", patternParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetItemDetailsByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetItemDetailsByItemID", itemIDParameter);
        }
    
        public virtual int GetItemForPopUp(string itemName, Nullable<int> companyID)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUp", itemNameParameter, companyIDParameter);
        }
    
        public virtual int GetItemForPopUpBilling(string itemName)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUpBilling", itemNameParameter);
        }
    
        public virtual int GetItemForPopUpBilling1(string itemName, Nullable<int> companyid)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUpBilling1", itemNameParameter, companyidParameter);
        }
    
        public virtual int GetItemForPopUpByID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUpByID", itemIDParameter);
        }
    
        public virtual int GetItemForPopUpStockRegister(string itemName, Nullable<int> companyID)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUpStockRegister", itemNameParameter, companyIDParameter);
        }
    
        public virtual int GetItemForPopUpWholeSale(string itemName, Nullable<int> companyID)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("itemName", itemName) :
                new ObjectParameter("itemName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemForPopUpWholeSale", itemNameParameter, companyIDParameter);
        }
    
        public virtual int GetItemforstocksumary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemforstocksumary");
        }
    
        public virtual int GetItemId(string itemID)
        {
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemId", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetItemimagebyitemcode(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetItemimagebyitemcode", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemInOpeningStock_Result> GetItemInOpeningStock(Nullable<int> itemId, Nullable<int> comapnyId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var comapnyIdParameter = comapnyId.HasValue ?
                new ObjectParameter("ComapnyId", comapnyId) :
                new ObjectParameter("ComapnyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemInOpeningStock_Result>("GetItemInOpeningStock", itemIdParameter, comapnyIdParameter);
        }
    
        public virtual ObjectResult<GetItemLocation_Result> GetItemLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemLocation_Result>("GetItemLocation");
        }
    
        public virtual ObjectResult<GetItemLocationID_Result> GetItemLocationID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemLocationID_Result>("GetItemLocationID");
        }
    
        public virtual int GetItemName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemName");
        }
    
        public virtual ObjectResult<string> GetItemNameCheck(Nullable<int> itemId, string category, Nullable<int> subcategory)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("Subcategory", subcategory) :
                new ObjectParameter("Subcategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetItemNameCheck", itemIdParameter, categoryParameter, subcategoryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetItemNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetItemNo");
        }
    
        public virtual int GetItemOfPurchaseRate(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemOfPurchaseRate", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemOfPurchaseRateChk_Result> GetItemOfPurchaseRateChk(Nullable<int> itemId, Nullable<int> companyId, Nullable<int> type, Nullable<System.DateTime> toDate)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemOfPurchaseRateChk_Result>("GetItemOfPurchaseRateChk", itemIdParameter, companyIdParameter, typeParameter, toDateParameter);
        }
    
        public virtual int GetItemRateByUnitId(Nullable<int> itemId, Nullable<int> batchId, Nullable<int> unitId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemRateByUnitId", itemIdParameter, batchIdParameter, unitIdParameter);
        }
    
        public virtual int GetItemReport(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemReport", itemIdParameter);
        }
    
        public virtual int GetItemRetailSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemRetailSale", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetItemState_Result> GetItemState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemState_Result>("GetItemState");
        }
    
        public virtual ObjectResult<GetItemStock_Result> GetItemStock(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStock_Result>("GetItemStock", itemIDParameter);
        }
    
        public virtual int GetItemStockByItemById(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemStockByItemById", itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetItemStockByItemByLocation_Result> GetItemStockByItemByLocation(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStockByItemByLocation_Result>("GetItemStockByItemByLocation", itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<GetItemStockByItemId_Result> GetItemStockByItemId(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStockByItemId_Result>("GetItemStockByItemId", itemIDParameter);
        }
    
        public virtual ObjectResult<GetItemStockForBillingUpdate_Result> GetItemStockForBillingUpdate(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate, Nullable<int> locationID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStockForBillingUpdate_Result>("GetItemStockForBillingUpdate", billIDParameter, itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<GetItemStockForPurchaseUpdate_Result> GetItemStockForPurchaseUpdate(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStockForPurchaseUpdate_Result>("GetItemStockForPurchaseUpdate", itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter);
        }
    
        public virtual ObjectResult<GetItemStockTempByItemId_Result> GetItemStockTempByItemId(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemStockTempByItemId_Result>("GetItemStockTempByItemId", itemIDParameter);
        }
    
        public virtual int GetItemUnit(Nullable<int> categoryId, Nullable<int> subcategory, Nullable<int> itemId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("subcategory", subcategory) :
                new ObjectParameter("subcategory", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemUnit", categoryIdParameter, subcategoryParameter, itemIdParameter);
        }
    
        public virtual int GetItemWisePurchase(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID, Nullable<int> itemId)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemWisePurchase", fromParameter, toParameter, companyIDParameter, itemIdParameter);
        }
    
        public virtual int GetItemwiseRetailSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemId, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemwiseRetailSale", fromDateParameter, toDateParameter, itemIdParameter, companyIDParameter);
        }
    
        public virtual int GetItemWiseWholeSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemId, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemWiseWholeSale", fromDateParameter, toDateParameter, itemIdParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GETKOTITEMS_Result> GETKOTITEMS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETKOTITEMS_Result>("GETKOTITEMS");
        }
    
        public virtual ObjectResult<GetLastPuchaseDetailsByID_Result> GetLastPuchaseDetailsByID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastPuchaseDetailsByID_Result>("GetLastPuchaseDetailsByID", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetLastPuchaseDetailsCountByPurchaseNumber(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetLastPuchaseDetailsCountByPurchaseNumber", purchaseIDParameter);
        }
    
        public virtual ObjectResult<GetLoadByLoadID_Result> GetLoadByLoadID(Nullable<int> loadId)
        {
            var loadIdParameter = loadId.HasValue ?
                new ObjectParameter("LoadId", loadId) :
                new ObjectParameter("LoadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoadByLoadID_Result>("GetLoadByLoadID", loadIdParameter);
        }
    
        public virtual ObjectResult<GetLoadingCharge_Result> GetLoadingCharge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoadingCharge_Result>("GetLoadingCharge");
        }
    
        public virtual ObjectResult<GetLocation_Result> GetLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocation_Result>("GetLocation");
        }
    
        public virtual ObjectResult<GetLocationByLocationID_Result> GetLocationByLocationID(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationByLocationID_Result>("GetLocationByLocationID", locationIDParameter);
        }
    
        public virtual ObjectResult<string> GetLocationName(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLocationName", locationIDParameter);
        }
    
        public virtual ObjectResult<GetMacByID_Result> GetMacByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMacByID_Result>("GetMacByID", idParameter);
        }
    
        public virtual int GetMinItemByItemId(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMinItemByItemId", itemIDParameter);
        }
    
        public virtual ObjectResult<GetMonthlySalesRegister_Result> GetMonthlySalesRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlySalesRegister_Result>("GetMonthlySalesRegister", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetNewCustomerCount(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetNewCustomerCount", companyIDParameter);
        }
    
        public virtual int GetNewOpeningStockId(Nullable<int> openingstockNo, string companyid)
        {
            var openingstockNoParameter = openingstockNo.HasValue ?
                new ObjectParameter("openingstockNo", openingstockNo) :
                new ObjectParameter("openingstockNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewOpeningStockId", openingstockNoParameter, companyidParameter);
        }
    
        public virtual int GetNewOpeningStockIdByItemName(Nullable<int> openingstockNo, string companyid, string itemName)
        {
            var openingstockNoParameter = openingstockNo.HasValue ?
                new ObjectParameter("openingstockNo", openingstockNo) :
                new ObjectParameter("openingstockNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewOpeningStockIdByItemName", openingstockNoParameter, companyidParameter, itemNameParameter);
        }
    
        public virtual ObjectResult<GetNewPurchaseByInvoiceNo_Result> GetNewPurchaseByInvoiceNo(string invoiceNo, Nullable<int> supplierId, Nullable<int> companyid)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewPurchaseByInvoiceNo_Result>("GetNewPurchaseByInvoiceNo", invoiceNoParameter, supplierIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetNewPurchaseByPurchaseNo_Result> GetNewPurchaseByPurchaseNo(Nullable<int> purchaseNo, string companyid)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewPurchaseByPurchaseNo_Result>("GetNewPurchaseByPurchaseNo", purchaseNoParameter, companyidParameter);
        }
    
        public virtual int GetNewRetailBillingDetailesByBillNo(Nullable<int> billNo, Nullable<int> companyID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewRetailBillingDetailesByBillNo", billNoParameter, companyIDParameter);
        }
    
        public virtual int GetNewRetailBillingDetailesByEstimateNo(Nullable<int> billNo, Nullable<int> companyId)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewRetailBillingDetailesByEstimateNo", billNoParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetNewSalesCount_Result> GetNewSalesCount(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewSalesCount_Result>("GetNewSalesCount", companyIDParameter);
        }
    
        public virtual int GetNewWholeSaleBillingDetailesByEstimateNo(Nullable<int> billNo, Nullable<int> companyId)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewWholeSaleBillingDetailesByEstimateNo", billNoParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Getopeningid(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Getopeningid", companyIdParameter);
        }
    
        public virtual ObjectResult<GetOpeningQuantityByItemID_Result> GetOpeningQuantityByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpeningQuantityByItemID_Result>("GetOpeningQuantityByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOpeningstockAmt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOpeningstockAmt");
        }
    
        public virtual int GetOpeningStockDetailesRpt(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOpeningStockDetailesRpt", companyIDParameter);
        }
    
        public virtual int GetopeningstockId(Nullable<int> openingstockNo, string companyid)
        {
            var openingstockNoParameter = openingstockNo.HasValue ?
                new ObjectParameter("openingstockNo", openingstockNo) :
                new ObjectParameter("openingstockNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetopeningstockId", openingstockNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetOpeningVoucher_Result> GetOpeningVoucher(Nullable<System.DateTime> selectDate, Nullable<int> companyID)
        {
            var selectDateParameter = selectDate.HasValue ?
                new ObjectParameter("SelectDate", selectDate) :
                new ObjectParameter("SelectDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpeningVoucher_Result>("GetOpeningVoucher", selectDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetOpeningVoucherBillNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetOpeningVoucherBillNo", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOPEOPeningstockUnit(Nullable<int> clopItemid, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> fDDate)
        {
            var clopItemidParameter = clopItemid.HasValue ?
                new ObjectParameter("clopItemid", clopItemid) :
                new ObjectParameter("clopItemid", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var fDDateParameter = fDDate.HasValue ?
                new ObjectParameter("FDDate", fDDate) :
                new ObjectParameter("FDDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOPEOPeningstockUnit", clopItemidParameter, compnayIdParameter, unitIdParameter, fDDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOPEpurItemUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> fDDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var fDDateParameter = fDDate.HasValue ?
                new ObjectParameter("FDDate", fDDate) :
                new ObjectParameter("FDDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOPEpurItemUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, fDDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOPEpurReturnItemUnit(Nullable<int> clpurRetid, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> fDDate)
        {
            var clpurRetidParameter = clpurRetid.HasValue ?
                new ObjectParameter("clpurRetid", clpurRetid) :
                new ObjectParameter("clpurRetid", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var fDDateParameter = fDDate.HasValue ?
                new ObjectParameter("FDDate", fDDate) :
                new ObjectParameter("FDDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOPEpurReturnItemUnit", clpurRetidParameter, compnayIdParameter, unitIdParameter, fDDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOPESalesReturnUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> fDDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var fDDateParameter = fDDate.HasValue ?
                new ObjectParameter("FDDate", fDDate) :
                new ObjectParameter("FDDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOPESalesReturnUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, fDDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOPESaleUnite(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> fDDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var fDDateParameter = fDDate.HasValue ?
                new ObjectParameter("FDDate", fDDate) :
                new ObjectParameter("FDDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOPESaleUnite", clpuriduParameter, compnayIdParameter, unitIdParameter, fDDateParameter);
        }
    
        public virtual ObjectResult<GetPartyDetailes_Result> GetPartyDetailes(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartyDetailes_Result>("GetPartyDetailes", groupIdParameter);
        }
    
        public virtual ObjectResult<GetPattern_Result> GetPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPattern_Result>("GetPattern");
        }
    
        public virtual ObjectResult<Nullable<int>> GetPatternNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPatternNo");
        }
    
        public virtual ObjectResult<GetPayDetailes_Result> GetPayDetailes(Nullable<int> paymentId, Nullable<int> companyId, string type)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayDetailes_Result>("GetPayDetailes", paymentIdParameter, companyIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetPayDetailesBySLNO_Result> GetPayDetailesBySLNO(Nullable<int> vNO, Nullable<int> companyId, Nullable<int> slno)
        {
            var vNOParameter = vNO.HasValue ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var slnoParameter = slno.HasValue ?
                new ObjectParameter("slno", slno) :
                new ObjectParameter("slno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayDetailesBySLNO_Result>("GetPayDetailesBySLNO", vNOParameter, companyIdParameter, slnoParameter);
        }
    
        public virtual ObjectResult<GetPayDetailesByVoucherNum_Result> GetPayDetailesByVoucherNum(Nullable<int> companyId, Nullable<int> vNO)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vNOParameter = vNO.HasValue ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayDetailesByVoucherNum_Result>("GetPayDetailesByVoucherNum", companyIdParameter, vNOParameter);
        }
    
        public virtual ObjectResult<GetPaymentDetailes_Result> GetPaymentDetailes(Nullable<int> companyId, string name, string type)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentDetailes_Result>("GetPaymentDetailes", companyIdParameter, nameParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetPendingAmount_Result> GetPendingAmount(string customer)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingAmount_Result>("GetPendingAmount", customerParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetPendingAmountById(string accountName)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetPendingAmountById", accountNameParameter);
        }
    
        public virtual ObjectResult<GetPendingAmountForCustomer_Result> GetPendingAmountForCustomer(string customer, Nullable<int> companyID)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingAmountForCustomer_Result>("GetPendingAmountForCustomer", customerParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPendingOrderDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPendingOrderDetails");
        }
    
        public virtual ObjectResult<GetPermissionByForm_Result> GetPermissionByForm(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPermissionByForm_Result>("GetPermissionByForm", formIDParameter);
        }
    
        public virtual ObjectResult<GetPermissionByUser_Result> GetPermissionByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPermissionByUser_Result>("GetPermissionByUser", userIDParameter);
        }
    
        public virtual ObjectResult<GetPermissionByUsers_Result> GetPermissionByUsers(Nullable<int> userID, Nullable<int> formID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPermissionByUsers_Result>("GetPermissionByUsers", userIDParameter, formIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPermissionNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPermissionNo");
        }
    
        public virtual ObjectResult<GetPL_Result> GetPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPL_Result>("GetPL");
        }
    
        public virtual ObjectResult<GetPLById_Result> GetPLById(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPLById_Result>("GetPLById", itemIdParameter);
        }
    
        public virtual ObjectResult<GetPLBySelectedAccount_Result> GetPLBySelectedAccount(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPLBySelectedAccount_Result>("GetPLBySelectedAccount", itemIdParameter);
        }
    
        public virtual ObjectResult<GetPLGrroup_Result> GetPLGrroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPLGrroup_Result>("GetPLGrroup");
        }
    
        public virtual int GetPrintRetailBillingDetailesByBillNo(Nullable<int> billNo, Nullable<int> companyID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPrintRetailBillingDetailesByBillNo", billNoParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetProductDetailsByID_Result> GetProductDetailsByID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductDetailsByID_Result>("GetProductDetailsByID", itemIDParameter);
        }
    
        public virtual ObjectResult<GetProductDetailsByID_App_Result> GetProductDetailsByID_App(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductDetailsByID_App_Result>("GetProductDetailsByID_App", itemIDParameter);
        }
    
        public virtual ObjectResult<GetProductFromID_Result> GetProductFromID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductFromID_Result>("GetProductFromID", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetProductRowCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetProductRowCount");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetProftandLossAccount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, Nullable<int> ledger)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var ledgerParameter = ledger.HasValue ?
                new ObjectParameter("Ledger", ledger) :
                new ObjectParameter("Ledger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetProftandLossAccount", fromDateParameter, toDateParameter, companyIdParameter, ledgerParameter);
        }
    
        public virtual ObjectResult<GetProftAndLossDetails_Result> GetProftAndLossDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> account)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountParameter = account.HasValue ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProftAndLossDetails_Result>("GetProftAndLossDetails", fromDateParameter, toDateParameter, accountParameter);
        }
    
        public virtual int GetPurchaeReturnItemReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaeReturnItemReport", fromParameter, toParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseByPurchaseNo_Result> GetPurchaseByPurchaseNo(Nullable<int> purchaseNo, string companyid)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseByPurchaseNo_Result>("GetPurchaseByPurchaseNo", purchaseNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetPurchaseDetailsForExpiryChecking_Result> GetPurchaseDetailsForExpiryChecking(Nullable<int> itemID, Nullable<int> batchID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseDetailsForExpiryChecking_Result>("GetPurchaseDetailsForExpiryChecking", itemIDParameter, batchIDParameter);
        }
    
        public virtual ObjectResult<Getpurchaseitemdetailes_Result> Getpurchaseitemdetailes(Nullable<int> itemId, Nullable<int> companyId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Getpurchaseitemdetailes_Result>("Getpurchaseitemdetailes", itemIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Getpurchaseitemdetailesnew(Nullable<int> itemId, Nullable<int> unitId, Nullable<int> companyId, Nullable<System.DateTime> toDAte)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var toDAteParameter = toDAte.HasValue ?
                new ObjectParameter("ToDAte", toDAte) :
                new ObjectParameter("ToDAte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Getpurchaseitemdetailesnew", itemIdParameter, unitIdParameter, companyIdParameter, toDAteParameter);
        }
    
        public virtual int GetPurchaseItemReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaseItemReport", fromParameter, toParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPurchaseNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPurchaseNo", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseNoForReport_Result> GetPurchaseNoForReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseNoForReport_Result>("GetPurchaseNoForReport");
        }
    
        public virtual ObjectResult<GetPurchaseOrderByPurchaseNo_Result> GetPurchaseOrderByPurchaseNo(Nullable<int> purchaseNo)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseOrderByPurchaseNo_Result>("GetPurchaseOrderByPurchaseNo", purchaseNoParameter);
        }
    
        public virtual int GetPurchaseOrderDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaseOrderDetails");
        }
    
        public virtual ObjectResult<Nullable<int>> GetPurchaseOrderNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPurchaseOrderNo");
        }
    
        public virtual ObjectResult<GetPurchaseRateByItemID_Result> GetPurchaseRateByItemID(Nullable<int> categoryID, Nullable<int> subCategoryID, Nullable<int> itemID, Nullable<int> unitID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("unitID", unitID) :
                new ObjectParameter("unitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseRateByItemID_Result>("GetPurchaseRateByItemID", categoryIDParameter, subCategoryIDParameter, itemIDParameter, unitIDParameter);
        }
    
        public virtual int GetPurchaseReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaseReport", fromParameter, toParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseReturnByPyrRetNo_Result> GetPurchaseReturnByPyrRetNo(Nullable<int> purchaseReturnNo, string companyid)
        {
            var purchaseReturnNoParameter = purchaseReturnNo.HasValue ?
                new ObjectParameter("PurchaseReturnNo", purchaseReturnNo) :
                new ObjectParameter("PurchaseReturnNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseReturnByPyrRetNo_Result>("GetPurchaseReturnByPyrRetNo", purchaseReturnNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPurchaseReturnNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPurchaseReturnNo", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseReturnPrint_Result> GetPurchaseReturnPrint(Nullable<int> purchaseReturnNo, string companyid)
        {
            var purchaseReturnNoParameter = purchaseReturnNo.HasValue ?
                new ObjectParameter("PurchaseReturnNo", purchaseReturnNo) :
                new ObjectParameter("PurchaseReturnNo", typeof(int));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseReturnPrint_Result>("GetPurchaseReturnPrint", purchaseReturnNoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetPurchaseSupplierInvoiceNo_Result> GetPurchaseSupplierInvoiceNo(string supplierInvoiceNo, Nullable<int> supplierID)
        {
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseSupplierInvoiceNo_Result>("GetPurchaseSupplierInvoiceNo", supplierInvoiceNoParameter, supplierIDParameter);
        }
    
        public virtual int GetPurchaseTaxDetailsReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaseTaxDetailsReport", fromParameter, toParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseTaxHead_Result> GetPurchaseTaxHead()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseTaxHead_Result>("GetPurchaseTaxHead");
        }
    
        public virtual int GetPurchaseTaxReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPurchaseTaxReport", fromParameter, toParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetpuritemUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> toDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetpuritemUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetpurreturnUnit(Nullable<int> clpuridu, Nullable<int> compnayId, Nullable<int> unitId, Nullable<System.DateTime> toDate)
        {
            var clpuriduParameter = clpuridu.HasValue ?
                new ObjectParameter("clpuridu", clpuridu) :
                new ObjectParameter("clpuridu", typeof(int));
    
            var compnayIdParameter = compnayId.HasValue ?
                new ObjectParameter("compnayId", compnayId) :
                new ObjectParameter("compnayId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetpurreturnUnit", clpuriduParameter, compnayIdParameter, unitIdParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetQuantityByItemID_Result> GetQuantityByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuantityByItemID_Result>("GetQuantityByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetQuantityFromBillingDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetQuantityFromBillingDetails", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetQuantityFromBillingReturnDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetQuantityFromBillingReturnDetails", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetQuantityFromPurchaceDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetQuantityFromPurchaceDetails", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetQuantityFromPurchaceReturnDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetQuantityFromPurchaceReturnDetails", itemIDParameter);
        }
    
        public virtual ObjectResult<GetrecDetailesBySLNO_Result> GetrecDetailesBySLNO(Nullable<int> vNO, Nullable<int> companyId, Nullable<int> slno)
        {
            var vNOParameter = vNO.HasValue ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var slnoParameter = slno.HasValue ?
                new ObjectParameter("slno", slno) :
                new ObjectParameter("slno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetrecDetailesBySLNO_Result>("GetrecDetailesBySLNO", vNOParameter, companyIdParameter, slnoParameter);
        }
    
        public virtual ObjectResult<GetReceiptDetailes_Result> GetReceiptDetailes(Nullable<int> companyId, string name, string type)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptDetailes_Result>("GetReceiptDetailes", companyIdParameter, nameParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetReceiptDetailesForEdit_Result> GetReceiptDetailesForEdit(Nullable<int> receptId, Nullable<int> companyId, string type)
        {
            var receptIdParameter = receptId.HasValue ?
                new ObjectParameter("ReceptId", receptId) :
                new ObjectParameter("ReceptId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptDetailesForEdit_Result>("GetReceiptDetailesForEdit", receptIdParameter, companyIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetReceiptDetailesforEditbyVNO_Result> GetReceiptDetailesforEditbyVNO(Nullable<int> companyId, Nullable<int> vNO)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vNOParameter = vNO.HasValue ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptDetailesforEditbyVNO_Result>("GetReceiptDetailesforEditbyVNO", companyIdParameter, vNOParameter);
        }
    
        public virtual int GetReorderQnty(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReorderQnty", itemIDParameter);
        }
    
        public virtual int GetReorderStockitem(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReorderStockitem", companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRetailBilledStatusEstimate(Nullable<int> estimateNo, Nullable<int> estimateId, Nullable<int> companyId)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var estimateIdParameter = estimateId.HasValue ?
                new ObjectParameter("EstimateId", estimateId) :
                new ObjectParameter("EstimateId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRetailBilledStatusEstimate", estimateNoParameter, estimateIdParameter, companyIdParameter);
        }
    
        public virtual int GetRetailBillingDetailsByBillNo(Nullable<int> billNo, Nullable<int> companyID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailBillingDetailsByBillNo", billNoParameter, companyIDParameter);
        }
    
        public virtual int GetRetailBillingDetailsByEstimateNo(Nullable<int> billNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailBillingDetailsByEstimateNo", billNoParameter);
        }
    
        public virtual int GetRetailBillingReturnByReturnNo(Nullable<int> retailReturnBillNo, Nullable<int> companyID)
        {
            var retailReturnBillNoParameter = retailReturnBillNo.HasValue ?
                new ObjectParameter("RetailReturnBillNo", retailReturnBillNo) :
                new ObjectParameter("RetailReturnBillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailBillingReturnByReturnNo", retailReturnBillNoParameter, companyIDParameter);
        }
    
        public virtual int GetRetailBillingReturnByReturnNoPrint(Nullable<int> retailReturnBillNo, Nullable<int> companyID)
        {
            var retailReturnBillNoParameter = retailReturnBillNo.HasValue ?
                new ObjectParameter("RetailReturnBillNo", retailReturnBillNo) :
                new ObjectParameter("RetailReturnBillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailBillingReturnByReturnNoPrint", retailReturnBillNoParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetRetailEstimateNo_Result> GetRetailEstimateNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRetailEstimateNo_Result>("GetRetailEstimateNo");
        }
    
        public virtual ObjectResult<Nullable<int>> GetRetailEstimateNoGenerate(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRetailEstimateNoGenerate", companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRetailReturnBillNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRetailReturnBillNo", companyIDParameter);
        }
    
        public virtual int GetRetilSalesDetailsBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetilSalesDetailsBetweenDates", fromDateParameter, toDateParameter, customerParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetRoleDetailsById_Result> GetRoleDetailsById(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleDetailsById_Result>("GetRoleDetailsById", roleIdParameter);
        }
    
        public virtual ObjectResult<GetRoleName_Result> GetRoleName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleName_Result>("GetRoleName");
        }
    
        public virtual ObjectResult<Nullable<int>> GetRoleNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRoleNo");
        }
    
        public virtual ObjectResult<GetRootMaster_Result> GetRootMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootMaster_Result>("GetRootMaster");
        }
    
        public virtual ObjectResult<GetRootMasterById_Result> GetRootMasterById(Nullable<int> rootId)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootMasterById_Result>("GetRootMasterById", rootIdParameter);
        }
    
        public virtual ObjectResult<GetRootMasterSearch_Result> GetRootMasterSearch(string rootName)
        {
            var rootNameParameter = rootName != null ?
                new ObjectParameter("RootName", rootName) :
                new ObjectParameter("RootName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootMasterSearch_Result>("GetRootMasterSearch", rootNameParameter);
        }
    
        public virtual ObjectResult<GetRootWiseSaleDetails_Result> GetRootWiseSaleDetails(Nullable<int> rootID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootWiseSaleDetails_Result>("GetRootWiseSaleDetails", rootIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetRootWiseSaleDetailsByCustomerID_Result> GetRootWiseSaleDetailsByCustomerID(Nullable<int> rootID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID)
        {
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootWiseSaleDetailsByCustomerID_Result>("GetRootWiseSaleDetailsByCustomerID", rootIDParameter, fromDateParameter, toDateParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRouteDayCount(Nullable<int> empID, Nullable<int> day)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRouteDayCount", empIDParameter, dayParameter);
        }
    
        public virtual ObjectResult<GetSAleDetailsByID_Result> GetSAleDetailsByID(Nullable<int> soid)
        {
            var soidParameter = soid.HasValue ?
                new ObjectParameter("Soid", soid) :
                new ObjectParameter("Soid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAleDetailsByID_Result>("GetSAleDetailsByID", soidParameter);
        }
    
        public virtual int GetSalesDetailsBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesDetailsBetweenDates", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter, companyIDParameter);
        }
    
        public virtual int GetSalesDetailsBetweenDatesDP(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesDetailsBetweenDatesDP", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter, companyIDParameter);
        }
    
        public virtual int GetSalesDetailsBetweenDatesForRetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesDetailsBetweenDatesForRetail", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter, companyIDParameter);
        }
    
        public virtual int GetSalesDetailsBetweenDatesForRetailItemwise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesDetailsBetweenDatesForRetailItemwise", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetSalesOrder_Result> GetSalesOrder(string type, string type1, Nullable<int> employeeID, Nullable<int> customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var type1Parameter = type1 != null ?
                new ObjectParameter("Type1", type1) :
                new ObjectParameter("Type1", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrder_Result>("GetSalesOrder", typeParameter, type1Parameter, employeeIDParameter, customerIDParameter, fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSalesOrderIDByOrderNo(Nullable<int> orderNo)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSalesOrderIDByOrderNo", orderNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSalesOrderNo(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSalesOrderNo", userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderSearch_Result> GetSalesOrderSearch(string orderNo, Nullable<int> companyID)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderSearch_Result>("GetSalesOrderSearch", orderNoParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetSalesRegister(Nullable<int> companyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetSalesRegister", companyIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int GetSalesReportForWholesale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesReportForWholesale", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter, companyIDParameter);
        }
    
        public virtual int GetSalesReturnDetailsBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> isAccountable)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesReturnDetailsBetweenDates", fromDateParameter, toDateParameter, customerParameter, isAccountableParameter);
        }
    
        public virtual int GetSalesReturnReportForRetaile(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesReturnReportForRetaile", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual int GetSalesReturnReportForWholeSale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesReturnReportForWholeSale", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual int GetSalesTaxReportForRetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesTaxReportForRetail", fromDateParameter, toDateParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual int GetSalesTaxReportForWholesale(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesTaxReportForWholesale", fromDateParameter, toDateParameter, customerParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual int GetSalesTaxReportretrunForRetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalesTaxReportretrunForRetail", fromDateParameter, toDateParameter, companyIDParameter);
        }
    
        public virtual int GetSaleTaxReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSaleTaxReport", fromParameter, toParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual int GetSaleTaxRetrunReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSaleTaxRetrunReport", fromParameter, toParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetSearchAccountById_Result> GetSearchAccountById(Nullable<int> accountID, string name)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSearchAccountById_Result>("GetSearchAccountById", accountIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<GetSelectedCustomer_Result> GetSelectedCustomer(string custId)
        {
            var custIdParameter = custId != null ?
                new ObjectParameter("CustId", custId) :
                new ObjectParameter("CustId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectedCustomer_Result>("GetSelectedCustomer", custIdParameter);
        }
    
        public virtual ObjectResult<GetSelectedGroupId_Result> GetSelectedGroupId(Nullable<int> groupId, Nullable<int> companyId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectedGroupId_Result>("GetSelectedGroupId", groupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSingleJournalBillNo(Nullable<int> companyID, string type, string narration)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSingleJournalBillNo", companyIDParameter, typeParameter, narrationParameter);
        }
    
        public virtual ObjectResult<GetSingleJournalDetailes_Result> GetSingleJournalDetailes(Nullable<System.DateTime> selectDate, Nullable<int> companyID, string type, string narration)
        {
            var selectDateParameter = selectDate.HasValue ?
                new ObjectParameter("SelectDate", selectDate) :
                new ObjectParameter("SelectDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSingleJournalDetailes_Result>("GetSingleJournalDetailes", selectDateParameter, companyIDParameter, typeParameter, narrationParameter);
        }
    
        public virtual ObjectResult<GetSpecificCustomer_Result> GetSpecificCustomer(string accountName)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpecificCustomer_Result>("GetSpecificCustomer", accountNameParameter);
        }
    
        public virtual int GetSpecificItem(string itemName)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSpecificItem", itemNameParameter);
        }
    
        public virtual int GetSpecificItemCode(string itemCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSpecificItemCode", itemCodeParameter);
        }
    
        public virtual ObjectResult<GetSpecificSupplier_Result> GetSpecificSupplier(string accountName)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpecificSupplier_Result>("GetSpecificSupplier", accountNameParameter);
        }
    
        public virtual int GetStkItemDetailes(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStkItemDetailes", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetStock(Nullable<int> itemid)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetStock", itemidParameter);
        }
    
        public virtual int GetStockadjestmentDetailes(Nullable<int> refno, Nullable<int> companyId)
        {
            var refnoParameter = refno.HasValue ?
                new ObjectParameter("Refno", refno) :
                new ObjectParameter("Refno", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockadjestmentDetailes", refnoParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetStockadjestmentNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetStockadjestmentNo", companyIDParameter);
        }
    
        public virtual ObjectResult<GetStockByItemID_Result> GetStockByItemID(Nullable<int> itemID, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockByItemID_Result>("GetStockByItemID", itemIDParameter, categoryIDParameter, subcategoryIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetStockForPurchaseUpdateByItemStock_Result> GetStockForPurchaseUpdateByItemStock(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<System.DateTime> expiryDate, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockForPurchaseUpdateByItemStock_Result>("GetStockForPurchaseUpdateByItemStock", itemIDParameter, itemCodeParameter, itemCategoryParameter, expiryDateParameter, locationIDParameter);
        }
    
        public virtual int GetStockItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockItems");
        }
    
        public virtual int GetStockRegister(Nullable<int> itemID, Nullable<System.DateTime> date, Nullable<int> categoryID, Nullable<int> locationID, Nullable<int> unitID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockRegister", itemIDParameter, dateParameter, categoryIDParameter, locationIDParameter, unitIDParameter, companyIDParameter);
        }
    
        public virtual int GetStockRegisterByCategory(Nullable<int> category, Nullable<int> subcategory, Nullable<System.DateTime> date)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("Subcategory", subcategory) :
                new ObjectParameter("Subcategory", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockRegisterByCategory", categoryParameter, subcategoryParameter, dateParameter);
        }
    
        public virtual int GetStockRegisterStat(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockRegisterStat", dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetStockRegisterValue(Nullable<int> itemID, Nullable<int> categoryID, Nullable<int> subCategoryID, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetStockRegisterValue", itemIDParameter, categoryIDParameter, subCategoryIDParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int Getstockregitm(Nullable<int> itemId, Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getstockregitm", itemIdParameter, fromParameter, toParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetSubCategoryByMainCategory1_Result> GetSubCategoryByMainCategory1(Nullable<int> categoryID, Nullable<int> maincategory)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var maincategoryParameter = maincategory.HasValue ?
                new ObjectParameter("maincategory", maincategory) :
                new ObjectParameter("maincategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubCategoryByMainCategory1_Result>("GetSubCategoryByMainCategory1", categoryIDParameter, maincategoryParameter);
        }
    
        public virtual ObjectResult<GetSubCategoryCodeByCategoryID_Result> GetSubCategoryCodeByCategoryID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubCategoryCodeByCategoryID_Result>("GetSubCategoryCodeByCategoryID", categoryIDParameter);
        }
    
        public virtual ObjectResult<GetSubCategoryDetailes_Result> GetSubCategoryDetailes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubCategoryDetailes_Result>("GetSubCategoryDetailes");
        }
    
        public virtual ObjectResult<GetSubCatgoryForPopUp_Result> GetSubCatgoryForPopUp(string category, Nullable<int> categoryID)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubCatgoryForPopUp_Result>("GetSubCatgoryForPopUp", categoryParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<GetSupplierCode_Result> GetSupplierCode(Nullable<int> accountID, string code)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierCode_Result>("GetSupplierCode", accountIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<GetSupplierCodeBySupplier_Result> GetSupplierCodeBySupplier(Nullable<int> accountID, string code)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierCodeBySupplier_Result>("GetSupplierCodeBySupplier", accountIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<GetSupplierNameByCode_Result> GetSupplierNameByCode(Nullable<int> accountID, string code)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierNameByCode_Result>("GetSupplierNameByCode", accountIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSupplierNo(Nullable<int> accountParent)
        {
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("accountParent", accountParent) :
                new ObjectParameter("accountParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSupplierNo", accountParentParameter);
        }
    
        public virtual int GetSupplierWiseReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> companyID, Nullable<int> supplierId)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSupplierWiseReport", fromParameter, toParameter, companyIDParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<GetTalukBind_Result> GetTalukBind()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTalukBind_Result>("GetTalukBind");
        }
    
        public virtual ObjectResult<GetTax_Result> GetTax()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTax_Result>("GetTax");
        }
    
        public virtual ObjectResult<GetTaxByTaxID_Result> GetTaxByTaxID(Nullable<int> taxID)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaxByTaxID_Result>("GetTaxByTaxID", taxIDParameter);
        }
    
        public virtual ObjectResult<GetTaxForPopUp_Result> GetTaxForPopUp(string tax)
        {
            var taxParameter = tax != null ?
                new ObjectParameter("tax", tax) :
                new ObjectParameter("tax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaxForPopUp_Result>("GetTaxForPopUp", taxParameter);
        }
    
        public virtual ObjectResult<GetTinNo_Result> GetTinNo(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTinNo_Result>("GetTinNo", supplierIDParameter);
        }
    
        public virtual ObjectResult<string> GetToken()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetToken");
        }
    
        public virtual ObjectResult<GETTOKENREVOKED_Result> GETTOKENREVOKED()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETTOKENREVOKED_Result>("GETTOKENREVOKED");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTrailBalanceDetailes(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, Nullable<int> ledger)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var ledgerParameter = ledger.HasValue ?
                new ObjectParameter("Ledger", ledger) :
                new ObjectParameter("Ledger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTrailBalanceDetailes", fromDateParameter, toDateParameter, companyIdParameter, ledgerParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTrailBalanceDetailesPeriod(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, Nullable<int> ledger)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var ledgerParameter = ledger.HasValue ?
                new ObjectParameter("Ledger", ledger) :
                new ObjectParameter("Ledger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTrailBalanceDetailesPeriod", fromDateParameter, toDateParameter, companyIdParameter, ledgerParameter);
        }
    
        public virtual ObjectResult<GetTrialBalance_Result> GetTrialBalance(Nullable<System.DateTime> fromDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrialBalance_Result>("GetTrialBalance", fromDateParameter);
        }
    
        public virtual ObjectResult<GetUnit_Result> GetUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnit_Result>("GetUnit");
        }
    
        public virtual int GetUnitByItemID(Nullable<int> itemID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitByItemID", itemIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetUnitByUnitID_Result> GetUnitByUnitID(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnitByUnitID_Result>("GetUnitByUnitID", unitIDParameter);
        }
    
        public virtual int GetUnitCheckingByUnitID(Nullable<int> unitID, Nullable<int> itemID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitCheckingByUnitID", unitIDParameter, itemIDParameter);
        }
    
        public virtual int GetUnitForPopUp(string unitName, Nullable<int> itemID)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitForPopUp", unitNameParameter, itemIDParameter);
        }
    
        public virtual int GetUnitName(Nullable<int> itemID, Nullable<int> unitID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitName", itemIDParameter, unitIDParameter);
        }
    
        public virtual int GetUnitOfItem(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitOfItem", itemIdParameter);
        }
    
        public virtual int GetUnitPopupForPurchase(Nullable<int> itemID, Nullable<int> categoryID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnitPopupForPurchase", itemIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<GetUnloadingChargeReport_Result> GetUnloadingChargeReport(Nullable<int> purchaseNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnloadingChargeReport_Result>("GetUnloadingChargeReport", purchaseNoParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserByID_Result> GetUserByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByID_Result>("GetUserByID", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserForPermission_Result> GetUserForPermission(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserForPermission_Result>("GetUserForPermission", companyIDParameter);
        }
    
        public virtual ObjectResult<GetUserLogin_Result> GetUserLogin(Nullable<int> comID, Nullable<int> empID)
        {
            var comIDParameter = comID.HasValue ?
                new ObjectParameter("ComID", comID) :
                new ObjectParameter("ComID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserLogin_Result>("GetUserLogin", comIDParameter, empIDParameter);
        }
    
        public virtual ObjectResult<GetUserName_Result> GetUserName(Nullable<int> employeeCode)
        {
            var employeeCodeParameter = employeeCode.HasValue ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserName_Result>("GetUserName", employeeCodeParameter);
        }
    
        public virtual ObjectResult<GetUserRoleName_Result> GetUserRoleName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleName_Result>("GetUserRoleName");
        }
    
        public virtual int GetValidateItemForDelete(Nullable<int> itemID, Nullable<int> categoryID, Nullable<int> subcategoryID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetValidateItemForDelete", itemIDParameter, categoryIDParameter, subcategoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetValidateUnitForDelete(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetValidateUnitForDelete", unitIdParameter);
        }
    
        public virtual int GetValueForStockRegister(Nullable<int> categoryID, Nullable<int> subCategoryID, Nullable<int> itemID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetValueForStockRegister", categoryIDParameter, subCategoryIDParameter, itemIDParameter);
        }
    
        public virtual int GetValueForStockRegisterForPurchase(Nullable<int> categoryID, Nullable<int> subCategoryID, Nullable<int> itemID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetValueForStockRegisterForPurchase", categoryIDParameter, subCategoryIDParameter, itemIDParameter);
        }
    
        public virtual int Getvalueforstocksummary(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getvalueforstocksummary", itemIDParameter);
        }
    
        public virtual ObjectResult<GetVanItems_Result> GetVanItems(Nullable<int> vanID)
        {
            var vanIDParameter = vanID.HasValue ?
                new ObjectParameter("VanID", vanID) :
                new ObjectParameter("VanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVanItems_Result>("GetVanItems", vanIDParameter);
        }
    
        public virtual ObjectResult<GetVoucherDetailes_Result> GetVoucherDetailes(Nullable<System.DateTime> selectDate, Nullable<int> companyID)
        {
            var selectDateParameter = selectDate.HasValue ?
                new ObjectParameter("SelectDate", selectDate) :
                new ObjectParameter("SelectDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVoucherDetailes_Result>("GetVoucherDetailes", selectDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVoucherNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVoucherNo");
        }
    
        public virtual ObjectResult<GetVoucherNoForCanceldBill_Result> GetVoucherNoForCanceldBill()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVoucherNoForCanceldBill_Result>("GetVoucherNoForCanceldBill");
        }
    
        public virtual ObjectResult<string> GetVoucherNoForCashBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetVoucherNoForCashBook");
        }
    
        public virtual ObjectResult<Nullable<int>> GetWholeSaleBilledStatusEstimates(Nullable<int> estimateNo, Nullable<int> estimateId, Nullable<int> companyId)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var estimateIdParameter = estimateId.HasValue ?
                new ObjectParameter("EstimateId", estimateId) :
                new ObjectParameter("EstimateId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetWholeSaleBilledStatusEstimates", estimateNoParameter, estimateIdParameter, companyIdParameter);
        }
    
        public virtual int GetWholeSaleBillingDetailesByBillNo(Nullable<int> billNo, Nullable<int> companyID, Nullable<int> formType)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWholeSaleBillingDetailesByBillNo", billNoParameter, companyIDParameter, formTypeParameter);
        }
    
        public virtual int GetWholeSaleBillingDetailsByEstimateNo(Nullable<int> billNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWholeSaleBillingDetailsByEstimateNo", billNoParameter);
        }
    
        public virtual int GetWholeSaleBillingReturnByBillNo(Nullable<int> wholesaleReturnBillNo, Nullable<int> companyID)
        {
            var wholesaleReturnBillNoParameter = wholesaleReturnBillNo.HasValue ?
                new ObjectParameter("WholesaleReturnBillNo", wholesaleReturnBillNo) :
                new ObjectParameter("WholesaleReturnBillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWholeSaleBillingReturnByBillNo", wholesaleReturnBillNoParameter, companyIDParameter);
        }
    
        public virtual int GetWholeSaleBillingReturnByBillNoPrint(Nullable<int> wholesaleReturnBillNo, Nullable<int> companyID)
        {
            var wholesaleReturnBillNoParameter = wholesaleReturnBillNo.HasValue ?
                new ObjectParameter("WholesaleReturnBillNo", wholesaleReturnBillNo) :
                new ObjectParameter("WholesaleReturnBillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWholeSaleBillingReturnByBillNoPrint", wholesaleReturnBillNoParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetWholeSaleEstimateNoGenerate(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetWholeSaleEstimateNoGenerate", companyidParameter);
        }
    
        public virtual int GetWholeSalePriceReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWholeSalePriceReport", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetWholeSaleReturnBillNo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetWholeSaleReturnBillNo", companyIDParameter);
        }
    
        public virtual int GetwholesaletaxBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customer, Nullable<int> accountID, Nullable<int> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetwholesaletaxBetweenDates", fromDateParameter, toDateParameter, customerParameter, accountIDParameter, companyIDParameter);
        }
    
        public virtual int InserSalesOrderDetails(Nullable<int> sOID, Nullable<int> itemID, Nullable<double> qty, Nullable<decimal> netAmount)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(double));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserSalesOrderDetails", sOIDParameter, itemIDParameter, qtyParameter, netAmountParameter);
        }
    
        public virtual int InsertAlocation(Nullable<int> alocId, Nullable<int> userId, Nullable<int> status, Nullable<int> vanID, string b2CSeries, Nullable<int> lastbillno, string b2BSeries, Nullable<int> branchID)
        {
            var alocIdParameter = alocId.HasValue ?
                new ObjectParameter("AlocId", alocId) :
                new ObjectParameter("AlocId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vanIDParameter = vanID.HasValue ?
                new ObjectParameter("VanID", vanID) :
                new ObjectParameter("VanID", typeof(int));
    
            var b2CSeriesParameter = b2CSeries != null ?
                new ObjectParameter("B2CSeries", b2CSeries) :
                new ObjectParameter("B2CSeries", typeof(string));
    
            var lastbillnoParameter = lastbillno.HasValue ?
                new ObjectParameter("Lastbillno", lastbillno) :
                new ObjectParameter("Lastbillno", typeof(int));
    
            var b2BSeriesParameter = b2BSeries != null ?
                new ObjectParameter("B2BSeries", b2BSeries) :
                new ObjectParameter("B2BSeries", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAlocation", alocIdParameter, userIdParameter, statusParameter, vanIDParameter, b2CSeriesParameter, lastbillnoParameter, b2BSeriesParameter, branchIDParameter);
        }
    
        public virtual int InsertBillingDetails(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, string categoryName, Nullable<int> loading, Nullable<int> isPrint)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillingDetails", billIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, categoryNameParameter, loadingParameter, isPrintParameter);
        }
    
        public virtual int InsertBillingDetailsForEstimate(Nullable<int> billID, Nullable<int> estimateID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, Nullable<int> loading, Nullable<int> isPrint, string categoryName)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("EstimateID", estimateID) :
                new ObjectParameter("EstimateID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillingDetailsForEstimate", billIDParameter, estimateIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, loadingParameter, isPrintParameter, categoryNameParameter);
        }
    
        public virtual int InsertBillingNewDetailes(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, string categoryName, Nullable<int> loading, Nullable<int> isPrint, string itemSaleMode, Nullable<int> scategory, string batchName, Nullable<int> batchId, string barcode)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(int));
    
            var itemSaleModeParameter = itemSaleMode != null ?
                new ObjectParameter("ItemSaleMode", itemSaleMode) :
                new ObjectParameter("ItemSaleMode", typeof(string));
    
            var scategoryParameter = scategory.HasValue ?
                new ObjectParameter("Scategory", scategory) :
                new ObjectParameter("Scategory", typeof(int));
    
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillingNewDetailes", billIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, categoryNameParameter, loadingParameter, isPrintParameter, itemSaleModeParameter, scategoryParameter, batchNameParameter, batchIdParameter, barcodeParameter);
        }
    
        public virtual int InsertBillingReturnDetailes(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, string categoryName, Nullable<int> loading, Nullable<int> isPrint)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillingReturnDetailes", billIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, categoryNameParameter, loadingParameter, isPrintParameter);
        }
    
        public virtual int INSERTBILLPAYMENT(Nullable<int> billNo, string billType, Nullable<decimal> amount, Nullable<int> hSLNO)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var hSLNOParameter = hSLNO.HasValue ?
                new ObjectParameter("HSLNO", hSLNO) :
                new ObjectParameter("HSLNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTBILLPAYMENT", billNoParameter, billTypeParameter, amountParameter, hSLNOParameter);
        }
    
        public virtual int InsertBillReturnDetails(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> category, string tinNo, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, Nullable<decimal> taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage.HasValue ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(decimal));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillReturnDetails", billIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, tinNoParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter);
        }
    
        public virtual int Insertdeletesaleordertemp(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertdeletesaleordertemp", customerIDParameter);
        }
    
        public virtual int InsertDirectSales_App(Nullable<int> dSID, Nullable<System.DateTime> date, string orderNo, Nullable<int> customerID, Nullable<int> userID, Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> advanceAmo, Nullable<decimal> totAmo, Nullable<decimal> orderStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, string suitApps_id, string customer_SuitAppsId, Nullable<int> billNo, string bill_Series, Nullable<decimal> discount, string discount_rate, ObjectParameter outId)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var advanceAmoParameter = advanceAmo.HasValue ?
                new ObjectParameter("AdvanceAmo", advanceAmo) :
                new ObjectParameter("AdvanceAmo", typeof(decimal));
    
            var totAmoParameter = totAmo.HasValue ?
                new ObjectParameter("TotAmo", totAmo) :
                new ObjectParameter("TotAmo", typeof(decimal));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var customer_SuitAppsIdParameter = customer_SuitAppsId != null ?
                new ObjectParameter("Customer_SuitAppsId", customer_SuitAppsId) :
                new ObjectParameter("Customer_SuitAppsId", typeof(string));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var bill_SeriesParameter = bill_Series != null ?
                new ObjectParameter("Bill_Series", bill_Series) :
                new ObjectParameter("Bill_Series", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discount_rateParameter = discount_rate != null ?
                new ObjectParameter("Discount_rate", discount_rate) :
                new ObjectParameter("Discount_rate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDirectSales_App", dSIDParameter, dateParameter, orderNoParameter, customerIDParameter, userIDParameter, companyIDParameter, amountParameter, advanceAmoParameter, totAmoParameter, orderStatusParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, suitApps_idParameter, customer_SuitAppsIdParameter, billNoParameter, bill_SeriesParameter, discountParameter, discount_rateParameter, outId);
        }
    
        public virtual int InsertDirectSalesDetails(ObjectParameter outId, Nullable<int> dSID, Nullable<int> itemID, Nullable<int> qty, Nullable<decimal> netAmount, string suitApps_id, string tax_Rate, Nullable<decimal> tax_Amt, Nullable<decimal> rate, Nullable<decimal> grossValue, string cGST_Rate, Nullable<decimal> cGST_Amt, string sGST_Rate, Nullable<decimal> sGST_Amt, Nullable<int> freeQuantity, Nullable<decimal> mRP, string disptg, Nullable<decimal> disamt)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var tax_RateParameter = tax_Rate != null ?
                new ObjectParameter("Tax_Rate", tax_Rate) :
                new ObjectParameter("Tax_Rate", typeof(string));
    
            var tax_AmtParameter = tax_Amt.HasValue ?
                new ObjectParameter("Tax_Amt", tax_Amt) :
                new ObjectParameter("Tax_Amt", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var grossValueParameter = grossValue.HasValue ?
                new ObjectParameter("GrossValue", grossValue) :
                new ObjectParameter("GrossValue", typeof(decimal));
    
            var cGST_RateParameter = cGST_Rate != null ?
                new ObjectParameter("CGST_Rate", cGST_Rate) :
                new ObjectParameter("CGST_Rate", typeof(string));
    
            var cGST_AmtParameter = cGST_Amt.HasValue ?
                new ObjectParameter("CGST_Amt", cGST_Amt) :
                new ObjectParameter("CGST_Amt", typeof(decimal));
    
            var sGST_RateParameter = sGST_Rate != null ?
                new ObjectParameter("SGST_Rate", sGST_Rate) :
                new ObjectParameter("SGST_Rate", typeof(string));
    
            var sGST_AmtParameter = sGST_Amt.HasValue ?
                new ObjectParameter("SGST_Amt", sGST_Amt) :
                new ObjectParameter("SGST_Amt", typeof(decimal));
    
            var freeQuantityParameter = freeQuantity.HasValue ?
                new ObjectParameter("FreeQuantity", freeQuantity) :
                new ObjectParameter("FreeQuantity", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var disptgParameter = disptg != null ?
                new ObjectParameter("disptg", disptg) :
                new ObjectParameter("disptg", typeof(string));
    
            var disamtParameter = disamt.HasValue ?
                new ObjectParameter("disamt", disamt) :
                new ObjectParameter("disamt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDirectSalesDetails", outId, dSIDParameter, itemIDParameter, qtyParameter, netAmountParameter, suitApps_idParameter, tax_RateParameter, tax_AmtParameter, rateParameter, grossValueParameter, cGST_RateParameter, cGST_AmtParameter, sGST_RateParameter, sGST_AmtParameter, freeQuantityParameter, mRPParameter, disptgParameter, disamtParameter);
        }
    
        public virtual int InsertEdittedPriceBillingDetails(Nullable<int> billID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, string categoryName, Nullable<int> loading)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEdittedPriceBillingDetails", billIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, categoryNameParameter, loadingParameter);
        }
    
        public virtual int InsertItemPatternDetails(ObjectParameter unitID, string unitName, Nullable<int> itemID, string itemName, Nullable<decimal> seles_Price, Nullable<decimal> mRP, Nullable<int> createdBy, Nullable<decimal> discount, string tax, Nullable<int> taxId, Nullable<decimal> containerRate, Nullable<decimal> loadingCharge, Nullable<int> quantity, Nullable<decimal> wholeSalePrice, string baseUnit, Nullable<int> level, string pattern, Nullable<int> countpattern)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var seles_PriceParameter = seles_Price.HasValue ?
                new ObjectParameter("Seles_Price", seles_Price) :
                new ObjectParameter("Seles_Price", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var taxIdParameter = taxId.HasValue ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(int));
    
            var containerRateParameter = containerRate.HasValue ?
                new ObjectParameter("ContainerRate", containerRate) :
                new ObjectParameter("ContainerRate", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var wholeSalePriceParameter = wholeSalePrice.HasValue ?
                new ObjectParameter("WholeSalePrice", wholeSalePrice) :
                new ObjectParameter("WholeSalePrice", typeof(decimal));
    
            var baseUnitParameter = baseUnit != null ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var patternParameter = pattern != null ?
                new ObjectParameter("Pattern", pattern) :
                new ObjectParameter("Pattern", typeof(string));
    
            var countpatternParameter = countpattern.HasValue ?
                new ObjectParameter("Countpattern", countpattern) :
                new ObjectParameter("Countpattern", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItemPatternDetails", unitID, unitNameParameter, itemIDParameter, itemNameParameter, seles_PriceParameter, mRPParameter, createdByParameter, discountParameter, taxParameter, taxIdParameter, containerRateParameter, loadingChargeParameter, quantityParameter, wholeSalePriceParameter, baseUnitParameter, levelParameter, patternParameter, countpatternParameter);
        }
    
        public virtual int InsertItemStockTemp(Nullable<int> itemID, string itemCode, Nullable<int> categoryID, Nullable<System.DateTime> expiryDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItemStockTemp", itemIDParameter, itemCodeParameter, categoryIDParameter, expiryDateParameter);
        }
    
        public virtual int InsertKOT(Nullable<int> invoiceNo, Nullable<decimal> netAmt, Nullable<System.DateTime> date, string suitApp_Id, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, ObjectParameter outId, ObjectParameter outDSID, ObjectParameter outSuitApps_id, string invoiceType)
        {
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var suitApp_IdParameter = suitApp_Id != null ?
                new ObjectParameter("SuitApp_Id", suitApp_Id) :
                new ObjectParameter("SuitApp_Id", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertKOT", invoiceNoParameter, netAmtParameter, dateParameter, suitApp_IdParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, outId, outDSID, outSuitApps_id, invoiceTypeParameter);
        }
    
        public virtual int InsertLoginStatus(Nullable<int> userid, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time, Nullable<int> isDeleted, Nullable<int> companyid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLoginStatus", useridParameter, dateParameter, timeParameter, isDeletedParameter, companyidParameter);
        }
    
        public virtual int InsertNewBillingDetailesForEstimate(Nullable<int> billID, Nullable<int> estimateID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, Nullable<int> loading, Nullable<int> isPrint, string categoryName, string itemSaleMode, Nullable<int> scategory, string batchName, Nullable<int> batchId, string barcode)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("EstimateID", estimateID) :
                new ObjectParameter("EstimateID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var isPrintParameter = isPrint.HasValue ?
                new ObjectParameter("IsPrint", isPrint) :
                new ObjectParameter("IsPrint", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var itemSaleModeParameter = itemSaleMode != null ?
                new ObjectParameter("ItemSaleMode", itemSaleMode) :
                new ObjectParameter("ItemSaleMode", typeof(string));
    
            var scategoryParameter = scategory.HasValue ?
                new ObjectParameter("Scategory", scategory) :
                new ObjectParameter("Scategory", typeof(int));
    
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNewBillingDetailesForEstimate", billIDParameter, estimateIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, loadingParameter, isPrintParameter, categoryNameParameter, itemSaleModeParameter, scategoryParameter, batchNameParameter, batchIdParameter, barcodeParameter);
        }
    
        public virtual int InsertPurchaseDetails(Nullable<int> purchaseID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<decimal> quantity, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, string taxPercentage, Nullable<decimal> taxAmount, Nullable<decimal> amount, Nullable<int> locationID, string unitName, Nullable<decimal> unloadingCharge, Nullable<decimal> frieightRate, Nullable<int> scategory, string itemMode, Nullable<int> batchNo, string batchName, Nullable<decimal> cstTaxPercentage, string barcode)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("itemCode", itemCode) :
                new ObjectParameter("itemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var unloadingChargeParameter = unloadingCharge.HasValue ?
                new ObjectParameter("UnloadingCharge", unloadingCharge) :
                new ObjectParameter("UnloadingCharge", typeof(decimal));
    
            var frieightRateParameter = frieightRate.HasValue ?
                new ObjectParameter("FrieightRate", frieightRate) :
                new ObjectParameter("FrieightRate", typeof(decimal));
    
            var scategoryParameter = scategory.HasValue ?
                new ObjectParameter("Scategory", scategory) :
                new ObjectParameter("Scategory", typeof(int));
    
            var itemModeParameter = itemMode != null ?
                new ObjectParameter("ItemMode", itemMode) :
                new ObjectParameter("ItemMode", typeof(string));
    
            var batchNoParameter = batchNo.HasValue ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(int));
    
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var cstTaxPercentageParameter = cstTaxPercentage.HasValue ?
                new ObjectParameter("CstTaxPercentage", cstTaxPercentage) :
                new ObjectParameter("CstTaxPercentage", typeof(decimal));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseDetails", purchaseIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, quantityParameter, unitIDParameter, expiryDateParameter, unitPriceParameter, taxPercentageParameter, taxAmountParameter, amountParameter, locationIDParameter, unitNameParameter, unloadingChargeParameter, frieightRateParameter, scategoryParameter, itemModeParameter, batchNoParameter, batchNameParameter, cstTaxPercentageParameter, barcodeParameter);
        }
    
        public virtual int InsertPurchaseOrderDetails(Nullable<int> purchaseID, Nullable<int> itemID, string itemCode, string itemName, Nullable<decimal> quantity, Nullable<int> unitID, Nullable<decimal> unitPrice, Nullable<decimal> amount, Nullable<int> itemCategoryID, Nullable<int> subcategoryID, string taxPercentage)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("itemCode", itemCode) :
                new ObjectParameter("itemCode", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseOrderDetails", purchaseIDParameter, itemIDParameter, itemCodeParameter, itemNameParameter, quantityParameter, unitIDParameter, unitPriceParameter, amountParameter, itemCategoryIDParameter, subcategoryIDParameter, taxPercentageParameter);
        }
    
        public virtual int InsertPurchaseReturnDetailes(Nullable<int> purchaseID, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<decimal> quantity, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, string taxPercentage, Nullable<decimal> taxAmount, Nullable<decimal> amount, Nullable<int> locationID, string unitName, Nullable<decimal> unloadingCharge, Nullable<decimal> frieightRate)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("itemCode", itemCode) :
                new ObjectParameter("itemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var unloadingChargeParameter = unloadingCharge.HasValue ?
                new ObjectParameter("UnloadingCharge", unloadingCharge) :
                new ObjectParameter("UnloadingCharge", typeof(decimal));
    
            var frieightRateParameter = frieightRate.HasValue ?
                new ObjectParameter("FrieightRate", frieightRate) :
                new ObjectParameter("FrieightRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseReturnDetailes", purchaseIDParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, quantityParameter, unitIDParameter, expiryDateParameter, unitPriceParameter, taxPercentageParameter, taxAmountParameter, amountParameter, locationIDParameter, unitNameParameter, unloadingChargeParameter, frieightRateParameter);
        }
    
        public virtual int InsertRootMaster(Nullable<int> rootId, string rootName, string placeName, string fromPlace, string toPlace, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> state, Nullable<int> district, Nullable<int> taluk)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var rootNameParameter = rootName != null ?
                new ObjectParameter("RootName", rootName) :
                new ObjectParameter("RootName", typeof(string));
    
            var placeNameParameter = placeName != null ?
                new ObjectParameter("PlaceName", placeName) :
                new ObjectParameter("PlaceName", typeof(string));
    
            var fromPlaceParameter = fromPlace != null ?
                new ObjectParameter("FromPlace", fromPlace) :
                new ObjectParameter("FromPlace", typeof(string));
    
            var toPlaceParameter = toPlace != null ?
                new ObjectParameter("ToPlace", toPlace) :
                new ObjectParameter("ToPlace", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRootMaster", rootIdParameter, rootNameParameter, placeNameParameter, fromPlaceParameter, toPlaceParameter, createdByParameter, createdDateParameter, stateParameter, districtParameter, talukParameter);
        }
    
        public virtual int InsertSaleOrder_App(Nullable<int> sOID, Nullable<System.DateTime> date, string orderNo, Nullable<int> customerID, Nullable<int> userID, Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> advanceAmo, Nullable<decimal> totAmo, Nullable<decimal> orderStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, string suitApps_id, ObjectParameter outId)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var advanceAmoParameter = advanceAmo.HasValue ?
                new ObjectParameter("AdvanceAmo", advanceAmo) :
                new ObjectParameter("AdvanceAmo", typeof(decimal));
    
            var totAmoParameter = totAmo.HasValue ?
                new ObjectParameter("TotAmo", totAmo) :
                new ObjectParameter("TotAmo", typeof(decimal));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSaleOrder_App", sOIDParameter, dateParameter, orderNoParameter, customerIDParameter, userIDParameter, companyIDParameter, amountParameter, advanceAmoParameter, totAmoParameter, orderStatusParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, suitApps_idParameter, outId);
        }
    
        public virtual int Insertsaleordertemp(ObjectParameter outId, Nullable<int> sOID, Nullable<int> customerID, Nullable<int> itemID, Nullable<int> qty, Nullable<decimal> netAmount)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertsaleordertemp", outId, sOIDParameter, customerIDParameter, itemIDParameter, qtyParameter, netAmountParameter);
        }
    
        public virtual int InsertSalesOrderDetails(ObjectParameter outId, Nullable<int> sOID, Nullable<int> itemID, Nullable<int> qty, Nullable<decimal> netAmount, string suitApps_id)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesOrderDetails", outId, sOIDParameter, itemIDParameter, qtyParameter, netAmountParameter, suitApps_idParameter);
        }
    
        public virtual int InsertTempBillingDetails(Nullable<int> billID, Nullable<int> billNo, Nullable<int> itemID, string itemCode, Nullable<int> category, string itemName, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<System.DateTime> expiryDate, Nullable<decimal> unitPrice, Nullable<decimal> discount, Nullable<decimal> mRP, string taxPercentage, Nullable<decimal> netRate, Nullable<decimal> taxAmount, Nullable<int> salesMode, Nullable<decimal> amount, Nullable<int> loadingCharge, Nullable<int> locationID, Nullable<int> isBillingAccountable, string categoryName, Nullable<int> loading, Nullable<decimal> actualBillAmount, Nullable<int> retailBillNo)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var taxPercentageParameter = taxPercentage != null ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(string));
    
            var netRateParameter = netRate.HasValue ?
                new ObjectParameter("NetRate", netRate) :
                new ObjectParameter("NetRate", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var salesModeParameter = salesMode.HasValue ?
                new ObjectParameter("SalesMode", salesMode) :
                new ObjectParameter("SalesMode", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isBillingAccountableParameter = isBillingAccountable.HasValue ?
                new ObjectParameter("IsBillingAccountable", isBillingAccountable) :
                new ObjectParameter("IsBillingAccountable", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var loadingParameter = loading.HasValue ?
                new ObjectParameter("Loading", loading) :
                new ObjectParameter("Loading", typeof(int));
    
            var actualBillAmountParameter = actualBillAmount.HasValue ?
                new ObjectParameter("ActualBillAmount", actualBillAmount) :
                new ObjectParameter("ActualBillAmount", typeof(decimal));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTempBillingDetails", billIDParameter, billNoParameter, itemIDParameter, itemCodeParameter, categoryParameter, itemNameParameter, unitIDParameter, quantityParameter, expiryDateParameter, unitPriceParameter, discountParameter, mRPParameter, taxPercentageParameter, netRateParameter, taxAmountParameter, salesModeParameter, amountParameter, loadingChargeParameter, locationIDParameter, isBillingAccountableParameter, categoryNameParameter, loadingParameter, actualBillAmountParameter, retailBillNoParameter);
        }
    
        public virtual int InsertUnitDetails(ObjectParameter unitID, string unitName, Nullable<int> itemID, string itemName, Nullable<decimal> seles_Price, Nullable<decimal> mRP, Nullable<int> createdBy, Nullable<decimal> discount, string tax, Nullable<int> taxId, Nullable<decimal> containerRate, Nullable<decimal> loadingCharge, Nullable<int> quantity, Nullable<decimal> wholeSalePrice, string baseUnit, Nullable<int> level, string diaplayName, Nullable<decimal> bPPrice)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var seles_PriceParameter = seles_Price.HasValue ?
                new ObjectParameter("Seles_Price", seles_Price) :
                new ObjectParameter("Seles_Price", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var taxIdParameter = taxId.HasValue ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(int));
    
            var containerRateParameter = containerRate.HasValue ?
                new ObjectParameter("ContainerRate", containerRate) :
                new ObjectParameter("ContainerRate", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var wholeSalePriceParameter = wholeSalePrice.HasValue ?
                new ObjectParameter("WholeSalePrice", wholeSalePrice) :
                new ObjectParameter("WholeSalePrice", typeof(decimal));
    
            var baseUnitParameter = baseUnit != null ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var diaplayNameParameter = diaplayName != null ?
                new ObjectParameter("DiaplayName", diaplayName) :
                new ObjectParameter("DiaplayName", typeof(string));
    
            var bPPriceParameter = bPPrice.HasValue ?
                new ObjectParameter("BPPrice", bPPrice) :
                new ObjectParameter("BPPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUnitDetails", unitID, unitNameParameter, itemIDParameter, itemNameParameter, seles_PriceParameter, mRPParameter, createdByParameter, discountParameter, taxParameter, taxIdParameter, containerRateParameter, loadingChargeParameter, quantityParameter, wholeSalePriceParameter, baseUnitParameter, levelParameter, diaplayNameParameter, bPPriceParameter);
        }
    
        public virtual int InsertUnitDetailsBatch(ObjectParameter unitID, string unitName, Nullable<int> itemID, string itemName, Nullable<decimal> seles_Price, Nullable<decimal> mRP, Nullable<int> createdBy, Nullable<decimal> discount, string tax, Nullable<int> taxId, Nullable<decimal> containerRate, Nullable<decimal> loadingCharge, Nullable<int> quantity, Nullable<decimal> wholeSalePrice, string baseUnit, Nullable<int> level, string diaplayName, Nullable<decimal> bPPrice, Nullable<int> batchId, string batchName)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var seles_PriceParameter = seles_Price.HasValue ?
                new ObjectParameter("Seles_Price", seles_Price) :
                new ObjectParameter("Seles_Price", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var taxIdParameter = taxId.HasValue ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(int));
    
            var containerRateParameter = containerRate.HasValue ?
                new ObjectParameter("ContainerRate", containerRate) :
                new ObjectParameter("ContainerRate", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var wholeSalePriceParameter = wholeSalePrice.HasValue ?
                new ObjectParameter("WholeSalePrice", wholeSalePrice) :
                new ObjectParameter("WholeSalePrice", typeof(decimal));
    
            var baseUnitParameter = baseUnit != null ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var diaplayNameParameter = diaplayName != null ?
                new ObjectParameter("DiaplayName", diaplayName) :
                new ObjectParameter("DiaplayName", typeof(string));
    
            var bPPriceParameter = bPPrice.HasValue ?
                new ObjectParameter("BPPrice", bPPrice) :
                new ObjectParameter("BPPrice", typeof(decimal));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUnitDetailsBatch", unitID, unitNameParameter, itemIDParameter, itemNameParameter, seles_PriceParameter, mRPParameter, createdByParameter, discountParameter, taxParameter, taxIdParameter, containerRateParameter, loadingChargeParameter, quantityParameter, wholeSalePriceParameter, baseUnitParameter, levelParameter, diaplayNameParameter, bPPriceParameter, batchIdParameter, batchNameParameter);
        }
    
        public virtual int InsertUpdateAccount(ObjectParameter accountID, string accountCode, Nullable<int> accountParent, Nullable<int> accountType, Nullable<int> accountGroup, string accountName, Nullable<decimal> amount, string reflectsIn, Nullable<int> order, Nullable<int> createdBy, string address, string city, string country, string mob, string phone, string email, string tinNo, string cstNo)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var accountGroupParameter = accountGroup.HasValue ?
                new ObjectParameter("AccountGroup", accountGroup) :
                new ObjectParameter("AccountGroup", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reflectsInParameter = reflectsIn != null ?
                new ObjectParameter("ReflectsIn", reflectsIn) :
                new ObjectParameter("ReflectsIn", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("mob", mob) :
                new ObjectParameter("mob", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var cstNoParameter = cstNo != null ?
                new ObjectParameter("cstNo", cstNo) :
                new ObjectParameter("cstNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccount", accountID, accountCodeParameter, accountParentParameter, accountTypeParameter, accountGroupParameter, accountNameParameter, amountParameter, reflectsInParameter, orderParameter, createdByParameter, addressParameter, cityParameter, countryParameter, mobParameter, phoneParameter, emailParameter, tinNoParameter, cstNoParameter);
        }
    
        public virtual int InsertUpdateAccountDataEntriesForVoucher(ObjectParameter accountID, string voucherNo, Nullable<int> fYearID, Nullable<decimal> debitAmount, Nullable<decimal> creditAmount, Nullable<decimal> balanceAmount, Nullable<int> debitAccount, Nullable<int> creditAccount, string debitAccountName, string creditAccountName, string narration, Nullable<System.DateTime> entryDate, string voucherType, string compoundNarration, Nullable<int> createdBy)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var debitAccountParameter = debitAccount.HasValue ?
                new ObjectParameter("DebitAccount", debitAccount) :
                new ObjectParameter("DebitAccount", typeof(int));
    
            var creditAccountParameter = creditAccount.HasValue ?
                new ObjectParameter("CreditAccount", creditAccount) :
                new ObjectParameter("CreditAccount", typeof(int));
    
            var debitAccountNameParameter = debitAccountName != null ?
                new ObjectParameter("DebitAccountName", debitAccountName) :
                new ObjectParameter("DebitAccountName", typeof(string));
    
            var creditAccountNameParameter = creditAccountName != null ?
                new ObjectParameter("CreditAccountName", creditAccountName) :
                new ObjectParameter("CreditAccountName", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var compoundNarrationParameter = compoundNarration != null ?
                new ObjectParameter("CompoundNarration", compoundNarration) :
                new ObjectParameter("CompoundNarration", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccountDataEntriesForVoucher", accountID, voucherNoParameter, fYearIDParameter, debitAmountParameter, creditAmountParameter, balanceAmountParameter, debitAccountParameter, creditAccountParameter, debitAccountNameParameter, creditAccountNameParameter, narrationParameter, entryDateParameter, voucherTypeParameter, compoundNarrationParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateAccountDataEntriesWhileBilling(ObjectParameter voucherNo, Nullable<int> fYearID, Nullable<decimal> amount, string debitAccountName, Nullable<int> debitAccount, string creditAccountName, Nullable<int> creditAccount, Nullable<System.DateTime> entryDate, Nullable<int> isAccountable, Nullable<int> paymentMode, Nullable<int> billID, Nullable<int> billAmount)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var debitAccountNameParameter = debitAccountName != null ?
                new ObjectParameter("DebitAccountName", debitAccountName) :
                new ObjectParameter("DebitAccountName", typeof(string));
    
            var debitAccountParameter = debitAccount.HasValue ?
                new ObjectParameter("DebitAccount", debitAccount) :
                new ObjectParameter("DebitAccount", typeof(int));
    
            var creditAccountNameParameter = creditAccountName != null ?
                new ObjectParameter("CreditAccountName", creditAccountName) :
                new ObjectParameter("CreditAccountName", typeof(string));
    
            var creditAccountParameter = creditAccount.HasValue ?
                new ObjectParameter("CreditAccount", creditAccount) :
                new ObjectParameter("CreditAccount", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccountDataEntriesWhileBilling", voucherNo, fYearIDParameter, amountParameter, debitAccountNameParameter, debitAccountParameter, creditAccountNameParameter, creditAccountParameter, entryDateParameter, isAccountableParameter, paymentModeParameter, billIDParameter, billAmountParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateAccountDataEntriesWhilePurchase(Nullable<int> fYearID, Nullable<decimal> amount, Nullable<int> debitAccount, Nullable<int> creditAccount, Nullable<int> cancel, Nullable<System.DateTime> entryDate, Nullable<int> voucherNo, string voucherType, Nullable<int> isAccountable, string accountName, Nullable<int> paymentMode, Nullable<int> supplierID, Nullable<decimal> debitAmount, Nullable<decimal> creditAmount, string debitAccoutName, Nullable<decimal> taxAmount)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var debitAccountParameter = debitAccount.HasValue ?
                new ObjectParameter("DebitAccount", debitAccount) :
                new ObjectParameter("DebitAccount", typeof(int));
    
            var creditAccountParameter = creditAccount.HasValue ?
                new ObjectParameter("CreditAccount", creditAccount) :
                new ObjectParameter("CreditAccount", typeof(int));
    
            var cancelParameter = cancel.HasValue ?
                new ObjectParameter("Cancel", cancel) :
                new ObjectParameter("Cancel", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var debitAccoutNameParameter = debitAccoutName != null ?
                new ObjectParameter("DebitAccoutName", debitAccoutName) :
                new ObjectParameter("DebitAccoutName", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateAccountDataEntriesWhilePurchase", fYearIDParameter, amountParameter, debitAccountParameter, creditAccountParameter, cancelParameter, entryDateParameter, voucherNoParameter, voucherTypeParameter, isAccountableParameter, accountNameParameter, paymentModeParameter, supplierIDParameter, debitAmountParameter, creditAmountParameter, debitAccoutNameParameter, taxAmountParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateAccountDataEntriesWhilePurchaseReturn(Nullable<int> fYearID, string purchaseAccountName, Nullable<decimal> purchasemount, Nullable<int> taxAccountID, string taxAccountName, Nullable<decimal> taxAmount, string roundedOff, Nullable<int> roundedOffID, Nullable<decimal> roundedOffAmount, Nullable<int> unloadingAccountID, string unloadingAccountName, Nullable<decimal> unloadingAmount, string freight, Nullable<int> freightID, Nullable<decimal> freightAmount, Nullable<int> cancel, Nullable<System.DateTime> entryDate, Nullable<int> voucherNo, string voucherType, Nullable<int> isAccountable, Nullable<int> paymentMode, Nullable<int> supplierID, Nullable<int> purchaseReturnNo)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var purchaseAccountNameParameter = purchaseAccountName != null ?
                new ObjectParameter("PurchaseAccountName", purchaseAccountName) :
                new ObjectParameter("PurchaseAccountName", typeof(string));
    
            var purchasemountParameter = purchasemount.HasValue ?
                new ObjectParameter("Purchasemount", purchasemount) :
                new ObjectParameter("Purchasemount", typeof(decimal));
    
            var taxAccountIDParameter = taxAccountID.HasValue ?
                new ObjectParameter("TaxAccountID", taxAccountID) :
                new ObjectParameter("TaxAccountID", typeof(int));
    
            var taxAccountNameParameter = taxAccountName != null ?
                new ObjectParameter("TaxAccountName", taxAccountName) :
                new ObjectParameter("TaxAccountName", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var roundedOffParameter = roundedOff != null ?
                new ObjectParameter("RoundedOff", roundedOff) :
                new ObjectParameter("RoundedOff", typeof(string));
    
            var roundedOffIDParameter = roundedOffID.HasValue ?
                new ObjectParameter("RoundedOffID", roundedOffID) :
                new ObjectParameter("RoundedOffID", typeof(int));
    
            var roundedOffAmountParameter = roundedOffAmount.HasValue ?
                new ObjectParameter("RoundedOffAmount", roundedOffAmount) :
                new ObjectParameter("RoundedOffAmount", typeof(decimal));
    
            var unloadingAccountIDParameter = unloadingAccountID.HasValue ?
                new ObjectParameter("UnloadingAccountID", unloadingAccountID) :
                new ObjectParameter("UnloadingAccountID", typeof(int));
    
            var unloadingAccountNameParameter = unloadingAccountName != null ?
                new ObjectParameter("UnloadingAccountName", unloadingAccountName) :
                new ObjectParameter("UnloadingAccountName", typeof(string));
    
            var unloadingAmountParameter = unloadingAmount.HasValue ?
                new ObjectParameter("UnloadingAmount", unloadingAmount) :
                new ObjectParameter("UnloadingAmount", typeof(decimal));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var freightIDParameter = freightID.HasValue ?
                new ObjectParameter("FreightID", freightID) :
                new ObjectParameter("FreightID", typeof(int));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var cancelParameter = cancel.HasValue ?
                new ObjectParameter("Cancel", cancel) :
                new ObjectParameter("Cancel", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseReturnNoParameter = purchaseReturnNo.HasValue ?
                new ObjectParameter("PurchaseReturnNo", purchaseReturnNo) :
                new ObjectParameter("PurchaseReturnNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateAccountDataEntriesWhilePurchaseReturn", fYearIDParameter, purchaseAccountNameParameter, purchasemountParameter, taxAccountIDParameter, taxAccountNameParameter, taxAmountParameter, roundedOffParameter, roundedOffIDParameter, roundedOffAmountParameter, unloadingAccountIDParameter, unloadingAccountNameParameter, unloadingAmountParameter, freightParameter, freightIDParameter, freightAmountParameter, cancelParameter, entryDateParameter, voucherNoParameter, voucherTypeParameter, isAccountableParameter, paymentModeParameter, supplierIDParameter, purchaseReturnNoParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateAccountDataEntriesWhilePurchaseS(Nullable<int> fYearID, Nullable<decimal> purchasemount, Nullable<int> taxAccountID, string taxAccountName, Nullable<decimal> taxAmount, string roundedOff, Nullable<int> roundedOffID, Nullable<decimal> roundedOffAmount, Nullable<int> unloadingAccountID, string unloadingAccountName, Nullable<decimal> unloadingAmount, string freight, Nullable<int> freightID, Nullable<decimal> freightAmount, Nullable<int> cancel, Nullable<System.DateTime> entryDate, Nullable<int> voucherNo, string voucherType, Nullable<int> isAccountable, Nullable<int> paymentMode, Nullable<int> supplierID, Nullable<int> purchaseNo)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var purchasemountParameter = purchasemount.HasValue ?
                new ObjectParameter("Purchasemount", purchasemount) :
                new ObjectParameter("Purchasemount", typeof(decimal));
    
            var taxAccountIDParameter = taxAccountID.HasValue ?
                new ObjectParameter("TaxAccountID", taxAccountID) :
                new ObjectParameter("TaxAccountID", typeof(int));
    
            var taxAccountNameParameter = taxAccountName != null ?
                new ObjectParameter("TaxAccountName", taxAccountName) :
                new ObjectParameter("TaxAccountName", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var roundedOffParameter = roundedOff != null ?
                new ObjectParameter("RoundedOff", roundedOff) :
                new ObjectParameter("RoundedOff", typeof(string));
    
            var roundedOffIDParameter = roundedOffID.HasValue ?
                new ObjectParameter("RoundedOffID", roundedOffID) :
                new ObjectParameter("RoundedOffID", typeof(int));
    
            var roundedOffAmountParameter = roundedOffAmount.HasValue ?
                new ObjectParameter("RoundedOffAmount", roundedOffAmount) :
                new ObjectParameter("RoundedOffAmount", typeof(decimal));
    
            var unloadingAccountIDParameter = unloadingAccountID.HasValue ?
                new ObjectParameter("UnloadingAccountID", unloadingAccountID) :
                new ObjectParameter("UnloadingAccountID", typeof(int));
    
            var unloadingAccountNameParameter = unloadingAccountName != null ?
                new ObjectParameter("UnloadingAccountName", unloadingAccountName) :
                new ObjectParameter("UnloadingAccountName", typeof(string));
    
            var unloadingAmountParameter = unloadingAmount.HasValue ?
                new ObjectParameter("UnloadingAmount", unloadingAmount) :
                new ObjectParameter("UnloadingAmount", typeof(decimal));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var freightIDParameter = freightID.HasValue ?
                new ObjectParameter("FreightID", freightID) :
                new ObjectParameter("FreightID", typeof(int));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var cancelParameter = cancel.HasValue ?
                new ObjectParameter("Cancel", cancel) :
                new ObjectParameter("Cancel", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateAccountDataEntriesWhilePurchaseS", fYearIDParameter, purchasemountParameter, taxAccountIDParameter, taxAccountNameParameter, taxAmountParameter, roundedOffParameter, roundedOffIDParameter, roundedOffAmountParameter, unloadingAccountIDParameter, unloadingAccountNameParameter, unloadingAmountParameter, freightParameter, freightIDParameter, freightAmountParameter, cancelParameter, entryDateParameter, voucherNoParameter, voucherTypeParameter, isAccountableParameter, paymentModeParameter, supplierIDParameter, purchaseNoParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateAccountDataEntriesWhileSales(Nullable<int> fYearID, string purchaseAccountName, Nullable<decimal> purchasemount, Nullable<int> taxAccountID, string taxAccountName, Nullable<decimal> taxAmount, string roundedOff, Nullable<int> roundedOffID, Nullable<decimal> roundedOffAmount, Nullable<int> unloadingAccountID, string unloadingAccountName, Nullable<decimal> unloadingAmount, string freight, Nullable<int> freightID, Nullable<decimal> freightAmount, Nullable<int> cancel, Nullable<System.DateTime> entryDate, Nullable<int> voucherNo, string voucherType, Nullable<int> isAccountable, Nullable<int> paymentMode, Nullable<int> supplierID, Nullable<int> billNo)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var purchaseAccountNameParameter = purchaseAccountName != null ?
                new ObjectParameter("PurchaseAccountName", purchaseAccountName) :
                new ObjectParameter("PurchaseAccountName", typeof(string));
    
            var purchasemountParameter = purchasemount.HasValue ?
                new ObjectParameter("Purchasemount", purchasemount) :
                new ObjectParameter("Purchasemount", typeof(decimal));
    
            var taxAccountIDParameter = taxAccountID.HasValue ?
                new ObjectParameter("TaxAccountID", taxAccountID) :
                new ObjectParameter("TaxAccountID", typeof(int));
    
            var taxAccountNameParameter = taxAccountName != null ?
                new ObjectParameter("TaxAccountName", taxAccountName) :
                new ObjectParameter("TaxAccountName", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var roundedOffParameter = roundedOff != null ?
                new ObjectParameter("RoundedOff", roundedOff) :
                new ObjectParameter("RoundedOff", typeof(string));
    
            var roundedOffIDParameter = roundedOffID.HasValue ?
                new ObjectParameter("RoundedOffID", roundedOffID) :
                new ObjectParameter("RoundedOffID", typeof(int));
    
            var roundedOffAmountParameter = roundedOffAmount.HasValue ?
                new ObjectParameter("RoundedOffAmount", roundedOffAmount) :
                new ObjectParameter("RoundedOffAmount", typeof(decimal));
    
            var unloadingAccountIDParameter = unloadingAccountID.HasValue ?
                new ObjectParameter("UnloadingAccountID", unloadingAccountID) :
                new ObjectParameter("UnloadingAccountID", typeof(int));
    
            var unloadingAccountNameParameter = unloadingAccountName != null ?
                new ObjectParameter("UnloadingAccountName", unloadingAccountName) :
                new ObjectParameter("UnloadingAccountName", typeof(string));
    
            var unloadingAmountParameter = unloadingAmount.HasValue ?
                new ObjectParameter("UnloadingAmount", unloadingAmount) :
                new ObjectParameter("UnloadingAmount", typeof(decimal));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var freightIDParameter = freightID.HasValue ?
                new ObjectParameter("FreightID", freightID) :
                new ObjectParameter("FreightID", typeof(int));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var cancelParameter = cancel.HasValue ?
                new ObjectParameter("Cancel", cancel) :
                new ObjectParameter("Cancel", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateAccountDataEntriesWhileSales", fYearIDParameter, purchaseAccountNameParameter, purchasemountParameter, taxAccountIDParameter, taxAccountNameParameter, taxAmountParameter, roundedOffParameter, roundedOffIDParameter, roundedOffAmountParameter, unloadingAccountIDParameter, unloadingAccountNameParameter, unloadingAmountParameter, freightParameter, freightIDParameter, freightAmountParameter, cancelParameter, entryDateParameter, voucherNoParameter, voucherTypeParameter, isAccountableParameter, paymentModeParameter, supplierIDParameter, billNoParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateAccountDataEntriesWhileSalesReturn(Nullable<int> fYearID, string purchaseAccountName, Nullable<decimal> purchasemount, Nullable<int> taxAccountID, string taxAccountName, Nullable<decimal> taxAmount, string roundedOff, Nullable<int> roundedOffID, Nullable<decimal> roundedOffAmount, Nullable<int> unloadingAccountID, string unloadingAccountName, Nullable<decimal> unloadingAmount, string freight, Nullable<int> freightID, Nullable<decimal> freightAmount, Nullable<int> cancel, Nullable<System.DateTime> entryDate, Nullable<int> voucherNo, string voucherType, Nullable<int> isAccountable, Nullable<int> paymentMode, Nullable<int> supplierID, Nullable<int> billReturnNo)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var purchaseAccountNameParameter = purchaseAccountName != null ?
                new ObjectParameter("PurchaseAccountName", purchaseAccountName) :
                new ObjectParameter("PurchaseAccountName", typeof(string));
    
            var purchasemountParameter = purchasemount.HasValue ?
                new ObjectParameter("Purchasemount", purchasemount) :
                new ObjectParameter("Purchasemount", typeof(decimal));
    
            var taxAccountIDParameter = taxAccountID.HasValue ?
                new ObjectParameter("TaxAccountID", taxAccountID) :
                new ObjectParameter("TaxAccountID", typeof(int));
    
            var taxAccountNameParameter = taxAccountName != null ?
                new ObjectParameter("TaxAccountName", taxAccountName) :
                new ObjectParameter("TaxAccountName", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var roundedOffParameter = roundedOff != null ?
                new ObjectParameter("RoundedOff", roundedOff) :
                new ObjectParameter("RoundedOff", typeof(string));
    
            var roundedOffIDParameter = roundedOffID.HasValue ?
                new ObjectParameter("RoundedOffID", roundedOffID) :
                new ObjectParameter("RoundedOffID", typeof(int));
    
            var roundedOffAmountParameter = roundedOffAmount.HasValue ?
                new ObjectParameter("RoundedOffAmount", roundedOffAmount) :
                new ObjectParameter("RoundedOffAmount", typeof(decimal));
    
            var unloadingAccountIDParameter = unloadingAccountID.HasValue ?
                new ObjectParameter("UnloadingAccountID", unloadingAccountID) :
                new ObjectParameter("UnloadingAccountID", typeof(int));
    
            var unloadingAccountNameParameter = unloadingAccountName != null ?
                new ObjectParameter("UnloadingAccountName", unloadingAccountName) :
                new ObjectParameter("UnloadingAccountName", typeof(string));
    
            var unloadingAmountParameter = unloadingAmount.HasValue ?
                new ObjectParameter("UnloadingAmount", unloadingAmount) :
                new ObjectParameter("UnloadingAmount", typeof(decimal));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var freightIDParameter = freightID.HasValue ?
                new ObjectParameter("FreightID", freightID) :
                new ObjectParameter("FreightID", typeof(int));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var cancelParameter = cancel.HasValue ?
                new ObjectParameter("Cancel", cancel) :
                new ObjectParameter("Cancel", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var billReturnNoParameter = billReturnNo.HasValue ?
                new ObjectParameter("BillReturnNo", billReturnNo) :
                new ObjectParameter("BillReturnNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateAccountDataEntriesWhileSalesReturn", fYearIDParameter, purchaseAccountNameParameter, purchasemountParameter, taxAccountIDParameter, taxAccountNameParameter, taxAmountParameter, roundedOffParameter, roundedOffIDParameter, roundedOffAmountParameter, unloadingAccountIDParameter, unloadingAccountNameParameter, unloadingAmountParameter, freightParameter, freightIDParameter, freightAmountParameter, cancelParameter, entryDateParameter, voucherNoParameter, voucherTypeParameter, isAccountableParameter, paymentModeParameter, supplierIDParameter, billReturnNoParameter);
        }
    
        public virtual int InsertUpdateAccountHead(ObjectParameter hSlNo, string hName, Nullable<int> gUnder, Nullable<System.DateTime> uDate, string type, Nullable<int> userid)
        {
            var hNameParameter = hName != null ?
                new ObjectParameter("HName", hName) :
                new ObjectParameter("HName", typeof(string));
    
            var gUnderParameter = gUnder.HasValue ?
                new ObjectParameter("GUnder", gUnder) :
                new ObjectParameter("GUnder", typeof(int));
    
            var uDateParameter = uDate.HasValue ?
                new ObjectParameter("UDate", uDate) :
                new ObjectParameter("UDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccountHead", hSlNo, hNameParameter, gUnderParameter, uDateParameter, typeParameter, useridParameter);
        }
    
        public virtual int InsertUpdateAccountnew1(Nullable<int> accountID, string accountCode, Nullable<int> accountParent, Nullable<int> accountType, Nullable<int> accountGroup, string accountName, Nullable<decimal> amount, string reflectsIn, Nullable<int> order, string address, string city, string place, string country, string mob, string phone, string email, string tinNo, string cstNo, Nullable<int> accountHead, Nullable<int> companyid, Nullable<int> rootId, string rateType, string saleBlock, string bankName, string cardType, string cardNo, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string billmode, Nullable<int> gradeID, string dLNO, string pinNo, Nullable<int> creditDays, string discountPercentage, Nullable<decimal> dis8HNT, string dis8HT, string gSTinNo, string adharNo, string customer_SuitAppsId, Nullable<int> state, Nullable<int> district, Nullable<int> taluk, Nullable<int> distributor, Nullable<int> distributorID, ObjectParameter iD, Nullable<int> creditAmount, string aliasName, string despatchAddress, Nullable<int> mailid, Nullable<int> pAN, string accountHeadCombo, Nullable<int> intraInter, string panNumber, Nullable<int> stateCode, Nullable<int> locationId)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var accountGroupParameter = accountGroup.HasValue ?
                new ObjectParameter("AccountGroup", accountGroup) :
                new ObjectParameter("AccountGroup", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reflectsInParameter = reflectsIn != null ?
                new ObjectParameter("ReflectsIn", reflectsIn) :
                new ObjectParameter("ReflectsIn", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("mob", mob) :
                new ObjectParameter("mob", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var cstNoParameter = cstNo != null ?
                new ObjectParameter("cstNo", cstNo) :
                new ObjectParameter("cstNo", typeof(string));
    
            var accountHeadParameter = accountHead.HasValue ?
                new ObjectParameter("AccountHead", accountHead) :
                new ObjectParameter("AccountHead", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var rateTypeParameter = rateType != null ?
                new ObjectParameter("RateType", rateType) :
                new ObjectParameter("RateType", typeof(string));
    
            var saleBlockParameter = saleBlock != null ?
                new ObjectParameter("SaleBlock", saleBlock) :
                new ObjectParameter("SaleBlock", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var billmodeParameter = billmode != null ?
                new ObjectParameter("Billmode", billmode) :
                new ObjectParameter("Billmode", typeof(string));
    
            var gradeIDParameter = gradeID.HasValue ?
                new ObjectParameter("GradeID", gradeID) :
                new ObjectParameter("GradeID", typeof(int));
    
            var dLNOParameter = dLNO != null ?
                new ObjectParameter("DLNO", dLNO) :
                new ObjectParameter("DLNO", typeof(string));
    
            var pinNoParameter = pinNo != null ?
                new ObjectParameter("PinNo", pinNo) :
                new ObjectParameter("PinNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var discountPercentageParameter = discountPercentage != null ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(string));
    
            var dis8HNTParameter = dis8HNT.HasValue ?
                new ObjectParameter("Dis8HNT", dis8HNT) :
                new ObjectParameter("Dis8HNT", typeof(decimal));
    
            var dis8HTParameter = dis8HT != null ?
                new ObjectParameter("Dis8HT", dis8HT) :
                new ObjectParameter("Dis8HT", typeof(string));
    
            var gSTinNoParameter = gSTinNo != null ?
                new ObjectParameter("GSTinNo", gSTinNo) :
                new ObjectParameter("GSTinNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var customer_SuitAppsIdParameter = customer_SuitAppsId != null ?
                new ObjectParameter("Customer_SuitAppsId", customer_SuitAppsId) :
                new ObjectParameter("Customer_SuitAppsId", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            var distributorParameter = distributor.HasValue ?
                new ObjectParameter("Distributor", distributor) :
                new ObjectParameter("Distributor", typeof(int));
    
            var distributorIDParameter = distributorID.HasValue ?
                new ObjectParameter("DistributorID", distributorID) :
                new ObjectParameter("DistributorID", typeof(int));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(int));
    
            var aliasNameParameter = aliasName != null ?
                new ObjectParameter("AliasName", aliasName) :
                new ObjectParameter("AliasName", typeof(string));
    
            var despatchAddressParameter = despatchAddress != null ?
                new ObjectParameter("DespatchAddress", despatchAddress) :
                new ObjectParameter("DespatchAddress", typeof(string));
    
            var mailidParameter = mailid.HasValue ?
                new ObjectParameter("Mailid", mailid) :
                new ObjectParameter("Mailid", typeof(int));
    
            var pANParameter = pAN.HasValue ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(int));
    
            var accountHeadComboParameter = accountHeadCombo != null ?
                new ObjectParameter("AccountHeadCombo", accountHeadCombo) :
                new ObjectParameter("AccountHeadCombo", typeof(string));
    
            var intraInterParameter = intraInter.HasValue ?
                new ObjectParameter("IntraInter", intraInter) :
                new ObjectParameter("IntraInter", typeof(int));
    
            var panNumberParameter = panNumber != null ?
                new ObjectParameter("PanNumber", panNumber) :
                new ObjectParameter("PanNumber", typeof(string));
    
            var stateCodeParameter = stateCode.HasValue ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccountnew1", accountIDParameter, accountCodeParameter, accountParentParameter, accountTypeParameter, accountGroupParameter, accountNameParameter, amountParameter, reflectsInParameter, orderParameter, addressParameter, cityParameter, placeParameter, countryParameter, mobParameter, phoneParameter, emailParameter, tinNoParameter, cstNoParameter, accountHeadParameter, companyidParameter, rootIdParameter, rateTypeParameter, saleBlockParameter, bankNameParameter, cardTypeParameter, cardNoParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, billmodeParameter, gradeIDParameter, dLNOParameter, pinNoParameter, creditDaysParameter, discountPercentageParameter, dis8HNTParameter, dis8HTParameter, gSTinNoParameter, adharNoParameter, customer_SuitAppsIdParameter, stateParameter, districtParameter, talukParameter, distributorParameter, distributorIDParameter, iD, creditAmountParameter, aliasNameParameter, despatchAddressParameter, mailidParameter, pANParameter, accountHeadComboParameter, intraInterParameter, panNumberParameter, stateCodeParameter, locationIdParameter);
        }
    
        public virtual int InsertUpdateAccout_App(Nullable<int> accountID, string accountName, string address, string country, string mob, string phone, string district, string state, string pincode, Nullable<int> companyid, Nullable<int> isdeleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string place, string gSTinNo, string adharNo, string customer_SuitAppsId, Nullable<int> routeId, ObjectParameter outCustomer_SuitAppsId, ObjectParameter outId, Nullable<int> taluk, Nullable<int> distributor)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("mob", mob) :
                new ObjectParameter("mob", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var isdeletedParameter = isdeleted.HasValue ?
                new ObjectParameter("isdeleted", isdeleted) :
                new ObjectParameter("isdeleted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var gSTinNoParameter = gSTinNo != null ?
                new ObjectParameter("GSTinNo", gSTinNo) :
                new ObjectParameter("GSTinNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var customer_SuitAppsIdParameter = customer_SuitAppsId != null ?
                new ObjectParameter("Customer_SuitAppsId", customer_SuitAppsId) :
                new ObjectParameter("Customer_SuitAppsId", typeof(string));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            var distributorParameter = distributor.HasValue ?
                new ObjectParameter("Distributor", distributor) :
                new ObjectParameter("Distributor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAccout_App", accountIDParameter, accountNameParameter, addressParameter, countryParameter, mobParameter, phoneParameter, districtParameter, stateParameter, pincodeParameter, companyidParameter, isdeletedParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, placeParameter, gSTinNoParameter, adharNoParameter, customer_SuitAppsIdParameter, routeIdParameter, outCustomer_SuitAppsId, outId, talukParameter, distributorParameter);
        }
    
        public virtual int InsertUpdateAcGroupMaster(ObjectParameter gSlNo, string gName, Nullable<int> gUnder, Nullable<System.DateTime> uDate, string type, Nullable<int> userid)
        {
            var gNameParameter = gName != null ?
                new ObjectParameter("GName", gName) :
                new ObjectParameter("GName", typeof(string));
    
            var gUnderParameter = gUnder.HasValue ?
                new ObjectParameter("GUnder", gUnder) :
                new ObjectParameter("GUnder", typeof(int));
    
            var uDateParameter = uDate.HasValue ?
                new ObjectParameter("UDate", uDate) :
                new ObjectParameter("UDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAcGroupMaster", gSlNo, gNameParameter, gUnderParameter, uDateParameter, typeParameter, useridParameter);
        }
    
        public virtual int InsertUpdateAcTransation(Nullable<int> slNo, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fCode, Nullable<int> tCode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> compantId)
        {
            var slNoParameter = slNo.HasValue ?
                new ObjectParameter("SlNo", slNo) :
                new ObjectParameter("SlNo", typeof(int));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode.HasValue ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(int));
    
            var tCodeParameter = tCode.HasValue ?
                new ObjectParameter("TCode", tCode) :
                new ObjectParameter("TCode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var compantIdParameter = compantId.HasValue ?
                new ObjectParameter("CompantId", compantId) :
                new ObjectParameter("CompantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAcTransation", slNoParameter, billNoParameter, aDateParameter, cDateParameter, fCodeParameter, tCodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, compantIdParameter);
        }
    
        public virtual int InsertUpdateAcTransationInPurchase(Nullable<int> slNo, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fCode, Nullable<int> tCode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> compantId, string otherNarration)
        {
            var slNoParameter = slNo.HasValue ?
                new ObjectParameter("SlNo", slNo) :
                new ObjectParameter("SlNo", typeof(int));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode.HasValue ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(int));
    
            var tCodeParameter = tCode.HasValue ?
                new ObjectParameter("TCode", tCode) :
                new ObjectParameter("TCode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var compantIdParameter = compantId.HasValue ?
                new ObjectParameter("CompantId", compantId) :
                new ObjectParameter("CompantId", typeof(int));
    
            var otherNarrationParameter = otherNarration != null ?
                new ObjectParameter("OtherNarration", otherNarration) :
                new ObjectParameter("OtherNarration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAcTransationInPurchase", slNoParameter, billNoParameter, aDateParameter, cDateParameter, fCodeParameter, tCodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, compantIdParameter, otherNarrationParameter);
        }
    
        public virtual int InsertUpdateAcTransationInSales(Nullable<int> slNo, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fCode, Nullable<int> tCode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> compantId, string otherNarration)
        {
            var slNoParameter = slNo.HasValue ?
                new ObjectParameter("SlNo", slNo) :
                new ObjectParameter("SlNo", typeof(int));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode.HasValue ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(int));
    
            var tCodeParameter = tCode.HasValue ?
                new ObjectParameter("TCode", tCode) :
                new ObjectParameter("TCode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var compantIdParameter = compantId.HasValue ?
                new ObjectParameter("CompantId", compantId) :
                new ObjectParameter("CompantId", typeof(int));
    
            var otherNarrationParameter = otherNarration != null ?
                new ObjectParameter("OtherNarration", otherNarration) :
                new ObjectParameter("OtherNarration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAcTransationInSales", slNoParameter, billNoParameter, aDateParameter, cDateParameter, fCodeParameter, tCodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, compantIdParameter, otherNarrationParameter);
        }
    
        public virtual int InsertUpdateBank(Nullable<int> bankid, Nullable<int> headId, string bankName, Nullable<int> gUnder, string place, string branch, string phoneNo, string accNo, Nullable<System.DateTime> bDate, Nullable<int> userId)
        {
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            var headIdParameter = headId.HasValue ?
                new ObjectParameter("HeadId", headId) :
                new ObjectParameter("HeadId", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var gUnderParameter = gUnder.HasValue ?
                new ObjectParameter("GUnder", gUnder) :
                new ObjectParameter("GUnder", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var accNoParameter = accNo != null ?
                new ObjectParameter("AccNo", accNo) :
                new ObjectParameter("AccNo", typeof(string));
    
            var bDateParameter = bDate.HasValue ?
                new ObjectParameter("BDate", bDate) :
                new ObjectParameter("BDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBank", bankidParameter, headIdParameter, bankNameParameter, gUnderParameter, placeParameter, branchParameter, phoneNoParameter, accNoParameter, bDateParameter, userIdParameter);
        }
    
        public virtual int InsertUpdateBankAcHead(Nullable<int> acHeadId, string acHeadName, Nullable<int> groupId, Nullable<int> userId, Nullable<System.DateTime> date, string type, Nullable<int> isDeleted, string suitAppsID, ObjectParameter iD)
        {
            var acHeadIdParameter = acHeadId.HasValue ?
                new ObjectParameter("AcHeadId", acHeadId) :
                new ObjectParameter("AcHeadId", typeof(int));
    
            var acHeadNameParameter = acHeadName != null ?
                new ObjectParameter("AcHeadName", acHeadName) :
                new ObjectParameter("AcHeadName", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var suitAppsIDParameter = suitAppsID != null ?
                new ObjectParameter("SuitAppsID", suitAppsID) :
                new ObjectParameter("SuitAppsID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBankAcHead", acHeadIdParameter, acHeadNameParameter, groupIdParameter, userIdParameter, dateParameter, typeParameter, isDeletedParameter, suitAppsIDParameter, iD);
        }
    
        public virtual int InsertUpdateBankAcHead_App(Nullable<int> acHeadId, string acHeadName, Nullable<int> groupId, Nullable<int> userId, Nullable<System.DateTime> date, string type, ObjectParameter outId)
        {
            var acHeadIdParameter = acHeadId.HasValue ?
                new ObjectParameter("AcHeadId", acHeadId) :
                new ObjectParameter("AcHeadId", typeof(int));
    
            var acHeadNameParameter = acHeadName != null ?
                new ObjectParameter("AcHeadName", acHeadName) :
                new ObjectParameter("AcHeadName", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBankAcHead_App", acHeadIdParameter, acHeadNameParameter, groupIdParameter, userIdParameter, dateParameter, typeParameter, outId);
        }
    
        public virtual int InsertUpdateBatchDet(ObjectParameter batchId, string batchName, string expiryDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> companyId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBatchDet", batchId, batchNameParameter, expiryDateParameter, createdByParameter, createdDateParameter, companyIdParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual int InsertUpdateBillReturn(ObjectParameter billID, Nullable<int> billNo, Nullable<System.DateTime> enteringDate, Nullable<System.DateTime> billDate, Nullable<int> billMode, Nullable<int> customerID, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var enteringDateParameter = enteringDate.HasValue ?
                new ObjectParameter("EnteringDate", enteringDate) :
                new ObjectParameter("EnteringDate", typeof(System.DateTime));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateBillReturn", billID, billNoParameter, enteringDateParameter, billDateParameter, billModeParameter, customerIDParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter);
        }
    
        public virtual int InsertUpdateCashVoucher(ObjectParameter slno, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fcode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> companyId, string otherNarration)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fcodeParameter = fcode.HasValue ?
                new ObjectParameter("Fcode", fcode) :
                new ObjectParameter("Fcode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var otherNarrationParameter = otherNarration != null ?
                new ObjectParameter("OtherNarration", otherNarration) :
                new ObjectParameter("OtherNarration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCashVoucher", slno, billNoParameter, aDateParameter, cDateParameter, fcodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, companyIdParameter, otherNarrationParameter);
        }
    
        public virtual int InsertUpdateCompanyInfo(ObjectParameter companyId, Nullable<int> id, string tinNo, string cstNo, string companyName, string companyCode, string address, string telephoneNo, string mobileNo, string citty, string state, string district, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string gSTinNo, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var cstNoParameter = cstNo != null ?
                new ObjectParameter("CstNo", cstNo) :
                new ObjectParameter("CstNo", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneNoParameter = telephoneNo != null ?
                new ObjectParameter("TelephoneNo", telephoneNo) :
                new ObjectParameter("TelephoneNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var cittyParameter = citty != null ?
                new ObjectParameter("Citty", citty) :
                new ObjectParameter("Citty", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var gSTinNoParameter = gSTinNo != null ?
                new ObjectParameter("GSTinNo", gSTinNo) :
                new ObjectParameter("GSTinNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCompanyInfo", companyId, idParameter, tinNoParameter, cstNoParameter, companyNameParameter, companyCodeParameter, addressParameter, telephoneNoParameter, mobileNoParameter, cittyParameter, stateParameter, districtParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, gSTinNoParameter, emailParameter);
        }
    
        public virtual int InsertUpdateCompanyInfo_App(Nullable<int> iD, Nullable<int> companyId, string tinNo, string cstNo, string companyName, string companyCode, string address, string telephoneNo, string mobileNo, string citty, string state, string district, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string gSTinNo, string email)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var cstNoParameter = cstNo != null ?
                new ObjectParameter("CstNo", cstNo) :
                new ObjectParameter("CstNo", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneNoParameter = telephoneNo != null ?
                new ObjectParameter("TelephoneNo", telephoneNo) :
                new ObjectParameter("TelephoneNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var cittyParameter = citty != null ?
                new ObjectParameter("Citty", citty) :
                new ObjectParameter("Citty", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var gSTinNoParameter = gSTinNo != null ?
                new ObjectParameter("GSTinNo", gSTinNo) :
                new ObjectParameter("GSTinNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCompanyInfo_App", iDParameter, companyIdParameter, tinNoParameter, cstNoParameter, companyNameParameter, companyCodeParameter, addressParameter, telephoneNoParameter, mobileNoParameter, cittyParameter, stateParameter, districtParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, gSTinNoParameter, emailParameter);
        }
    
        public virtual int InsertUpdateContainer(string containerName, Nullable<System.DateTime> date, string customer, Nullable<decimal> rate)
        {
            var containerNameParameter = containerName != null ?
                new ObjectParameter("ContainerName", containerName) :
                new ObjectParameter("ContainerName", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateContainer", containerNameParameter, dateParameter, customerParameter, rateParameter);
        }
    
        public virtual int InsertUpdateCumPendingAmt(ObjectParameter slno, Nullable<System.DateTime> billDate, Nullable<int> retailBillNo, Nullable<int> wholeBillNo, Nullable<int> pendingBillNo, Nullable<int> companyId, Nullable<decimal> billAmount, Nullable<decimal> pendingAmt, Nullable<decimal> paidAmt, Nullable<decimal> balanceAmt, string cumstomerName, Nullable<int> cumstomerId)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            var wholeBillNoParameter = wholeBillNo.HasValue ?
                new ObjectParameter("WholeBillNo", wholeBillNo) :
                new ObjectParameter("WholeBillNo", typeof(int));
    
            var pendingBillNoParameter = pendingBillNo.HasValue ?
                new ObjectParameter("PendingBillNo", pendingBillNo) :
                new ObjectParameter("PendingBillNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var pendingAmtParameter = pendingAmt.HasValue ?
                new ObjectParameter("PendingAmt", pendingAmt) :
                new ObjectParameter("PendingAmt", typeof(decimal));
    
            var paidAmtParameter = paidAmt.HasValue ?
                new ObjectParameter("paidAmt", paidAmt) :
                new ObjectParameter("paidAmt", typeof(decimal));
    
            var balanceAmtParameter = balanceAmt.HasValue ?
                new ObjectParameter("BalanceAmt", balanceAmt) :
                new ObjectParameter("BalanceAmt", typeof(decimal));
    
            var cumstomerNameParameter = cumstomerName != null ?
                new ObjectParameter("cumstomerName", cumstomerName) :
                new ObjectParameter("cumstomerName", typeof(string));
    
            var cumstomerIdParameter = cumstomerId.HasValue ?
                new ObjectParameter("cumstomerId", cumstomerId) :
                new ObjectParameter("cumstomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCumPendingAmt", slno, billDateParameter, retailBillNoParameter, wholeBillNoParameter, pendingBillNoParameter, companyIdParameter, billAmountParameter, pendingAmtParameter, paidAmtParameter, balanceAmtParameter, cumstomerNameParameter, cumstomerIdParameter);
        }
    
        public virtual int InsertUpdateCustomer(Nullable<int> customerID, string customerName, string customerAddress, string customerCountry, string customerCity, string customerEmail, string customerPhone, string customerMob, Nullable<int> accountType, string accountName, Nullable<int> accountParent, Nullable<int> operation)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var customerCountryParameter = customerCountry != null ?
                new ObjectParameter("CustomerCountry", customerCountry) :
                new ObjectParameter("CustomerCountry", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var customerMobParameter = customerMob != null ?
                new ObjectParameter("CustomerMob", customerMob) :
                new ObjectParameter("CustomerMob", typeof(string));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            var operationParameter = operation.HasValue ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCustomer", customerIDParameter, customerNameParameter, customerAddressParameter, customerCountryParameter, customerCityParameter, customerEmailParameter, customerPhoneParameter, customerMobParameter, accountTypeParameter, accountNameParameter, accountParentParameter, operationParameter);
        }
    
        public virtual int InsertUpdateDiscount(Nullable<int> discountID, Nullable<int> discount, Nullable<int> createdBy)
        {
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateDiscount", discountIDParameter, discountParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateEdittedPriceSales(ObjectParameter billID, Nullable<int> billNo, Nullable<System.DateTime> enteringDate, Nullable<System.DateTime> billDate, Nullable<int> billMode, string customerName, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID, string tinNo, Nullable<System.DateTime> chequeDate, string bank, Nullable<decimal> pendingAmount, Nullable<int> creditSale, Nullable<decimal> paidAmount, Nullable<int> containerCount, Nullable<decimal> containerAmount, string wholeSaleRetail, Nullable<int> companyID, Nullable<int> retailBillNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var enteringDateParameter = enteringDate.HasValue ?
                new ObjectParameter("EnteringDate", enteringDate) :
                new ObjectParameter("EnteringDate", typeof(System.DateTime));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var creditSaleParameter = creditSale.HasValue ?
                new ObjectParameter("CreditSale", creditSale) :
                new ObjectParameter("CreditSale", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var containerCountParameter = containerCount.HasValue ?
                new ObjectParameter("ContainerCount", containerCount) :
                new ObjectParameter("ContainerCount", typeof(int));
    
            var containerAmountParameter = containerAmount.HasValue ?
                new ObjectParameter("ContainerAmount", containerAmount) :
                new ObjectParameter("ContainerAmount", typeof(decimal));
    
            var wholeSaleRetailParameter = wholeSaleRetail != null ?
                new ObjectParameter("WholeSaleRetail", wholeSaleRetail) :
                new ObjectParameter("WholeSaleRetail", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateEdittedPriceSales", billID, billNoParameter, enteringDateParameter, billDateParameter, billModeParameter, customerNameParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter, tinNoParameter, chequeDateParameter, bankParameter, pendingAmountParameter, creditSaleParameter, paidAmountParameter, containerCountParameter, containerAmountParameter, wholeSaleRetailParameter, companyIDParameter, retailBillNoParameter);
        }
    
        public virtual int insertupdateemp(Nullable<int> slno, Nullable<int> empID, Nullable<int> rootID, Nullable<int> day, Nullable<int> isdeleted, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> companyID, Nullable<System.DateTime> modifiedDate, Nullable<int> modifiedBy, Nullable<int> target)
        {
            var slnoParameter = slno.HasValue ?
                new ObjectParameter("Slno", slno) :
                new ObjectParameter("Slno", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var isdeletedParameter = isdeleted.HasValue ?
                new ObjectParameter("Isdeleted", isdeleted) :
                new ObjectParameter("Isdeleted", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var targetParameter = target.HasValue ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertupdateemp", slnoParameter, empIDParameter, rootIDParameter, dayParameter, isdeletedParameter, deletedByParameter, deletedDateParameter, createdByParameter, createdDateParameter, companyIDParameter, modifiedDateParameter, modifiedByParameter, targetParameter);
        }
    
        public virtual int insertupdateemprootDistr(Nullable<int> empID, Nullable<int> distrID, string distriName, Nullable<int> companyID, Nullable<int> status)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var distrIDParameter = distrID.HasValue ?
                new ObjectParameter("DistrID", distrID) :
                new ObjectParameter("DistrID", typeof(int));
    
            var distriNameParameter = distriName != null ?
                new ObjectParameter("DistriName", distriName) :
                new ObjectParameter("DistriName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertupdateemprootDistr", empIDParameter, distrIDParameter, distriNameParameter, companyIDParameter, statusParameter);
        }
    
        public virtual int InsertUpdateFinancialYear(ObjectParameter fYearID, string fYear, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, Nullable<int> status)
        {
            var fYearParameter = fYear != null ?
                new ObjectParameter("FYear", fYear) :
                new ObjectParameter("FYear", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFinancialYear", fYearID, fYearParameter, startDateParameter, endDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, statusParameter);
        }
    
        public virtual int InsertUpdateFromLocation(Nullable<int> itemID, string categoryID, Nullable<int> subCategoryID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFromLocation", itemIDParameter, categoryIDParameter, subCategoryIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter);
        }
    
        public virtual int InsertUpdateItem(ObjectParameter itemID, ObjectParameter productId, Nullable<int> categoryID, string itemName, string tax, Nullable<int> itemUnitType, Nullable<decimal> wP, Nullable<decimal> mRP, string image, string hsncode, Nullable<decimal> stock, Nullable<decimal> ccp)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var itemUnitTypeParameter = itemUnitType.HasValue ?
                new ObjectParameter("ItemUnitType", itemUnitType) :
                new ObjectParameter("ItemUnitType", typeof(int));
    
            var wPParameter = wP.HasValue ?
                new ObjectParameter("WP", wP) :
                new ObjectParameter("WP", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var hsncodeParameter = hsncode != null ?
                new ObjectParameter("Hsncode", hsncode) :
                new ObjectParameter("Hsncode", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(decimal));
    
            var ccpParameter = ccp.HasValue ?
                new ObjectParameter("ccp", ccp) :
                new ObjectParameter("ccp", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateItem", itemID, productId, categoryIDParameter, itemNameParameter, taxParameter, itemUnitTypeParameter, wPParameter, mRPParameter, imageParameter, hsncodeParameter, stockParameter, ccpParameter);
        }
    
        public virtual int InsertUpdateItemCategory(ObjectParameter categoryID, string catgoryName, string categoryCode, Nullable<int> categoryType, Nullable<int> categoryParent, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> level, string subCategoryParent)
        {
            var catgoryNameParameter = catgoryName != null ?
                new ObjectParameter("CatgoryName", catgoryName) :
                new ObjectParameter("CatgoryName", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var categoryTypeParameter = categoryType.HasValue ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(int));
    
            var categoryParentParameter = categoryParent.HasValue ?
                new ObjectParameter("CategoryParent", categoryParent) :
                new ObjectParameter("CategoryParent", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var subCategoryParentParameter = subCategoryParent != null ?
                new ObjectParameter("SubCategoryParent", subCategoryParent) :
                new ObjectParameter("SubCategoryParent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateItemCategory", categoryID, catgoryNameParameter, categoryCodeParameter, categoryTypeParameter, categoryParentParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, levelParameter, subCategoryParentParameter);
        }
    
        public virtual int InsertUpdateItemCreations(Nullable<decimal> purchaseRate, ObjectParameter itemID, string itemNumber, string itemCode, string categoryCode, string itemName, string itemName1, string itemDesciption, Nullable<int> itemCategoryID, Nullable<int> subcategoryID, Nullable<int> unitID, Nullable<int> reorderQuantity, Nullable<decimal> salePrice, Nullable<int> loadingCharge, string itemUnitType, Nullable<int> maximum, Nullable<int> minimum, Nullable<decimal> discount, Nullable<int> taxID, string tax, Nullable<int> createdBy, Nullable<int> baseUnit, Nullable<decimal> baseQuantity, Nullable<int> companyID, Nullable<int> itemBlocking, Nullable<int> sCategoryid, string itemBarcode)
        {
            var purchaseRateParameter = purchaseRate.HasValue ?
                new ObjectParameter("purchaseRate", purchaseRate) :
                new ObjectParameter("purchaseRate", typeof(decimal));
    
            var itemNumberParameter = itemNumber != null ?
                new ObjectParameter("ItemNumber", itemNumber) :
                new ObjectParameter("ItemNumber", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemName1Parameter = itemName1 != null ?
                new ObjectParameter("ItemName1", itemName1) :
                new ObjectParameter("ItemName1", typeof(string));
    
            var itemDesciptionParameter = itemDesciption != null ?
                new ObjectParameter("ItemDesciption", itemDesciption) :
                new ObjectParameter("ItemDesciption", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var reorderQuantityParameter = reorderQuantity.HasValue ?
                new ObjectParameter("ReorderQuantity", reorderQuantity) :
                new ObjectParameter("ReorderQuantity", typeof(int));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var loadingChargeParameter = loadingCharge.HasValue ?
                new ObjectParameter("LoadingCharge", loadingCharge) :
                new ObjectParameter("LoadingCharge", typeof(int));
    
            var itemUnitTypeParameter = itemUnitType != null ?
                new ObjectParameter("ItemUnitType", itemUnitType) :
                new ObjectParameter("ItemUnitType", typeof(string));
    
            var maximumParameter = maximum.HasValue ?
                new ObjectParameter("Maximum", maximum) :
                new ObjectParameter("Maximum", typeof(int));
    
            var minimumParameter = minimum.HasValue ?
                new ObjectParameter("Minimum", minimum) :
                new ObjectParameter("Minimum", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var baseUnitParameter = baseUnit.HasValue ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(int));
    
            var baseQuantityParameter = baseQuantity.HasValue ?
                new ObjectParameter("BaseQuantity", baseQuantity) :
                new ObjectParameter("BaseQuantity", typeof(decimal));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var itemBlockingParameter = itemBlocking.HasValue ?
                new ObjectParameter("ItemBlocking", itemBlocking) :
                new ObjectParameter("ItemBlocking", typeof(int));
    
            var sCategoryidParameter = sCategoryid.HasValue ?
                new ObjectParameter("SCategoryid", sCategoryid) :
                new ObjectParameter("SCategoryid", typeof(int));
    
            var itemBarcodeParameter = itemBarcode != null ?
                new ObjectParameter("ItemBarcode", itemBarcode) :
                new ObjectParameter("ItemBarcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateItemCreations", purchaseRateParameter, itemID, itemNumberParameter, itemCodeParameter, categoryCodeParameter, itemNameParameter, itemName1Parameter, itemDesciptionParameter, itemCategoryIDParameter, subcategoryIDParameter, unitIDParameter, reorderQuantityParameter, salePriceParameter, loadingChargeParameter, itemUnitTypeParameter, maximumParameter, minimumParameter, discountParameter, taxIDParameter, taxParameter, createdByParameter, baseUnitParameter, baseQuantityParameter, companyIDParameter, itemBlockingParameter, sCategoryidParameter, itemBarcodeParameter);
        }
    
        public virtual int InsertUpdateItemState(ObjectParameter stateID, string stateName, string stateCode, Nullable<int> stateType, Nullable<int> stateParent, Nullable<int> createdBy, Nullable<System.DateTime> createdDateAndTime, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDateAndTime, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDateAndTime, Nullable<int> level, string subCategoryParent)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateTypeParameter = stateType.HasValue ?
                new ObjectParameter("StateType", stateType) :
                new ObjectParameter("StateType", typeof(int));
    
            var stateParentParameter = stateParent.HasValue ?
                new ObjectParameter("StateParent", stateParent) :
                new ObjectParameter("StateParent", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var createdDateAndTimeParameter = createdDateAndTime.HasValue ?
                new ObjectParameter("CreatedDateAndTime", createdDateAndTime) :
                new ObjectParameter("CreatedDateAndTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateAndTimeParameter = modifiedDateAndTime.HasValue ?
                new ObjectParameter("ModifiedDateAndTime", modifiedDateAndTime) :
                new ObjectParameter("ModifiedDateAndTime", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateAndTimeParameter = deletedDateAndTime.HasValue ?
                new ObjectParameter("DeletedDateAndTime", deletedDateAndTime) :
                new ObjectParameter("DeletedDateAndTime", typeof(System.DateTime));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var subCategoryParentParameter = subCategoryParent != null ?
                new ObjectParameter("SubCategoryParent", subCategoryParent) :
                new ObjectParameter("SubCategoryParent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateItemState", stateID, stateNameParameter, stateCodeParameter, stateTypeParameter, stateParentParameter, createdByParameter, createdDateAndTimeParameter, modifiedByParameter, modifiedDateAndTimeParameter, deletedByParameter, deletedDateAndTimeParameter, levelParameter, subCategoryParentParameter);
        }
    
        public virtual int InsertUpdateLoadingCharge(Nullable<int> loadId, string lodingcharge, Nullable<int> createdBy)
        {
            var loadIdParameter = loadId.HasValue ?
                new ObjectParameter("LoadId", loadId) :
                new ObjectParameter("LoadId", typeof(int));
    
            var lodingchargeParameter = lodingcharge != null ?
                new ObjectParameter("lodingcharge", lodingcharge) :
                new ObjectParameter("lodingcharge", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateLoadingCharge", loadIdParameter, lodingchargeParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateLocation(Nullable<int> locationID, string locationName, Nullable<int> createdBy)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateLocation", locationIDParameter, locationNameParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateLocation2(Nullable<int> locationID, string locationName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateLocation2", locationIDParameter, locationNameParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int InsertUpdateMac(ObjectParameter id, string macID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, Nullable<int> locId)
        {
            var macIDParameter = macID != null ?
                new ObjectParameter("MacID", macID) :
                new ObjectParameter("MacID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateMac", id, macIDParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, locIdParameter);
        }
    
        public virtual int insertupdatemanufacture(string manufactureID, Nullable<int> itemId)
        {
            var manufactureIDParameter = manufactureID != null ?
                new ObjectParameter("ManufactureID", manufactureID) :
                new ObjectParameter("ManufactureID", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertupdatemanufacture", manufactureIDParameter, itemIdParameter);
        }
    
        public virtual int InsertUpdateNewBillingForEstimate(ObjectParameter estimateID, Nullable<int> billNo, Nullable<int> billID, Nullable<System.DateTime> enteringDate, Nullable<System.DateTime> billDate, Nullable<int> billMode, string customerName, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID, string tinNo, Nullable<System.DateTime> chequeDate, string bank, Nullable<decimal> pendingAmount, Nullable<int> creditSale, Nullable<decimal> paidAmount, Nullable<int> containerCount, Nullable<decimal> containerAmount, string wholeSaleRetail, Nullable<int> companyID, Nullable<int> estimateNo, Nullable<int> formType, string formName, Nullable<int> retailBillNo, Nullable<int> retailEstimateNo, Nullable<decimal> lessAddAmt, Nullable<decimal> discAmt, Nullable<decimal> roundOff, string billModeText, Nullable<int> cumstomerId, string cumstomerAddress, string cumcontact)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var enteringDateParameter = enteringDate.HasValue ?
                new ObjectParameter("EnteringDate", enteringDate) :
                new ObjectParameter("EnteringDate", typeof(System.DateTime));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var creditSaleParameter = creditSale.HasValue ?
                new ObjectParameter("CreditSale", creditSale) :
                new ObjectParameter("CreditSale", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var containerCountParameter = containerCount.HasValue ?
                new ObjectParameter("ContainerCount", containerCount) :
                new ObjectParameter("ContainerCount", typeof(int));
    
            var containerAmountParameter = containerAmount.HasValue ?
                new ObjectParameter("ContainerAmount", containerAmount) :
                new ObjectParameter("ContainerAmount", typeof(decimal));
    
            var wholeSaleRetailParameter = wholeSaleRetail != null ?
                new ObjectParameter("WholeSaleRetail", wholeSaleRetail) :
                new ObjectParameter("WholeSaleRetail", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            var retailEstimateNoParameter = retailEstimateNo.HasValue ?
                new ObjectParameter("RetailEstimateNo", retailEstimateNo) :
                new ObjectParameter("RetailEstimateNo", typeof(int));
    
            var lessAddAmtParameter = lessAddAmt.HasValue ?
                new ObjectParameter("LessAddAmt", lessAddAmt) :
                new ObjectParameter("LessAddAmt", typeof(decimal));
    
            var discAmtParameter = discAmt.HasValue ?
                new ObjectParameter("DiscAmt", discAmt) :
                new ObjectParameter("DiscAmt", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var billModeTextParameter = billModeText != null ?
                new ObjectParameter("BillModeText", billModeText) :
                new ObjectParameter("BillModeText", typeof(string));
    
            var cumstomerIdParameter = cumstomerId.HasValue ?
                new ObjectParameter("CumstomerId", cumstomerId) :
                new ObjectParameter("CumstomerId", typeof(int));
    
            var cumstomerAddressParameter = cumstomerAddress != null ?
                new ObjectParameter("CumstomerAddress", cumstomerAddress) :
                new ObjectParameter("CumstomerAddress", typeof(string));
    
            var cumcontactParameter = cumcontact != null ?
                new ObjectParameter("Cumcontact", cumcontact) :
                new ObjectParameter("Cumcontact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateNewBillingForEstimate", estimateID, billNoParameter, billIDParameter, enteringDateParameter, billDateParameter, billModeParameter, customerNameParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter, tinNoParameter, chequeDateParameter, bankParameter, pendingAmountParameter, creditSaleParameter, paidAmountParameter, containerCountParameter, containerAmountParameter, wholeSaleRetailParameter, companyIDParameter, estimateNoParameter, formTypeParameter, formNameParameter, retailBillNoParameter, retailEstimateNoParameter, lessAddAmtParameter, discAmtParameter, roundOffParameter, billModeTextParameter, cumstomerIdParameter, cumstomerAddressParameter, cumcontactParameter);
        }
    
        public virtual int InsertUpdateNewCustomer(ObjectParameter accountID, string accountCode, Nullable<int> accountParent, Nullable<int> accountType, Nullable<int> accountGroup, string accountName, Nullable<decimal> amount, string reflectsIn, Nullable<int> order, string address, string city, string country, string mob, string phone, string email, string tinNo, string cstNo, Nullable<int> accountHead, Nullable<int> companyid, Nullable<int> rootId, string rateType, string saleBlock, string bankName, string cardType, string cardNo, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, string billmode, Nullable<int> gradeID, string dLNO, string pinNo, Nullable<int> creditDays, string discountPercentage, Nullable<decimal> dis8HNT, string dis8HT, string gSTinNo)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var accountGroupParameter = accountGroup.HasValue ?
                new ObjectParameter("AccountGroup", accountGroup) :
                new ObjectParameter("AccountGroup", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reflectsInParameter = reflectsIn != null ?
                new ObjectParameter("ReflectsIn", reflectsIn) :
                new ObjectParameter("ReflectsIn", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("mob", mob) :
                new ObjectParameter("mob", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var cstNoParameter = cstNo != null ?
                new ObjectParameter("cstNo", cstNo) :
                new ObjectParameter("cstNo", typeof(string));
    
            var accountHeadParameter = accountHead.HasValue ?
                new ObjectParameter("AccountHead", accountHead) :
                new ObjectParameter("AccountHead", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var rateTypeParameter = rateType != null ?
                new ObjectParameter("RateType", rateType) :
                new ObjectParameter("RateType", typeof(string));
    
            var saleBlockParameter = saleBlock != null ?
                new ObjectParameter("SaleBlock", saleBlock) :
                new ObjectParameter("SaleBlock", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var billmodeParameter = billmode != null ?
                new ObjectParameter("Billmode", billmode) :
                new ObjectParameter("Billmode", typeof(string));
    
            var gradeIDParameter = gradeID.HasValue ?
                new ObjectParameter("GradeID", gradeID) :
                new ObjectParameter("GradeID", typeof(int));
    
            var dLNOParameter = dLNO != null ?
                new ObjectParameter("DLNO", dLNO) :
                new ObjectParameter("DLNO", typeof(string));
    
            var pinNoParameter = pinNo != null ?
                new ObjectParameter("PinNo", pinNo) :
                new ObjectParameter("PinNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var discountPercentageParameter = discountPercentage != null ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(string));
    
            var dis8HNTParameter = dis8HNT.HasValue ?
                new ObjectParameter("Dis8HNT", dis8HNT) :
                new ObjectParameter("Dis8HNT", typeof(decimal));
    
            var dis8HTParameter = dis8HT != null ?
                new ObjectParameter("Dis8HT", dis8HT) :
                new ObjectParameter("Dis8HT", typeof(string));
    
            var gSTinNoParameter = gSTinNo != null ?
                new ObjectParameter("GSTinNo", gSTinNo) :
                new ObjectParameter("GSTinNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateNewCustomer", accountID, accountCodeParameter, accountParentParameter, accountTypeParameter, accountGroupParameter, accountNameParameter, amountParameter, reflectsInParameter, orderParameter, addressParameter, cityParameter, countryParameter, mobParameter, phoneParameter, emailParameter, tinNoParameter, cstNoParameter, accountHeadParameter, companyidParameter, rootIdParameter, rateTypeParameter, saleBlockParameter, bankNameParameter, cardTypeParameter, cardNoParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, billmodeParameter, gradeIDParameter, dLNOParameter, pinNoParameter, creditDaysParameter, discountPercentageParameter, dis8HNTParameter, dis8HTParameter, gSTinNoParameter);
        }
    
        public virtual int InsertUpdateNewOpeningstockDetailes(Nullable<int> openingID, string itemMode, Nullable<int> itemID, Nullable<int> itemcode, Nullable<int> itemcategory, Nullable<int> itemScategory, Nullable<int> unitId, Nullable<int> batchId, Nullable<decimal> quantity, Nullable<decimal> purchaserate, Nullable<decimal> totalpurchaserate)
        {
            var openingIDParameter = openingID.HasValue ?
                new ObjectParameter("openingID", openingID) :
                new ObjectParameter("openingID", typeof(int));
    
            var itemModeParameter = itemMode != null ?
                new ObjectParameter("ItemMode", itemMode) :
                new ObjectParameter("ItemMode", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemcodeParameter = itemcode.HasValue ?
                new ObjectParameter("Itemcode", itemcode) :
                new ObjectParameter("Itemcode", typeof(int));
    
            var itemcategoryParameter = itemcategory.HasValue ?
                new ObjectParameter("Itemcategory", itemcategory) :
                new ObjectParameter("Itemcategory", typeof(int));
    
            var itemScategoryParameter = itemScategory.HasValue ?
                new ObjectParameter("ItemScategory", itemScategory) :
                new ObjectParameter("ItemScategory", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var purchaserateParameter = purchaserate.HasValue ?
                new ObjectParameter("purchaserate", purchaserate) :
                new ObjectParameter("purchaserate", typeof(decimal));
    
            var totalpurchaserateParameter = totalpurchaserate.HasValue ?
                new ObjectParameter("Totalpurchaserate", totalpurchaserate) :
                new ObjectParameter("Totalpurchaserate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateNewOpeningstockDetailes", openingIDParameter, itemModeParameter, itemIDParameter, itemcodeParameter, itemcategoryParameter, itemScategoryParameter, unitIdParameter, batchIdParameter, quantityParameter, purchaserateParameter, totalpurchaserateParameter);
        }
    
        public virtual int InsertUpdateOpenigVoucher(ObjectParameter slno, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fcode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> companyId, string otherNarration)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fcodeParameter = fcode.HasValue ?
                new ObjectParameter("Fcode", fcode) :
                new ObjectParameter("Fcode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var otherNarrationParameter = otherNarration != null ?
                new ObjectParameter("OtherNarration", otherNarration) :
                new ObjectParameter("OtherNarration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateOpenigVoucher", slno, billNoParameter, aDateParameter, cDateParameter, fcodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, companyIdParameter, otherNarrationParameter);
        }
    
        public virtual int Insertupdateopeningstock(ObjectParameter openingId, Nullable<int> locationId, Nullable<System.DateTime> openingDate, Nullable<decimal> totalPurchaseAmount, Nullable<int> openingNo, Nullable<int> companyId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var openingDateParameter = openingDate.HasValue ?
                new ObjectParameter("OpeningDate", openingDate) :
                new ObjectParameter("OpeningDate", typeof(System.DateTime));
    
            var totalPurchaseAmountParameter = totalPurchaseAmount.HasValue ?
                new ObjectParameter("TotalPurchaseAmount", totalPurchaseAmount) :
                new ObjectParameter("TotalPurchaseAmount", typeof(decimal));
    
            var openingNoParameter = openingNo.HasValue ?
                new ObjectParameter("openingNo", openingNo) :
                new ObjectParameter("openingNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertupdateopeningstock", openingId, locationIdParameter, openingDateParameter, totalPurchaseAmountParameter, openingNoParameter, companyIdParameter);
        }
    
        public virtual int InsertUpdateopeningstockDetailes(Nullable<int> openingID, Nullable<int> itemID, Nullable<int> itemcode, Nullable<int> itemcategory, Nullable<int> unitId, Nullable<System.DateTime> dateTimeExpiridate, Nullable<decimal> quantity, Nullable<decimal> purchaserate, Nullable<decimal> salesrate, Nullable<decimal> totalpurchaserate)
        {
            var openingIDParameter = openingID.HasValue ?
                new ObjectParameter("openingID", openingID) :
                new ObjectParameter("openingID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemcodeParameter = itemcode.HasValue ?
                new ObjectParameter("Itemcode", itemcode) :
                new ObjectParameter("Itemcode", typeof(int));
    
            var itemcategoryParameter = itemcategory.HasValue ?
                new ObjectParameter("Itemcategory", itemcategory) :
                new ObjectParameter("Itemcategory", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var dateTimeExpiridateParameter = dateTimeExpiridate.HasValue ?
                new ObjectParameter("DateTimeExpiridate", dateTimeExpiridate) :
                new ObjectParameter("DateTimeExpiridate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var purchaserateParameter = purchaserate.HasValue ?
                new ObjectParameter("purchaserate", purchaserate) :
                new ObjectParameter("purchaserate", typeof(decimal));
    
            var salesrateParameter = salesrate.HasValue ?
                new ObjectParameter("Salesrate", salesrate) :
                new ObjectParameter("Salesrate", typeof(decimal));
    
            var totalpurchaserateParameter = totalpurchaserate.HasValue ?
                new ObjectParameter("Totalpurchaserate", totalpurchaserate) :
                new ObjectParameter("Totalpurchaserate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateopeningstockDetailes", openingIDParameter, itemIDParameter, itemcodeParameter, itemcategoryParameter, unitIdParameter, dateTimeExpiridateParameter, quantityParameter, purchaserateParameter, salesrateParameter, totalpurchaserateParameter);
        }
    
        public virtual int InsertUpdatePayment(ObjectParameter slno, Nullable<System.DateTime> pdate, Nullable<int> partyId, Nullable<decimal> amount, string type, string narration, Nullable<int> bank, string chkNo, Nullable<System.DateTime> chkDate, Nullable<decimal> collectionCharge, Nullable<decimal> discountCharge, Nullable<decimal> postalCharge, Nullable<int> companyId, string vNO)
        {
            var pdateParameter = pdate.HasValue ?
                new ObjectParameter("pdate", pdate) :
                new ObjectParameter("pdate", typeof(System.DateTime));
    
            var partyIdParameter = partyId.HasValue ?
                new ObjectParameter("PartyId", partyId) :
                new ObjectParameter("PartyId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var bankParameter = bank.HasValue ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(int));
    
            var chkNoParameter = chkNo != null ?
                new ObjectParameter("ChkNo", chkNo) :
                new ObjectParameter("ChkNo", typeof(string));
    
            var chkDateParameter = chkDate.HasValue ?
                new ObjectParameter("ChkDate", chkDate) :
                new ObjectParameter("ChkDate", typeof(System.DateTime));
    
            var collectionChargeParameter = collectionCharge.HasValue ?
                new ObjectParameter("CollectionCharge", collectionCharge) :
                new ObjectParameter("CollectionCharge", typeof(decimal));
    
            var discountChargeParameter = discountCharge.HasValue ?
                new ObjectParameter("DiscountCharge", discountCharge) :
                new ObjectParameter("DiscountCharge", typeof(decimal));
    
            var postalChargeParameter = postalCharge.HasValue ?
                new ObjectParameter("PostalCharge", postalCharge) :
                new ObjectParameter("PostalCharge", typeof(decimal));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vNOParameter = vNO != null ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePayment", slno, pdateParameter, partyIdParameter, amountParameter, typeParameter, narrationParameter, bankParameter, chkNoParameter, chkDateParameter, collectionChargeParameter, discountChargeParameter, postalChargeParameter, companyIdParameter, vNOParameter);
        }
    
        public virtual int InsertUpdatePL(ObjectParameter itemId, string itemName, string itemCode, Nullable<int> itemParent, Nullable<int> itemType, Nullable<int> itemGroup, Nullable<decimal> amount, string reflectsIn, Nullable<int> order, Nullable<int> createdBy)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemParentParameter = itemParent.HasValue ?
                new ObjectParameter("ItemParent", itemParent) :
                new ObjectParameter("ItemParent", typeof(int));
    
            var itemTypeParameter = itemType.HasValue ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(int));
    
            var itemGroupParameter = itemGroup.HasValue ?
                new ObjectParameter("ItemGroup", itemGroup) :
                new ObjectParameter("ItemGroup", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var reflectsInParameter = reflectsIn != null ?
                new ObjectParameter("ReflectsIn", reflectsIn) :
                new ObjectParameter("ReflectsIn", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePL", itemId, itemNameParameter, itemCodeParameter, itemParentParameter, itemTypeParameter, itemGroupParameter, amountParameter, reflectsInParameter, orderParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateProduct(ObjectParameter itemId, string itemname, Nullable<decimal> mRP, Nullable<decimal> wP, Nullable<int> categoryId, Nullable<int> isDeleted, Nullable<decimal> cCP, string hSNCODE, string tAX, Nullable<decimal> stock, Nullable<decimal> fCessRate, Nullable<decimal> tVMRate, Nullable<decimal> wayanadRate, Nullable<decimal> kasRate, Nullable<int> itemUnitType)
        {
            var itemnameParameter = itemname != null ?
                new ObjectParameter("Itemname", itemname) :
                new ObjectParameter("Itemname", typeof(string));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var wPParameter = wP.HasValue ?
                new ObjectParameter("WP", wP) :
                new ObjectParameter("WP", typeof(decimal));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var cCPParameter = cCP.HasValue ?
                new ObjectParameter("CCP", cCP) :
                new ObjectParameter("CCP", typeof(decimal));
    
            var hSNCODEParameter = hSNCODE != null ?
                new ObjectParameter("HSNCODE", hSNCODE) :
                new ObjectParameter("HSNCODE", typeof(string));
    
            var tAXParameter = tAX != null ?
                new ObjectParameter("TAX", tAX) :
                new ObjectParameter("TAX", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(decimal));
    
            var fCessRateParameter = fCessRate.HasValue ?
                new ObjectParameter("FCessRate", fCessRate) :
                new ObjectParameter("FCessRate", typeof(decimal));
    
            var tVMRateParameter = tVMRate.HasValue ?
                new ObjectParameter("TVMRate", tVMRate) :
                new ObjectParameter("TVMRate", typeof(decimal));
    
            var wayanadRateParameter = wayanadRate.HasValue ?
                new ObjectParameter("WayanadRate", wayanadRate) :
                new ObjectParameter("WayanadRate", typeof(decimal));
    
            var kasRateParameter = kasRate.HasValue ?
                new ObjectParameter("KasRate", kasRate) :
                new ObjectParameter("KasRate", typeof(decimal));
    
            var itemUnitTypeParameter = itemUnitType.HasValue ?
                new ObjectParameter("ItemUnitType", itemUnitType) :
                new ObjectParameter("ItemUnitType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProduct", itemId, itemnameParameter, mRPParameter, wPParameter, categoryIdParameter, isDeletedParameter, cCPParameter, hSNCODEParameter, tAXParameter, stockParameter, fCessRateParameter, tVMRateParameter, wayanadRateParameter, kasRateParameter, itemUnitTypeParameter);
        }
    
        public virtual int InsertUpdatePurchase(ObjectParameter purchaseID, Nullable<int> purchaseNo, Nullable<System.DateTime> enteredDate, Nullable<System.DateTime> purchaseDate, Nullable<int> purchaseMode, Nullable<int> fYearID, Nullable<int> supplierID, Nullable<decimal> amount, Nullable<int> checkAccountable, Nullable<int> locationID, Nullable<int> isAccountable, Nullable<int> createdBy, Nullable<decimal> unLoadingCharge, Nullable<decimal> freightRate, Nullable<decimal> totalSpentAmonut, string supplierInvoiceNo, string cSTNO, Nullable<int> companyID, Nullable<int> taxType, Nullable<System.DateTime> invoiceDate, Nullable<decimal> deliveryRate1, Nullable<decimal> discountRate1, Nullable<decimal> frightLessRate, Nullable<decimal> roundoff, Nullable<decimal> extraValue, Nullable<decimal> excludeOfTax, Nullable<decimal> includeOfTax, string purchaseModeName)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var purchaseModeParameter = purchaseMode.HasValue ?
                new ObjectParameter("purchaseMode", purchaseMode) :
                new ObjectParameter("purchaseMode", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var checkAccountableParameter = checkAccountable.HasValue ?
                new ObjectParameter("CheckAccountable", checkAccountable) :
                new ObjectParameter("CheckAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var unLoadingChargeParameter = unLoadingCharge.HasValue ?
                new ObjectParameter("UnLoadingCharge", unLoadingCharge) :
                new ObjectParameter("UnLoadingCharge", typeof(decimal));
    
            var freightRateParameter = freightRate.HasValue ?
                new ObjectParameter("FreightRate", freightRate) :
                new ObjectParameter("FreightRate", typeof(decimal));
    
            var totalSpentAmonutParameter = totalSpentAmonut.HasValue ?
                new ObjectParameter("TotalSpentAmonut", totalSpentAmonut) :
                new ObjectParameter("TotalSpentAmonut", typeof(decimal));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var cSTNOParameter = cSTNO != null ?
                new ObjectParameter("CSTNO", cSTNO) :
                new ObjectParameter("CSTNO", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var deliveryRate1Parameter = deliveryRate1.HasValue ?
                new ObjectParameter("DeliveryRate1", deliveryRate1) :
                new ObjectParameter("DeliveryRate1", typeof(decimal));
    
            var discountRate1Parameter = discountRate1.HasValue ?
                new ObjectParameter("DiscountRate1", discountRate1) :
                new ObjectParameter("DiscountRate1", typeof(decimal));
    
            var frightLessRateParameter = frightLessRate.HasValue ?
                new ObjectParameter("FrightLessRate", frightLessRate) :
                new ObjectParameter("FrightLessRate", typeof(decimal));
    
            var roundoffParameter = roundoff.HasValue ?
                new ObjectParameter("Roundoff", roundoff) :
                new ObjectParameter("Roundoff", typeof(decimal));
    
            var extraValueParameter = extraValue.HasValue ?
                new ObjectParameter("ExtraValue", extraValue) :
                new ObjectParameter("ExtraValue", typeof(decimal));
    
            var excludeOfTaxParameter = excludeOfTax.HasValue ?
                new ObjectParameter("ExcludeOfTax", excludeOfTax) :
                new ObjectParameter("ExcludeOfTax", typeof(decimal));
    
            var includeOfTaxParameter = includeOfTax.HasValue ?
                new ObjectParameter("IncludeOfTax", includeOfTax) :
                new ObjectParameter("IncludeOfTax", typeof(decimal));
    
            var purchaseModeNameParameter = purchaseModeName != null ?
                new ObjectParameter("PurchaseModeName", purchaseModeName) :
                new ObjectParameter("PurchaseModeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchase", purchaseID, purchaseNoParameter, enteredDateParameter, purchaseDateParameter, purchaseModeParameter, fYearIDParameter, supplierIDParameter, amountParameter, checkAccountableParameter, locationIDParameter, isAccountableParameter, createdByParameter, unLoadingChargeParameter, freightRateParameter, totalSpentAmonutParameter, supplierInvoiceNoParameter, cSTNOParameter, companyIDParameter, taxTypeParameter, invoiceDateParameter, deliveryRate1Parameter, discountRate1Parameter, frightLessRateParameter, roundoffParameter, extraValueParameter, excludeOfTaxParameter, includeOfTaxParameter, purchaseModeNameParameter);
        }
    
        public virtual int InsertUpdatePurchaseOrder(ObjectParameter purchaseID, Nullable<int> purchaseNo, Nullable<System.DateTime> enteredDate, Nullable<System.DateTime> purchaseDate, Nullable<int> purchaseMode, Nullable<int> fYearID, Nullable<int> supplierID, Nullable<decimal> amount, Nullable<int> createdBy, string tinNo, string tax, Nullable<int> companyID, Nullable<int> taxType)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var purchaseModeParameter = purchaseMode.HasValue ?
                new ObjectParameter("purchaseMode", purchaseMode) :
                new ObjectParameter("purchaseMode", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchaseOrder", purchaseID, purchaseNoParameter, enteredDateParameter, purchaseDateParameter, purchaseModeParameter, fYearIDParameter, supplierIDParameter, amountParameter, createdByParameter, tinNoParameter, taxParameter, companyIDParameter, taxTypeParameter);
        }
    
        public virtual int InsertUpdatePurchaseReturn(ObjectParameter purchaseID, Nullable<int> purchaseNo, Nullable<System.DateTime> purchaseDate, Nullable<int> purchaseMode, Nullable<int> fYearID, Nullable<int> supplierID, Nullable<decimal> amount, Nullable<int> checkAccountable, Nullable<int> locationID, Nullable<int> isAccountable, Nullable<int> createdBy, Nullable<decimal> unLoadingCharge, Nullable<decimal> freightRate, Nullable<decimal> totalSpentAmonut, string supplierInvoiceNo, string cSTNO, Nullable<int> companyID, Nullable<int> taxType, Nullable<System.DateTime> invoiceDate, Nullable<decimal> deliveryRate1, Nullable<decimal> discountRate1, Nullable<decimal> frightLessRate, Nullable<decimal> roundoff, Nullable<int> purchaseRetNo, Nullable<System.DateTime> purReturnDate)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var purchaseModeParameter = purchaseMode.HasValue ?
                new ObjectParameter("purchaseMode", purchaseMode) :
                new ObjectParameter("purchaseMode", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var checkAccountableParameter = checkAccountable.HasValue ?
                new ObjectParameter("CheckAccountable", checkAccountable) :
                new ObjectParameter("CheckAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var unLoadingChargeParameter = unLoadingCharge.HasValue ?
                new ObjectParameter("UnLoadingCharge", unLoadingCharge) :
                new ObjectParameter("UnLoadingCharge", typeof(decimal));
    
            var freightRateParameter = freightRate.HasValue ?
                new ObjectParameter("FreightRate", freightRate) :
                new ObjectParameter("FreightRate", typeof(decimal));
    
            var totalSpentAmonutParameter = totalSpentAmonut.HasValue ?
                new ObjectParameter("TotalSpentAmonut", totalSpentAmonut) :
                new ObjectParameter("TotalSpentAmonut", typeof(decimal));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var cSTNOParameter = cSTNO != null ?
                new ObjectParameter("CSTNO", cSTNO) :
                new ObjectParameter("CSTNO", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var deliveryRate1Parameter = deliveryRate1.HasValue ?
                new ObjectParameter("DeliveryRate1", deliveryRate1) :
                new ObjectParameter("DeliveryRate1", typeof(decimal));
    
            var discountRate1Parameter = discountRate1.HasValue ?
                new ObjectParameter("DiscountRate1", discountRate1) :
                new ObjectParameter("DiscountRate1", typeof(decimal));
    
            var frightLessRateParameter = frightLessRate.HasValue ?
                new ObjectParameter("FrightLessRate", frightLessRate) :
                new ObjectParameter("FrightLessRate", typeof(decimal));
    
            var roundoffParameter = roundoff.HasValue ?
                new ObjectParameter("Roundoff", roundoff) :
                new ObjectParameter("Roundoff", typeof(decimal));
    
            var purchaseRetNoParameter = purchaseRetNo.HasValue ?
                new ObjectParameter("PurchaseRetNo", purchaseRetNo) :
                new ObjectParameter("PurchaseRetNo", typeof(int));
    
            var purReturnDateParameter = purReturnDate.HasValue ?
                new ObjectParameter("PurReturnDate", purReturnDate) :
                new ObjectParameter("PurReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchaseReturn", purchaseID, purchaseNoParameter, purchaseDateParameter, purchaseModeParameter, fYearIDParameter, supplierIDParameter, amountParameter, checkAccountableParameter, locationIDParameter, isAccountableParameter, createdByParameter, unLoadingChargeParameter, freightRateParameter, totalSpentAmonutParameter, supplierInvoiceNoParameter, cSTNOParameter, companyIDParameter, taxTypeParameter, invoiceDateParameter, deliveryRate1Parameter, discountRate1Parameter, frightLessRateParameter, roundoffParameter, purchaseRetNoParameter, purReturnDateParameter);
        }
    
        public virtual int InsertUpdateReceipt(ObjectParameter slno, Nullable<System.DateTime> rdate, Nullable<int> partyId, Nullable<decimal> amount, string type, string remark, Nullable<int> oBank, string pBank, string chkNo, Nullable<System.DateTime> chkDate, string branch, string district, Nullable<decimal> collectionCharge, Nullable<decimal> discountCharge, Nullable<decimal> postalCharge, Nullable<int> companyId, string vNO)
        {
            var rdateParameter = rdate.HasValue ?
                new ObjectParameter("Rdate", rdate) :
                new ObjectParameter("Rdate", typeof(System.DateTime));
    
            var partyIdParameter = partyId.HasValue ?
                new ObjectParameter("PartyId", partyId) :
                new ObjectParameter("PartyId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var oBankParameter = oBank.HasValue ?
                new ObjectParameter("OBank", oBank) :
                new ObjectParameter("OBank", typeof(int));
    
            var pBankParameter = pBank != null ?
                new ObjectParameter("PBank", pBank) :
                new ObjectParameter("PBank", typeof(string));
    
            var chkNoParameter = chkNo != null ?
                new ObjectParameter("ChkNo", chkNo) :
                new ObjectParameter("ChkNo", typeof(string));
    
            var chkDateParameter = chkDate.HasValue ?
                new ObjectParameter("ChkDate", chkDate) :
                new ObjectParameter("ChkDate", typeof(System.DateTime));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var collectionChargeParameter = collectionCharge.HasValue ?
                new ObjectParameter("CollectionCharge", collectionCharge) :
                new ObjectParameter("CollectionCharge", typeof(decimal));
    
            var discountChargeParameter = discountCharge.HasValue ?
                new ObjectParameter("DiscountCharge", discountCharge) :
                new ObjectParameter("DiscountCharge", typeof(decimal));
    
            var postalChargeParameter = postalCharge.HasValue ?
                new ObjectParameter("PostalCharge", postalCharge) :
                new ObjectParameter("PostalCharge", typeof(decimal));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vNOParameter = vNO != null ?
                new ObjectParameter("VNO", vNO) :
                new ObjectParameter("VNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateReceipt", slno, rdateParameter, partyIdParameter, amountParameter, typeParameter, remarkParameter, oBankParameter, pBankParameter, chkNoParameter, chkDateParameter, branchParameter, districtParameter, collectionChargeParameter, discountChargeParameter, postalChargeParameter, companyIdParameter, vNOParameter);
        }
    
        public virtual int InsertUpdateRole(Nullable<int> roleId, string roleName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateRole", roleIdParameter, roleNameParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter);
        }
    
        public virtual int InsertUpdateRootPosition(Nullable<int> rootId, Nullable<int> customerId, Nullable<int> position, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateRootPosition", rootIdParameter, customerIdParameter, positionParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int InsertUpdateSaleForEstimate(ObjectParameter estimateID, Nullable<int> billNo, Nullable<int> billID, Nullable<System.DateTime> enteringDate, Nullable<System.DateTime> billDate, Nullable<int> billMode, string customerName, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID, string tinNo, Nullable<System.DateTime> chequeDate, string bank, Nullable<decimal> pendingAmount, Nullable<int> creditSale, Nullable<decimal> paidAmount, Nullable<int> containerCount, Nullable<decimal> containerAmount, string wholeSaleRetail, Nullable<int> companyID, Nullable<int> estimateNo, Nullable<int> formType, string formName, Nullable<int> retailBillNo, Nullable<int> retailEstimateNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var enteringDateParameter = enteringDate.HasValue ?
                new ObjectParameter("EnteringDate", enteringDate) :
                new ObjectParameter("EnteringDate", typeof(System.DateTime));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var creditSaleParameter = creditSale.HasValue ?
                new ObjectParameter("CreditSale", creditSale) :
                new ObjectParameter("CreditSale", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var containerCountParameter = containerCount.HasValue ?
                new ObjectParameter("ContainerCount", containerCount) :
                new ObjectParameter("ContainerCount", typeof(int));
    
            var containerAmountParameter = containerAmount.HasValue ?
                new ObjectParameter("ContainerAmount", containerAmount) :
                new ObjectParameter("ContainerAmount", typeof(decimal));
    
            var wholeSaleRetailParameter = wholeSaleRetail != null ?
                new ObjectParameter("WholeSaleRetail", wholeSaleRetail) :
                new ObjectParameter("WholeSaleRetail", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            var retailEstimateNoParameter = retailEstimateNo.HasValue ?
                new ObjectParameter("RetailEstimateNo", retailEstimateNo) :
                new ObjectParameter("RetailEstimateNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSaleForEstimate", estimateID, billNoParameter, billIDParameter, enteringDateParameter, billDateParameter, billModeParameter, customerNameParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter, tinNoParameter, chequeDateParameter, bankParameter, pendingAmountParameter, creditSaleParameter, paidAmountParameter, containerCountParameter, containerAmountParameter, wholeSaleRetailParameter, companyIDParameter, estimateNoParameter, formTypeParameter, formNameParameter, retailBillNoParameter, retailEstimateNoParameter);
        }
    
        public virtual int InsertUpdateSales(ObjectParameter billID, Nullable<int> billNo, Nullable<System.DateTime> enteringDate, Nullable<System.DateTime> billDate, Nullable<int> billMode, string customerName, Nullable<int> customerID, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID, string tinNo, Nullable<System.DateTime> chequeDate, string bank, Nullable<decimal> pendingAmount, Nullable<decimal> paidAmount, Nullable<decimal> advanceAmount, Nullable<decimal> balanceAmount, Nullable<int> creditSale, Nullable<int> containerCount, Nullable<decimal> containerAmount, string wholeSaleRetail, Nullable<int> companyID, Nullable<int> estimateNo, Nullable<int> formType, string formName, Nullable<int> retailBillNo, Nullable<int> retailEstimateNo, Nullable<int> isprint, Nullable<int> pendingId, Nullable<decimal> lessAddAmt, Nullable<decimal> discountRs, Nullable<decimal> roundOff, string billModeText, string cumAddress, string cumContactNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var enteringDateParameter = enteringDate.HasValue ?
                new ObjectParameter("EnteringDate", enteringDate) :
                new ObjectParameter("EnteringDate", typeof(System.DateTime));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var creditSaleParameter = creditSale.HasValue ?
                new ObjectParameter("CreditSale", creditSale) :
                new ObjectParameter("CreditSale", typeof(int));
    
            var containerCountParameter = containerCount.HasValue ?
                new ObjectParameter("ContainerCount", containerCount) :
                new ObjectParameter("ContainerCount", typeof(int));
    
            var containerAmountParameter = containerAmount.HasValue ?
                new ObjectParameter("ContainerAmount", containerAmount) :
                new ObjectParameter("ContainerAmount", typeof(decimal));
    
            var wholeSaleRetailParameter = wholeSaleRetail != null ?
                new ObjectParameter("WholeSaleRetail", wholeSaleRetail) :
                new ObjectParameter("WholeSaleRetail", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            var retailEstimateNoParameter = retailEstimateNo.HasValue ?
                new ObjectParameter("RetailEstimateNo", retailEstimateNo) :
                new ObjectParameter("RetailEstimateNo", typeof(int));
    
            var isprintParameter = isprint.HasValue ?
                new ObjectParameter("Isprint", isprint) :
                new ObjectParameter("Isprint", typeof(int));
    
            var pendingIdParameter = pendingId.HasValue ?
                new ObjectParameter("pendingId", pendingId) :
                new ObjectParameter("pendingId", typeof(int));
    
            var lessAddAmtParameter = lessAddAmt.HasValue ?
                new ObjectParameter("LessAddAmt", lessAddAmt) :
                new ObjectParameter("LessAddAmt", typeof(decimal));
    
            var discountRsParameter = discountRs.HasValue ?
                new ObjectParameter("DiscountRs", discountRs) :
                new ObjectParameter("DiscountRs", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var billModeTextParameter = billModeText != null ?
                new ObjectParameter("BillModeText", billModeText) :
                new ObjectParameter("BillModeText", typeof(string));
    
            var cumAddressParameter = cumAddress != null ?
                new ObjectParameter("CumAddress", cumAddress) :
                new ObjectParameter("CumAddress", typeof(string));
    
            var cumContactNoParameter = cumContactNo != null ?
                new ObjectParameter("CumContactNo", cumContactNo) :
                new ObjectParameter("CumContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSales", billID, billNoParameter, enteringDateParameter, billDateParameter, billModeParameter, customerNameParameter, customerIDParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter, tinNoParameter, chequeDateParameter, bankParameter, pendingAmountParameter, paidAmountParameter, advanceAmountParameter, balanceAmountParameter, creditSaleParameter, containerCountParameter, containerAmountParameter, wholeSaleRetailParameter, companyIDParameter, estimateNoParameter, formTypeParameter, formNameParameter, retailBillNoParameter, retailEstimateNoParameter, isprintParameter, pendingIdParameter, lessAddAmtParameter, discountRsParameter, roundOffParameter, billModeTextParameter, cumAddressParameter, cumContactNoParameter);
        }
    
        public virtual int InsertUpdateSingleJournal(ObjectParameter slno, string billNo, Nullable<System.DateTime> aDate, Nullable<System.DateTime> cDate, Nullable<int> fcode, Nullable<int> tCode, Nullable<decimal> amt, string fMode, string narration, Nullable<int> userId, string type, Nullable<int> companyId, string otherNarration)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var cDateParameter = cDate.HasValue ?
                new ObjectParameter("CDate", cDate) :
                new ObjectParameter("CDate", typeof(System.DateTime));
    
            var fcodeParameter = fcode.HasValue ?
                new ObjectParameter("Fcode", fcode) :
                new ObjectParameter("Fcode", typeof(int));
    
            var tCodeParameter = tCode.HasValue ?
                new ObjectParameter("TCode", tCode) :
                new ObjectParameter("TCode", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("Amt", amt) :
                new ObjectParameter("Amt", typeof(decimal));
    
            var fModeParameter = fMode != null ?
                new ObjectParameter("FMode", fMode) :
                new ObjectParameter("FMode", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var otherNarrationParameter = otherNarration != null ?
                new ObjectParameter("OtherNarration", otherNarration) :
                new ObjectParameter("OtherNarration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSingleJournal", slno, billNoParameter, aDateParameter, cDateParameter, fcodeParameter, tCodeParameter, amtParameter, fModeParameter, narrationParameter, userIdParameter, typeParameter, companyIdParameter, otherNarrationParameter);
        }
    
        public virtual int InsertUpdateStock(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<decimal> price, Nullable<decimal> total, string location, Nullable<int> companyID, Nullable<int> searchID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var searchIDParameter = searchID.HasValue ?
                new ObjectParameter("SearchID", searchID) :
                new ObjectParameter("SearchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStock", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, priceParameter, totalParameter, locationParameter, companyIDParameter, searchIDParameter);
        }
    
        public virtual int InsertupdateStockAdjestment(ObjectParameter billId, Nullable<int> refSlno, Nullable<System.DateTime> aDDate, Nullable<int> godownId, Nullable<int> companyId)
        {
            var refSlnoParameter = refSlno.HasValue ?
                new ObjectParameter("RefSlno", refSlno) :
                new ObjectParameter("RefSlno", typeof(int));
    
            var aDDateParameter = aDDate.HasValue ?
                new ObjectParameter("ADDate", aDDate) :
                new ObjectParameter("ADDate", typeof(System.DateTime));
    
            var godownIdParameter = godownId.HasValue ?
                new ObjectParameter("GodownId", godownId) :
                new ObjectParameter("GodownId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertupdateStockAdjestment", billId, refSlnoParameter, aDDateParameter, godownIdParameter, companyIdParameter);
        }
    
        public virtual int InsertupdateStockAdjestmentDetailes(Nullable<int> billId, Nullable<int> itemID, Nullable<int> batchId, Nullable<int> category, Nullable<int> subCategoryId, Nullable<int> unitId, Nullable<decimal> currentstock, Nullable<decimal> issueReceipt, Nullable<decimal> netquantity, string narration)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var currentstockParameter = currentstock.HasValue ?
                new ObjectParameter("Currentstock", currentstock) :
                new ObjectParameter("Currentstock", typeof(decimal));
    
            var issueReceiptParameter = issueReceipt.HasValue ?
                new ObjectParameter("IssueReceipt", issueReceipt) :
                new ObjectParameter("IssueReceipt", typeof(decimal));
    
            var netquantityParameter = netquantity.HasValue ?
                new ObjectParameter("Netquantity", netquantity) :
                new ObjectParameter("Netquantity", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertupdateStockAdjestmentDetailes", billIdParameter, itemIDParameter, batchIdParameter, categoryParameter, subCategoryIdParameter, unitIdParameter, currentstockParameter, issueReceiptParameter, netquantityParameter, narrationParameter);
        }
    
        public virtual int InsertUpdateStockForEstimnate(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> estimateNo, Nullable<int> billNO, Nullable<int> formType, Nullable<int> estimateID, Nullable<int> updateID, Nullable<int> isAdd, string customer)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var billNOParameter = billNO.HasValue ?
                new ObjectParameter("BillNO", billNO) :
                new ObjectParameter("BillNO", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateIDParameter = estimateID.HasValue ?
                new ObjectParameter("EstimateID", estimateID) :
                new ObjectParameter("EstimateID", typeof(int));
    
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(int));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockForEstimnate", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, estimateNoParameter, billNOParameter, formTypeParameter, estimateIDParameter, updateIDParameter, isAddParameter, customerParameter);
        }
    
        public virtual int InsertUpdateStockTemp(Nullable<int> itemID, string itemCode, Nullable<int> categoryID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockTemp", itemIDParameter, itemCodeParameter, categoryIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int InsertUpdateStockWhileBilling(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> formType, Nullable<int> estimateNo, Nullable<int> updateID, Nullable<int> isAdd)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockWhileBilling", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, formTypeParameter, estimateNoParameter, updateIDParameter, isAddParameter);
        }
    
        public virtual int InsertUpdateStockWhileBillingForEstimate(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> formType, Nullable<int> estimateNo, Nullable<int> billNo)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockWhileBillingForEstimate", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, formTypeParameter, estimateNoParameter, billNoParameter);
        }
    
        public virtual int InsertUpdateStockWhileBillingReturn(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> formType, Nullable<int> estimateNo, Nullable<int> updateID, Nullable<int> isAdd)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockWhileBillingReturn", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, formTypeParameter, estimateNoParameter, updateIDParameter, isAddParameter);
        }
    
        public virtual int InsertUpdateStockWhileBillReturn(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockWhileBillReturn", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter);
        }
    
        public virtual int InsertUpdateStockWhileRetailBillingForEstimate(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID, Nullable<int> formType, Nullable<int> estimateNo, Nullable<int> billNo, Nullable<int> retailforestimateupdate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var retailforestimateupdateParameter = retailforestimateupdate.HasValue ?
                new ObjectParameter("Retailforestimateupdate", retailforestimateupdate) :
                new ObjectParameter("Retailforestimateupdate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStockWhileRetailBillingForEstimate", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter, formTypeParameter, estimateNoParameter, billNoParameter, retailforestimateupdateParameter);
        }
    
        public virtual int InsertUpdateTax(Nullable<int> taxID, string taxName, Nullable<int> createdBy, Nullable<int> taxParent, string taxtype, Nullable<int> modifiedby, Nullable<int> deletedBy)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var taxParentParameter = taxParent.HasValue ?
                new ObjectParameter("TaxParent", taxParent) :
                new ObjectParameter("TaxParent", typeof(int));
    
            var taxtypeParameter = taxtype != null ?
                new ObjectParameter("taxtype", taxtype) :
                new ObjectParameter("taxtype", typeof(string));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateTax", taxIDParameter, taxNameParameter, createdByParameter, taxParentParameter, taxtypeParameter, modifiedbyParameter, deletedByParameter);
        }
    
        public virtual int InsertUpdateToLocation(Nullable<int> itemID, string categoryID, Nullable<int> subCategoryID, string itemName, Nullable<int> unitID, Nullable<System.DateTime> expiryDate, Nullable<int> currentQuantity, Nullable<int> locationID, string location)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateToLocation", itemIDParameter, categoryIDParameter, subCategoryIDParameter, itemNameParameter, unitIDParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, locationParameter);
        }
    
        public virtual int InsertUpdateUnit(Nullable<int> unitID, string unitName, Nullable<int> createdBy)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUnit", unitIDParameter, unitNameParameter, createdByParameter);
        }
    
        public virtual int InsertUpdateUser(ObjectParameter userId, string name, Nullable<int> sex, string address1, string address2, string address3, string mobile, string email, string userName, string password, string conformPassword, Nullable<int> departmentId, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> companyID, string company, Nullable<int> roleId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var conformPasswordParameter = conformPassword != null ?
                new ObjectParameter("ConformPassword", conformPassword) :
                new ObjectParameter("ConformPassword", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy != null ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(string));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUser", userId, nameParameter, sexParameter, address1Parameter, address2Parameter, address3Parameter, mobileParameter, emailParameter, userNameParameter, passwordParameter, conformPasswordParameter, departmentIdParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, companyIDParameter, companyParameter, roleIdParameter);
        }
    
        public virtual int InsertUpdateUser_App(Nullable<int> iD, Nullable<int> userId, string name, Nullable<int> sex, string address1, string address2, string address3, string mobile, string email, string userName, string password, string conformPassword, Nullable<int> departmentId, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> companyID, string company, Nullable<int> roleId, Nullable<int> locId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var conformPasswordParameter = conformPassword != null ?
                new ObjectParameter("ConformPassword", conformPassword) :
                new ObjectParameter("ConformPassword", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy != null ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(string));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("LocId", locId) :
                new ObjectParameter("LocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUser_App", iDParameter, userIdParameter, nameParameter, sexParameter, address1Parameter, address2Parameter, address3Parameter, mobileParameter, emailParameter, userNameParameter, passwordParameter, conformPasswordParameter, departmentIdParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, companyIDParameter, companyParameter, roleIdParameter, locIdParameter);
        }
    
        public virtual int InsertUpdateUserPermission(ObjectParameter permissionId, Nullable<int> permissionno, string documentType, Nullable<int> formID, Nullable<int> userId, string user, Nullable<int> create, Nullable<int> edit, Nullable<int> view, Nullable<int> delete, Nullable<int> print, Nullable<int> createdBy)
        {
            var permissionnoParameter = permissionno.HasValue ?
                new ObjectParameter("Permissionno", permissionno) :
                new ObjectParameter("Permissionno", typeof(int));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var createParameter = create.HasValue ?
                new ObjectParameter("Create", create) :
                new ObjectParameter("Create", typeof(int));
    
            var editParameter = edit.HasValue ?
                new ObjectParameter("Edit", edit) :
                new ObjectParameter("Edit", typeof(int));
    
            var viewParameter = view.HasValue ?
                new ObjectParameter("View", view) :
                new ObjectParameter("View", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(int));
    
            var printParameter = print.HasValue ?
                new ObjectParameter("Print", print) :
                new ObjectParameter("Print", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUserPermission", permissionId, permissionnoParameter, documentTypeParameter, formIDParameter, userIdParameter, userParameter, createParameter, editParameter, viewParameter, deleteParameter, printParameter, createdByParameter);
        }
    
        public virtual int InsertUserLoginHistory(ObjectParameter employeeCode, string employeeName, string loginUserName, Nullable<System.DateTime> dateIN, Nullable<System.DateTime> timeIN, Nullable<System.DateTime> dateOUT, Nullable<System.DateTime> timeOUT, string iPAddress)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var dateINParameter = dateIN.HasValue ?
                new ObjectParameter("DateIN", dateIN) :
                new ObjectParameter("DateIN", typeof(System.DateTime));
    
            var timeINParameter = timeIN.HasValue ?
                new ObjectParameter("TimeIN", timeIN) :
                new ObjectParameter("TimeIN", typeof(System.DateTime));
    
            var dateOUTParameter = dateOUT.HasValue ?
                new ObjectParameter("DateOUT", dateOUT) :
                new ObjectParameter("DateOUT", typeof(System.DateTime));
    
            var timeOUTParameter = timeOUT.HasValue ?
                new ObjectParameter("TimeOUT", timeOUT) :
                new ObjectParameter("TimeOUT", typeof(System.DateTime));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserLoginHistory", employeeCode, employeeNameParameter, loginUserNameParameter, dateINParameter, timeINParameter, dateOUTParameter, timeOUTParameter, iPAddressParameter);
        }
    
        public virtual int InserUpdateSalesOrder(ObjectParameter sOID, Nullable<System.DateTime> date, string orderNo, Nullable<int> customerID, Nullable<int> userID, Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> advanceAmo, Nullable<decimal> totAmo, Nullable<decimal> orderStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var advanceAmoParameter = advanceAmo.HasValue ?
                new ObjectParameter("AdvanceAmo", advanceAmo) :
                new ObjectParameter("AdvanceAmo", typeof(decimal));
    
            var totAmoParameter = totAmo.HasValue ?
                new ObjectParameter("TotAmo", totAmo) :
                new ObjectParameter("TotAmo", typeof(decimal));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserUpdateSalesOrder", sOID, dateParameter, orderNoParameter, customerIDParameter, userIDParameter, companyIDParameter, amountParameter, advanceAmoParameter, totAmoParameter, orderStatusParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter);
        }
    
        public virtual int InsetUpdateSaleReturn(Nullable<int> retailRetBillNo, Nullable<int> wholesaleRetBillNo, Nullable<System.DateTime> retailRetBilldate, ObjectParameter billID, Nullable<int> billNo, Nullable<System.DateTime> billDate, Nullable<int> billMode, string customerName, Nullable<int> customerID, Nullable<int> fYearID, Nullable<decimal> billAmount, Nullable<int> supplyMode, Nullable<int> createdBy, Nullable<int> isAccountable, Nullable<int> locationID, string tinNo, Nullable<decimal> pendingAmount, Nullable<decimal> paidAmount, Nullable<decimal> advanceAmount, Nullable<decimal> balanceAmount, Nullable<int> creditSale, Nullable<int> containerCount, Nullable<decimal> containerAmount, string wholeSaleRetail, Nullable<int> companyID, Nullable<int> estimateNo, Nullable<int> formType, string formName, Nullable<int> retailBillNo, Nullable<int> retailEstimateNo, Nullable<int> isprint, Nullable<int> pendingId, Nullable<decimal> lessAddAmt, Nullable<decimal> discountRs, Nullable<decimal> roundOff)
        {
            var retailRetBillNoParameter = retailRetBillNo.HasValue ?
                new ObjectParameter("RetailRetBillNo", retailRetBillNo) :
                new ObjectParameter("RetailRetBillNo", typeof(int));
    
            var wholesaleRetBillNoParameter = wholesaleRetBillNo.HasValue ?
                new ObjectParameter("WholesaleRetBillNo", wholesaleRetBillNo) :
                new ObjectParameter("WholesaleRetBillNo", typeof(int));
    
            var retailRetBilldateParameter = retailRetBilldate.HasValue ?
                new ObjectParameter("RetailRetBilldate", retailRetBilldate) :
                new ObjectParameter("RetailRetBilldate", typeof(System.DateTime));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var supplyModeParameter = supplyMode.HasValue ?
                new ObjectParameter("SupplyMode", supplyMode) :
                new ObjectParameter("SupplyMode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isAccountableParameter = isAccountable.HasValue ?
                new ObjectParameter("IsAccountable", isAccountable) :
                new ObjectParameter("IsAccountable", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var creditSaleParameter = creditSale.HasValue ?
                new ObjectParameter("CreditSale", creditSale) :
                new ObjectParameter("CreditSale", typeof(int));
    
            var containerCountParameter = containerCount.HasValue ?
                new ObjectParameter("ContainerCount", containerCount) :
                new ObjectParameter("ContainerCount", typeof(int));
    
            var containerAmountParameter = containerAmount.HasValue ?
                new ObjectParameter("ContainerAmount", containerAmount) :
                new ObjectParameter("ContainerAmount", typeof(decimal));
    
            var wholeSaleRetailParameter = wholeSaleRetail != null ?
                new ObjectParameter("WholeSaleRetail", wholeSaleRetail) :
                new ObjectParameter("WholeSaleRetail", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var retailBillNoParameter = retailBillNo.HasValue ?
                new ObjectParameter("RetailBillNo", retailBillNo) :
                new ObjectParameter("RetailBillNo", typeof(int));
    
            var retailEstimateNoParameter = retailEstimateNo.HasValue ?
                new ObjectParameter("RetailEstimateNo", retailEstimateNo) :
                new ObjectParameter("RetailEstimateNo", typeof(int));
    
            var isprintParameter = isprint.HasValue ?
                new ObjectParameter("Isprint", isprint) :
                new ObjectParameter("Isprint", typeof(int));
    
            var pendingIdParameter = pendingId.HasValue ?
                new ObjectParameter("pendingId", pendingId) :
                new ObjectParameter("pendingId", typeof(int));
    
            var lessAddAmtParameter = lessAddAmt.HasValue ?
                new ObjectParameter("LessAddAmt", lessAddAmt) :
                new ObjectParameter("LessAddAmt", typeof(decimal));
    
            var discountRsParameter = discountRs.HasValue ?
                new ObjectParameter("DiscountRs", discountRs) :
                new ObjectParameter("DiscountRs", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsetUpdateSaleReturn", retailRetBillNoParameter, wholesaleRetBillNoParameter, retailRetBilldateParameter, billID, billNoParameter, billDateParameter, billModeParameter, customerNameParameter, customerIDParameter, fYearIDParameter, billAmountParameter, supplyModeParameter, createdByParameter, isAccountableParameter, locationIDParameter, tinNoParameter, pendingAmountParameter, paidAmountParameter, advanceAmountParameter, balanceAmountParameter, creditSaleParameter, containerCountParameter, containerAmountParameter, wholeSaleRetailParameter, companyIDParameter, estimateNoParameter, formTypeParameter, formNameParameter, retailBillNoParameter, retailEstimateNoParameter, isprintParameter, pendingIdParameter, lessAddAmtParameter, discountRsParameter, roundOffParameter);
        }
    
        public virtual int ItemdetailesForStockRegister(Nullable<int> itemId, string itemname)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("Itemname", itemname) :
                new ObjectParameter("Itemname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemdetailesForStockRegister", itemIdParameter, itemnameParameter);
        }
    
        public virtual int ItemImage(string itemcode, byte[] image)
        {
            var itemcodeParameter = itemcode != null ?
                new ObjectParameter("itemcode", itemcode) :
                new ObjectParameter("itemcode", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemImage", itemcodeParameter, imageParameter);
        }
    
        public virtual int ItemWiseStockSummareyReportBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemId, Nullable<int> companyId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemWiseStockSummareyReportBetweenDates", fromDateParameter, toDateParameter, itemIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<login_check_Result> login_check()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<login_check_Result>("login_check");
        }
    
        public virtual ObjectResult<Login_Res_Result> Login_Res(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Res_Result>("Login_Res", usernameParameter, passwordParameter);
        }
    
        public virtual int New_Customer_App(string customerName, string gstN, string address, Nullable<int> mobno, Nullable<int> phone, string country, string state, string district, Nullable<int> pincode)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var gstNParameter = gstN != null ?
                new ObjectParameter("GstN", gstN) :
                new ObjectParameter("GstN", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobnoParameter = mobno.HasValue ?
                new ObjectParameter("Mobno", mobno) :
                new ObjectParameter("Mobno", typeof(int));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(int));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("New_Customer_App", customerNameParameter, gstNParameter, addressParameter, mobnoParameter, phoneParameter, countryParameter, stateParameter, districtParameter, pincodeParameter);
        }
    
        public virtual int NewDeletePurchase(Nullable<int> purchaseID, Nullable<int> createdBy)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewDeletePurchase", purchaseIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<RetailGetCustomerPandingAmount_Result> RetailGetCustomerPandingAmount(Nullable<int> billno, Nullable<int> headId, Nullable<int> companyId)
        {
            var billnoParameter = billno.HasValue ?
                new ObjectParameter("Billno", billno) :
                new ObjectParameter("Billno", typeof(int));
    
            var headIdParameter = headId.HasValue ?
                new ObjectParameter("HeadId", headId) :
                new ObjectParameter("HeadId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetailGetCustomerPandingAmount_Result>("RetailGetCustomerPandingAmount", billnoParameter, headIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<RouteWiseSalesOrderDetails_Result> RouteWiseSalesOrderDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> district, Nullable<int> companyID, Nullable<int> rootId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RouteWiseSalesOrderDetails_Result>("RouteWiseSalesOrderDetails", fromDateParameter, toDateParameter, districtParameter, companyIDParameter, rootIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SaleOrderAutogenerate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SaleOrderAutogenerate");
        }
    
        public virtual ObjectResult<SaleOrderByOrderNo_Result> SaleOrderByOrderNo(string orderno)
        {
            var ordernoParameter = orderno != null ?
                new ObjectParameter("Orderno", orderno) :
                new ObjectParameter("Orderno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleOrderByOrderNo_Result>("SaleOrderByOrderNo", ordernoParameter);
        }
    
        public virtual ObjectResult<Saleorderlisting_Result> Saleorderlisting(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Saleorderlisting_Result>("Saleorderlisting", userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Search_Result> Search(string search, Nullable<int> accountParent)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var accountParentParameter = accountParent.HasValue ?
                new ObjectParameter("AccountParent", accountParent) :
                new ObjectParameter("AccountParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Search_Result>("Search", searchParameter, accountParentParameter);
        }
    
        public virtual ObjectResult<SearchCustomer_Result> SearchCustomer(Nullable<int> empID, Nullable<int> companyID, Nullable<int> rootID, string day, string name)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var rootIDParameter = rootID.HasValue ?
                new ObjectParameter("RootID", rootID) :
                new ObjectParameter("RootID", typeof(int));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCustomer_Result>("SearchCustomer", empIDParameter, companyIDParameter, rootIDParameter, dayParameter, nameParameter);
        }
    
        public virtual ObjectResult<SearchPL_Result> SearchPL(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchPL_Result>("SearchPL", searchParameter);
        }
    
        public virtual ObjectResult<SearchProduct_Result> SearchProduct(string itemName)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProduct_Result>("SearchProduct", itemNameParameter);
        }
    
        public virtual int StockBeforeEditInPurchaseRet(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockBeforeEditInPurchaseRet", itemIDParameter, itemCodeParameter, itemCategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int StockSummareyReportBetweenDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockSummareyReportBetweenDates", fromDateParameter, toDateParameter, companyIdParameter);
        }
    
        public virtual int StockUpdateBeforeEdit(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockUpdateBeforeEdit", itemIDParameter, itemCodeParameter, itemCategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int StockUpdateBeforeEditInSale(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockUpdateBeforeEditInSale", itemIDParameter, itemCodeParameter, itemCategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int StockUpdateBeforeEditInSaleReturn(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockUpdateBeforeEditInSaleReturn", itemIDParameter, itemCodeParameter, itemCategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int Sync_Delete_DirectSaledetails(string suitApps_id)
        {
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_Delete_DirectSaledetails", suitApps_idParameter);
        }
    
        public virtual int Sync_Delete_Saleorderdetails(string suitApps_id)
        {
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_Delete_Saleorderdetails", suitApps_idParameter);
        }
    
        public virtual int Sync_DirectSaleDetails(Nullable<int> dSID, Nullable<int> itemID, Nullable<int> qty, Nullable<decimal> netAmount, string suitApps_id, string tax_Rate, Nullable<decimal> tax_Amt, Nullable<decimal> rate, Nullable<decimal> grossValue, string cGST_Rate, Nullable<decimal> cGST_Amt, string sGST_Rate, Nullable<decimal> sGST_Amt, Nullable<int> freeQuantity, ObjectParameter outId, Nullable<decimal> mRP, string disptg, Nullable<decimal> disamt, ObjectParameter outSuitApps_id, string fCessRate, Nullable<decimal> fCessAmt)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var tax_RateParameter = tax_Rate != null ?
                new ObjectParameter("Tax_Rate", tax_Rate) :
                new ObjectParameter("Tax_Rate", typeof(string));
    
            var tax_AmtParameter = tax_Amt.HasValue ?
                new ObjectParameter("Tax_Amt", tax_Amt) :
                new ObjectParameter("Tax_Amt", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var grossValueParameter = grossValue.HasValue ?
                new ObjectParameter("GrossValue", grossValue) :
                new ObjectParameter("GrossValue", typeof(decimal));
    
            var cGST_RateParameter = cGST_Rate != null ?
                new ObjectParameter("CGST_Rate", cGST_Rate) :
                new ObjectParameter("CGST_Rate", typeof(string));
    
            var cGST_AmtParameter = cGST_Amt.HasValue ?
                new ObjectParameter("CGST_Amt", cGST_Amt) :
                new ObjectParameter("CGST_Amt", typeof(decimal));
    
            var sGST_RateParameter = sGST_Rate != null ?
                new ObjectParameter("SGST_Rate", sGST_Rate) :
                new ObjectParameter("SGST_Rate", typeof(string));
    
            var sGST_AmtParameter = sGST_Amt.HasValue ?
                new ObjectParameter("SGST_Amt", sGST_Amt) :
                new ObjectParameter("SGST_Amt", typeof(decimal));
    
            var freeQuantityParameter = freeQuantity.HasValue ?
                new ObjectParameter("FreeQuantity", freeQuantity) :
                new ObjectParameter("FreeQuantity", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var disptgParameter = disptg != null ?
                new ObjectParameter("disptg", disptg) :
                new ObjectParameter("disptg", typeof(string));
    
            var disamtParameter = disamt.HasValue ?
                new ObjectParameter("disamt", disamt) :
                new ObjectParameter("disamt", typeof(decimal));
    
            var fCessRateParameter = fCessRate != null ?
                new ObjectParameter("FCessRate", fCessRate) :
                new ObjectParameter("FCessRate", typeof(string));
    
            var fCessAmtParameter = fCessAmt.HasValue ?
                new ObjectParameter("FCessAmt", fCessAmt) :
                new ObjectParameter("FCessAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_DirectSaleDetails", dSIDParameter, itemIDParameter, qtyParameter, netAmountParameter, suitApps_idParameter, tax_RateParameter, tax_AmtParameter, rateParameter, grossValueParameter, cGST_RateParameter, cGST_AmtParameter, sGST_RateParameter, sGST_AmtParameter, freeQuantityParameter, outId, mRPParameter, disptgParameter, disamtParameter, outSuitApps_id, fCessRateParameter, fCessAmtParameter);
        }
    
        public virtual int Sync_DirectSales(Nullable<int> dSID, Nullable<System.DateTime> date, string orderNo, Nullable<int> customerID, Nullable<int> userID, Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> advanceAmo, Nullable<decimal> totAmo, Nullable<decimal> orderStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, string suitApps_id, Nullable<decimal> discount, string discount_rate, string customer_SuitAppsId, Nullable<int> billNo, string bill_Series, Nullable<int> billMode, ObjectParameter outId, ObjectParameter outDSID, ObjectParameter outSuitApps_id, string invoiceType)
        {
            var dSIDParameter = dSID.HasValue ?
                new ObjectParameter("DSID", dSID) :
                new ObjectParameter("DSID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var advanceAmoParameter = advanceAmo.HasValue ?
                new ObjectParameter("AdvanceAmo", advanceAmo) :
                new ObjectParameter("AdvanceAmo", typeof(decimal));
    
            var totAmoParameter = totAmo.HasValue ?
                new ObjectParameter("TotAmo", totAmo) :
                new ObjectParameter("TotAmo", typeof(decimal));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discount_rateParameter = discount_rate != null ?
                new ObjectParameter("Discount_rate", discount_rate) :
                new ObjectParameter("Discount_rate", typeof(string));
    
            var customer_SuitAppsIdParameter = customer_SuitAppsId != null ?
                new ObjectParameter("Customer_SuitAppsId", customer_SuitAppsId) :
                new ObjectParameter("Customer_SuitAppsId", typeof(string));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var bill_SeriesParameter = bill_Series != null ?
                new ObjectParameter("Bill_Series", bill_Series) :
                new ObjectParameter("Bill_Series", typeof(string));
    
            var billModeParameter = billMode.HasValue ?
                new ObjectParameter("BillMode", billMode) :
                new ObjectParameter("BillMode", typeof(int));
    
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_DirectSales", dSIDParameter, dateParameter, orderNoParameter, customerIDParameter, userIDParameter, companyIDParameter, amountParameter, advanceAmoParameter, totAmoParameter, orderStatusParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, suitApps_idParameter, discountParameter, discount_rateParameter, customer_SuitAppsIdParameter, billNoParameter, bill_SeriesParameter, billModeParameter, outId, outDSID, outSuitApps_id, invoiceTypeParameter);
        }
    
        public virtual int Sync_SaleOrderDetails(ObjectParameter outId, Nullable<int> sOID, Nullable<int> itemID, Nullable<int> qty, Nullable<decimal> netAmount, string suitApps_id, Nullable<int> freeQty, Nullable<decimal> rate, ObjectParameter outSuitApps_id)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("FreeQty", freeQty) :
                new ObjectParameter("FreeQty", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_SaleOrderDetails", outId, sOIDParameter, itemIDParameter, qtyParameter, netAmountParameter, suitApps_idParameter, freeQtyParameter, rateParameter, outSuitApps_id);
        }
    
        public virtual int Sync_SaleOrders(Nullable<int> sOID, Nullable<System.DateTime> date, string orderNo, Nullable<int> customerID, Nullable<int> userID, Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> advanceAmo, Nullable<decimal> totAmo, Nullable<decimal> orderStatus, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate, Nullable<int> isDeleted, string suitApps_id, string customer_SuitAppId, ObjectParameter outId, ObjectParameter outSOID, ObjectParameter outSuitApps_id)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var advanceAmoParameter = advanceAmo.HasValue ?
                new ObjectParameter("AdvanceAmo", advanceAmo) :
                new ObjectParameter("AdvanceAmo", typeof(decimal));
    
            var totAmoParameter = totAmo.HasValue ?
                new ObjectParameter("TotAmo", totAmo) :
                new ObjectParameter("TotAmo", typeof(decimal));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var suitApps_idParameter = suitApps_id != null ?
                new ObjectParameter("SuitApps_id", suitApps_id) :
                new ObjectParameter("SuitApps_id", typeof(string));
    
            var customer_SuitAppIdParameter = customer_SuitAppId != null ?
                new ObjectParameter("Customer_SuitAppId", customer_SuitAppId) :
                new ObjectParameter("Customer_SuitAppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sync_SaleOrders", sOIDParameter, dateParameter, orderNoParameter, customerIDParameter, userIDParameter, companyIDParameter, amountParameter, advanceAmoParameter, totAmoParameter, orderStatusParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, deletedByParameter, deletedDateParameter, isDeletedParameter, suitApps_idParameter, customer_SuitAppIdParameter, outId, outSOID, outSuitApps_id);
        }
    
        public virtual ObjectResult<TalukWiseSalesOrderReport_Result> TalukWiseSalesOrderReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> district, Nullable<int> companyID, Nullable<int> taluk)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var talukParameter = taluk.HasValue ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalukWiseSalesOrderReport_Result>("TalukWiseSalesOrderReport", fromDateParameter, toDateParameter, districtParameter, companyIDParameter, talukParameter);
        }
    
        public virtual int UpdatBilledStatusOfEstimate(Nullable<int> estimateNo)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatBilledStatusOfEstimate", estimateNoParameter);
        }
    
        public virtual int UpdatBilledStatusOfEstimateForWholeSale(Nullable<int> estimateNo)
        {
            var estimateNoParameter = estimateNo.HasValue ?
                new ObjectParameter("EstimateNo", estimateNo) :
                new ObjectParameter("EstimateNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatBilledStatusOfEstimateForWholeSale", estimateNoParameter);
        }
    
        public virtual int updatedeleteemp(Nullable<int> empID, Nullable<System.DateTime> deletedDate, Nullable<int> deletedBy)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatedeleteemp", empIDParameter, deletedDateParameter, deletedByParameter);
        }
    
        public virtual int UpdateLastBillno(Nullable<int> billNo, Nullable<int> companyID)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLastBillno", billNoParameter, companyIDParameter);
        }
    
        public virtual int UpdateLastBillnoSeriesWise(string series, string invType, Nullable<int> billno)
        {
            var seriesParameter = series != null ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(string));
    
            var invTypeParameter = invType != null ?
                new ObjectParameter("InvType", invType) :
                new ObjectParameter("InvType", typeof(string));
    
            var billnoParameter = billno.HasValue ?
                new ObjectParameter("Billno", billno) :
                new ObjectParameter("Billno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLastBillnoSeriesWise", seriesParameter, invTypeParameter, billnoParameter);
        }
    
        public virtual int UpdatePassword(ObjectParameter userId, string email, string password, string conformPassword, string createdBy)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var conformPasswordParameter = conformPassword != null ?
                new ObjectParameter("ConformPassword", conformPassword) :
                new ObjectParameter("ConformPassword", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", userId, emailParameter, passwordParameter, conformPasswordParameter, createdByParameter);
        }
    
        public virtual int UpdatePendingStatusOfPurchaseOrder(Nullable<int> purchaseNo, Nullable<int> itemID, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<decimal> quantity, Nullable<decimal> orderQuantity, Nullable<decimal> amount, Nullable<int> purchaseID)
        {
            var purchaseNoParameter = purchaseNo.HasValue ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePendingStatusOfPurchaseOrder", purchaseNoParameter, itemIDParameter, categoryIDParameter, subcategoryIDParameter, quantityParameter, orderQuantityParameter, amountParameter, purchaseIDParameter);
        }
    
        public virtual int UpdatePriceDetails(string addedUnit, Nullable<int> levelNo, Nullable<int> quantity, Nullable<decimal> sales_Price, string unitName, Nullable<int> itemID, Nullable<int> unitID)
        {
            var addedUnitParameter = addedUnit != null ?
                new ObjectParameter("AddedUnit", addedUnit) :
                new ObjectParameter("AddedUnit", typeof(string));
    
            var levelNoParameter = levelNo.HasValue ?
                new ObjectParameter("LevelNo", levelNo) :
                new ObjectParameter("LevelNo", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var sales_PriceParameter = sales_Price.HasValue ?
                new ObjectParameter("Sales_Price", sales_Price) :
                new ObjectParameter("Sales_Price", typeof(decimal));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePriceDetails", addedUnitParameter, levelNoParameter, quantityParameter, sales_PriceParameter, unitNameParameter, itemIDParameter, unitIDParameter);
        }
    
        public virtual int UpdateSaleOrderDetails(Nullable<int> sOID, Nullable<int> itemID, Nullable<double> qty, Nullable<decimal> netAmount)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(double));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSaleOrderDetails", sOIDParameter, itemIDParameter, qtyParameter, netAmountParameter);
        }
    
        public virtual int UpdateSaleOrderStatus(Nullable<int> sOID, Nullable<int> orderStatus)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSaleOrderStatus", sOIDParameter, orderStatusParameter);
        }
    
        public virtual int UpdateSellingPrice(ObjectParameter itemID, Nullable<int> unitID, Nullable<decimal> wholeSalePrice, Nullable<decimal> sellingPrice, Nullable<decimal> discount)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var wholeSalePriceParameter = wholeSalePrice.HasValue ?
                new ObjectParameter("WholeSalePrice", wholeSalePrice) :
                new ObjectParameter("WholeSalePrice", typeof(decimal));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSellingPrice", itemID, unitIDParameter, wholeSalePriceParameter, sellingPriceParameter, discountParameter);
        }
    
        public virtual int UpdateShadeRate(Nullable<decimal> shadeRate)
        {
            var shadeRateParameter = shadeRate.HasValue ?
                new ObjectParameter("ShadeRate", shadeRate) :
                new ObjectParameter("ShadeRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShadeRate", shadeRateParameter);
        }
    
        public virtual int updatestock(Nullable<decimal> stock, Nullable<int> itemID)
        {
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatestock", stockParameter, itemIDParameter);
        }
    
        public virtual int updatestockofstockadjestment(Nullable<int> itemID, string category, Nullable<int> subcategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("Subcategory", subcategory) :
                new ObjectParameter("Subcategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatestockofstockadjestment", itemIDParameter, categoryParameter, subcategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int UpdateStockPurchaseReturn(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStockPurchaseReturn", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int updatestockwhileDeleteopeningstock(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatestockwhileDeleteopeningstock", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int UpdateStockwhileDeletepurchase(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStockwhileDeletepurchase", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int updatestockwhileEditopeningstock(Nullable<int> itemID, string itemCode, Nullable<int> itemCategory, string itemName, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatestockwhileEditopeningstock", itemIDParameter, itemCodeParameter, itemCategoryParameter, itemNameParameter, expiryDateParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int updatestockwhileEditStockadjestment(Nullable<int> itemID, string category, Nullable<int> subcategory, Nullable<decimal> currentQuantity, Nullable<int> locationID, Nullable<int> companyID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("subcategory", subcategory) :
                new ObjectParameter("subcategory", typeof(int));
    
            var currentQuantityParameter = currentQuantity.HasValue ?
                new ObjectParameter("CurrentQuantity", currentQuantity) :
                new ObjectParameter("CurrentQuantity", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatestockwhileEditStockadjestment", itemIDParameter, categoryParameter, subcategoryParameter, currentQuantityParameter, locationIDParameter, companyIDParameter);
        }
    
        public virtual int UPDATETOKENREVOKESTATUS(Nullable<int> tOKENNO)
        {
            var tOKENNOParameter = tOKENNO.HasValue ?
                new ObjectParameter("TOKENNO", tOKENNO) :
                new ObjectParameter("TOKENNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATETOKENREVOKESTATUS", tOKENNOParameter);
        }
    
        public virtual int UpdateTokenStatus(string bill)
        {
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTokenStatus", billParameter);
        }
    
        public virtual int UpdateTokenStatus1(string bill)
        {
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTokenStatus1", billParameter);
        }
    
        public virtual int UpdateTokenStatus2(string bill)
        {
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTokenStatus2", billParameter);
        }
    
        public virtual int UpdateVanStock(Nullable<int> vanId, Nullable<int> itemId, Nullable<int> stock)
        {
            var vanIdParameter = vanId.HasValue ?
                new ObjectParameter("VanId", vanId) :
                new ObjectParameter("VanId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVanStock", vanIdParameter, itemIdParameter, stockParameter);
        }
    
        public virtual int UpdateVanStock1(Nullable<int> vanId, Nullable<int> itemId, Nullable<int> stock)
        {
            var vanIdParameter = vanId.HasValue ?
                new ObjectParameter("VanId", vanId) :
                new ObjectParameter("VanId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVanStock1", vanIdParameter, itemIdParameter, stockParameter);
        }
    }
}
